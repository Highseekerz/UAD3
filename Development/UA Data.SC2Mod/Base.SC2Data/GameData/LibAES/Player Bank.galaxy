ascii_channel_t PlayerBankImportConverter;
int PlayerBankImportConverterRead(){
    return ASCIIChannelRead(PlayerBankImportConverter);
}
string PlayerBankImportConverterSignature(string s){
    sha1_hasher_t hasher;
    imperial_bank_key_t hash;
    
    ASCIIChannelSetup(PlayerBankImportConverter, s);
    SHA1HasherHashData(hasher, PlayerBankImportConverterRead, ASCIIChannelLength(PlayerBankImportConverter));
    SHA1HasherHash(hasher, hash);
    return ASCIIUtilIntToHex(hash[0]) + ASCIIUtilIntToHex(hash[1]) + ASCIIUtilIntToHex(hash[2]) + ASCIIUtilIntToHex(hash[3]) + ASCIIUtilIntToHex(hash[4]);;
}
imperial_bank_t[16] PlayerBanks;

void PlayerBankNew(int player){
    ImperialBankClear(PlayerBanks[player]);
}

bool PlayerBankLoad(int player){
    bit_field_t block;
    int i;
    int ver;
    int len;
   
    if( !ImperialBankLoad(PlayerBanks[player], lib90F7C81D_gv_bankData.lv_banks[player]) ){ return false; }
 
    BitFieldInitialize(block, 32, false);
   
    if( !ImperialBankRead(PlayerBanks[player], "UAD", block) ){ return false; }
    BitFieldSeek(block, 0);
  
    len = BitFieldGetSize(block);
   
    ver = BitFieldRead(block, 8);
   
    if( ver > 2 ){ return false; }
   
    if( len != 640 ){ return false; }
    //176
    lib90F7C81D_gv_bankData.lv_xP[player] = BitFieldRead(block, 24);
    lib90F7C81D_gv_bankData.lv_gamesPlayed[player] = BitFieldRead(block, 16);    
    lib90F7C81D_gv_bankData.lv_totalKills[player] = BitFieldRead(block, 20);
    lib90F7C81D_gv_bankData.lv_totalMassiveKills[player] = BitFieldRead(block, 20);
    lib90F7C81D_gv_bankData.lv_totalRevivePoints[player] = BitFieldRead(block, 20);

    if(ver < 2) { lib90F7C81D_gv_bankData.lv_totalHeals[player] = BitFieldRead(block, 20);

    } else { lib90F7C81D_gv_bankData.lv_totalHeals[player] = BitFieldRead(block, 24); }
   
    lib90F7C81D_gv_bankData.lv_totalHits[player] = BitFieldRead(block, 20);
    lib90F7C81D_gv_bankData.lv_totalDeaths[player] = BitFieldRead(block, 16);
    lib90F7C81D_gv_bankData.lv_camoSelected[player] = BitFieldRead(block, 8);
    lib90F7C81D_gv_bankData.lv_decalSelected[player] = BitFieldRead(block, 8);
    
    //160 games won
    for( i = 1 ; i <= 10 ; i+= 1 ){
        lib90F7C81D_gv_bankData.lv_gamesWon[i][player] = BitFieldRead(block, 16);
    }
    //130 Achievements
    if( ver == 0 ) {
        for( i = 1 ; i <= 50 ; i+= 1 ){
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[i][player] = BitFieldRead(block, 1) != 0;
        }
    } else { 
        for( i = 1 ; i <= 130 ; i+= 1 ){
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[i][player] = BitFieldRead(block, 1) != 0;
        }
    }
    //52 camo
    if( ver == 0 ) {
        for( i = 1 ; i <= 46 ; i+= 1 ){
            lib90F7C81D_gv_bankData.lv_camosUnlocked[i][player] = BitFieldRead(block, 1) != 0;
        } 
    } else {   
        for( i = 1 ; i <= 52 ; i+= 1 ){
            lib90F7C81D_gv_bankData.lv_camosUnlocked[i][player] = BitFieldRead(block, 1) != 0;
        }
    }
    //50 decal
    if( ver == 0 ){
        for( i = 1 ; i <= 43 ; i+= 1 ){
            lib90F7C81D_gv_bankData.lv_decalsUnlocked[i][player] = BitFieldRead(block, 1) != 0;
        }
    } else {
        for( i = 1 ; i <= 50 ; i+= 1 ){
            lib90F7C81D_gv_bankData.lv_decalsUnlocked[i][player] = BitFieldRead(block, 1) != 0;
        }
    }
    //60
    if( ver == 0 ){
        for( i = 1 ; i <= 6 ; i+= 1 ){
            lib90F7C81D_gv_iIIIIIlllllll[i][player] = BitFieldRead(block, 20);
        }
    } else {
        for( i = 1 ; i <= 3 ; i+= 1 ){
            lib90F7C81D_gv_iIIIIIlllllll[i][player] = BitFieldRead(block, 20);
        }
    }
    //628 
    return true;
}
int PlayerBankClampInt(int in, int len){
    int max;
    if( in < 0 ){ return 0; }
    max = (~((-1) << len));
    if( in > max ){ return max; }
    return in;
}
void PlayerBankWriteBool(structref<bit_field_t> block, bool val){
    if( val ){ BitFieldWrite(block, 1, 1); }
    else{ BitFieldWrite(block, 0, 1); }
}
bool PlayerBankSave(int player){
    bit_field_t block;
    int i;
   
    if( !ImperialBankValid(PlayerBanks[player]) ){
        ImperialBankClear(PlayerBanks[player]);
    }
    BitFieldInitialize(block, 640, false);
    BitFieldSeek(block, 0);
    BitFieldWrite(block, 2, 8);
  
    BitFieldWrite(block, PlayerBankClampInt(lib90F7C81D_gv_bankData.lv_xP[player], 24), 24);
    BitFieldWrite(block, PlayerBankClampInt(lib90F7C81D_gv_bankData.lv_gamesPlayed[player], 16), 16);
    BitFieldWrite(block, PlayerBankClampInt(lib90F7C81D_gv_bankData.lv_totalKills[player], 20), 20);
    BitFieldWrite(block, PlayerBankClampInt(lib90F7C81D_gv_bankData.lv_totalMassiveKills[player], 20), 20);
    BitFieldWrite(block, PlayerBankClampInt(lib90F7C81D_gv_bankData.lv_totalRevivePoints[player], 20), 20);
    BitFieldWrite(block, PlayerBankClampInt(lib90F7C81D_gv_bankData.lv_totalHeals[player], 24), 24);
    BitFieldWrite(block, PlayerBankClampInt(lib90F7C81D_gv_bankData.lv_totalHits[player], 20), 20);
    BitFieldWrite(block, PlayerBankClampInt(lib90F7C81D_gv_bankData.lv_totalDeaths[player], 16), 16);
    BitFieldWrite(block, PlayerBankClampInt(lib90F7C81D_gv_bankData.lv_camoSelected[player], 8), 8);
    BitFieldWrite(block, PlayerBankClampInt(lib90F7C81D_gv_bankData.lv_decalSelected[player], 8), 8);
       
    for( i = 1 ; i <= 10 ; i+= 1 ){
        BitFieldWrite(block, PlayerBankClampInt(lib90F7C81D_gv_bankData.lv_gamesWon[i][player], 16), 16);
    }
   
    for( i = 1 ; i <= 130 ; i+= 1 ){
        PlayerBankWriteBool(block, lib90F7C81D_gv_bankData.lv_achievementsUnlocked[i][player]);
    }

    for( i = 1 ; i <= 52 ; i+= 1 ){
        PlayerBankWriteBool(block, lib90F7C81D_gv_bankData.lv_camosUnlocked[i][player]);
    }

    for( i = 1 ; i <= 50 ; i+= 1 ){
        PlayerBankWriteBool(block, lib90F7C81D_gv_bankData.lv_decalsUnlocked[i][player]);
    }

    for( i = 1 ; i <= 3 ; i+= 1 ){
        BitFieldWrite(block, PlayerBankClampInt(lib90F7C81D_gv_iIIIIIlllllll[i][player], 20), 20);
    }
       
    if( !ImperialBankWrite(PlayerBanks[player], "UAD", block) ){ return false; }
    return ImperialBankSave(PlayerBanks[player]);
}