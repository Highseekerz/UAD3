include "TriggerLibs/natives"

//--------------------------------------------------------------------------------------------------
// Library: UAD Core
//--------------------------------------------------------------------------------------------------
// Preset Declarations
string lib90F7C81D_ge_WeatherType_Ident (string lp_val);
const int lib90F7C81D_ge_PMCSlot_Add = 0;
const int lib90F7C81D_ge_PMCSlot_Substract = 1;
string lib90F7C81D_ge_Difficulty_Ident (int lp_val);
string lib90F7C81D_ge_GameMode_Ident (int lp_val);
const int lib90F7C81D_ge_LoopType_PlagueSpawns = 0;
const int lib90F7C81D_ge_LoopType_TCPContainment = 1;
const int lib90F7C81D_ge_LoopType_BossRush = 2;
const int lib90F7C81D_ge_LoopType_Sanies = 3;
const int lib90F7C81D_ge_LoopType_Main = 4;
const int lib90F7C81D_ge_LoopType_T3 = 5;
const int lib90F7C81D_ge_LoopType_T2 = 6;
const int lib90F7C81D_ge_LoopType_T1 = 7;
const int lib90F7C81D_ge_LoopType_Campaign = 8;
const int lib90F7C81D_ge_LoopType_CampaignRA = 9;
string lib90F7C81D_ge_UndeadSpawnLoopEvent_Ident (string lp_val);
string lib90F7C81D_ge_WeaponsItems_Ident (string lp_val);
string lib90F7C81D_ge_GeneralEvent_Ident (string lp_val);
string lib90F7C81D_ge_CampaignMissionEvent_Ident (string lp_val);
string lib90F7C81D_ge_SurvivalTimeEvent_Ident (string lp_val);
string lib90F7C81D_ge_WeaponValue_Ident (int lp_val);
const int lib90F7C81D_ge_LNSlot_Add = 0;
const int lib90F7C81D_ge_LNSlot_Substract = 1;
string lib90F7C81D_ge_Modifier_Ident (int lp_val);
string lib90F7C81D_ge_MOSAchievementIndex_Ident (int lp_val);
string lib90F7C81D_ge_CampaignAchievements_Ident (int lp_val);
const int lib90F7C81D_ge_TextureType_Camo = 0;
const int lib90F7C81D_ge_TextureType_Decal = 1;
const int lib90F7C81D_ge_TextureType_Both = 2;
const int lib90F7C81D_ge_ChatBarAnchor_Move = 0;
const int lib90F7C81D_ge_ChatBarAnchor_Default = 1;
const int lib90F7C81D_ge_ChatBarAnchor_GameOver = 2;
const int lib90F7C81D_ge_OrderType_On = 0;
const int lib90F7C81D_ge_OrderType_Off = 1;
const int lib90F7C81D_ge_OrderType_AutoCastOn = 2;
const int lib90F7C81D_ge_OrderType_AutoCastOff = 3;
const int lib90F7C81D_ge_OrderType_Instant = 4;
const int lib90F7C81D_ge_OrderType_Target = 5;
const int lib90F7C81D_ge_FCTDirection_Left = 0;
const int lib90F7C81D_ge_FCTDirection_Right = 1;
const int lib90F7C81D_ge_FCTDirection_Middle = 2;
const int lib90F7C81D_ge_FCTDirection_Vertical = 3;
const int lib90F7C81D_ge_FCTDirection_Random = 4;
const int lib90F7C81D_ge_ScoreType_Kills = 0;
const int lib90F7C81D_ge_ScoreType_MassiveKills = 1;
const int lib90F7C81D_ge_ScoreType_RevivePoints = 2;
const int lib90F7C81D_ge_ScoreType_Heals = 3;
const int lib90F7C81D_ge_ScoreType_Hits = 4;
const int lib90F7C81D_ge_ScoreType_Deaths = 5;
const int lib90F7C81D_ge_ScoreType_DamageDealt = 6;
const int lib90F7C81D_ge_ScoreType_DamageTaken = 7;
const int lib90F7C81D_ge_ScoreType_PMCKills = 8;
const int lib90F7C81D_ge_ScoreType_Kills_C = 9;
const int lib90F7C81D_ge_ScoreType_MassiveKills_C = 10;
const int lib90F7C81D_ge_ScoreType_RevivePoints_C = 11;
const int lib90F7C81D_ge_ScoreType_Heals_C = 12;
const int lib90F7C81D_ge_ScoreType_Hits_C = 13;
const int lib90F7C81D_ge_ScoreType_Deaths_C = 14;
const int lib90F7C81D_ge_ScoreType_GamesPlayed_C = 15;
const int lib90F7C81D_ge_ScoreType_GameModeWins_C = 16;

// Constants
const int lib90F7C81D_gv_regionMax = 14;
const int lib90F7C81D_gv_c_PINGMAXCOUNT = 3;
const fixed lib90F7C81D_gv_c_PINGRESETTIME = 2.0;
const fixed lib90F7C81D_gv_c_PINGSUPPRESSIONTIME = 0.25;
const fixed lib90F7C81D_gv_c_PINGLOCKOUTTIME = 5.0;

// Structures
struct lib90F7C81D_gs_BankData {
    bank[13] lv_banks;
    bank[13] lv_aCHBank;
    int[13] lv_xP;
    int[25][13] lv_mOSXP;
    int[13] lv_totalKills;
    int[13] lv_totalMassiveKills;
    int[13] lv_totalRevivePoints;
    int[13] lv_totalHeals;
    int[13] lv_totalHits;
    int[13] lv_totalDeaths;
    int[11][13] lv_gamesWon;
    int[13] lv_gamesPlayed;
    bool[131][13] lv_achievementsUnlocked;
    bool[53][13] lv_camosUnlocked;
    bool[51][13] lv_decalsUnlocked;
    int[13] lv_camoSelected;
    int[13] lv_decalSelected;
    bool lv_bankValidationEnabled;
    bool[13] lv_regionAccountValidated;
    string lv_key1;
    string lv_key2;
};

struct lib90F7C81D_gs_Weather {
    int lv_actorListTypeIndex;
    actor[11][8193] lv_actorList;
    int lv_actorListIndex;
    int lv_fogChance;
    int lv_randomWeatherChance;
    int lv_thunderstormChance;
    int lv_rainstormChance;
    int lv_snowChance;
    int lv_cloudyChance;
    int lv_tornadoesChance;
    int lv_intenseSunlightChance;
    int lv_intenseMoonlightChance;
    bool lv_fogEvent;
    bool lv_thunderstormEvent;
    bool lv_rainstormEvent;
    bool lv_snowEvent;
    bool lv_cloudyEvent;
    bool lv_tornadoesEvent;
    bool lv_intenseSunlightEvent;
    bool lv_bloodMoonEvent;
    bool lv_weatherEventOn;
    bool lv_weatherQueue;
    bool lv_clearEvent;
    bool lv_weatherSwitch;
    bool lv_nightTime;
    int lv_weatherFrame;
};

struct lib90F7C81D_gs_PMC {
    int lv_totalWeight;
    int lv_maxUnitType;
    bool lv_idleAttackOrder;
};

struct lib90F7C81D_gs_PathDisplay {
    unit[lib90F7C81D_gv_regionMax + 1] lv_rUnit;
    int[lib90F7C81D_gv_regionMax + 1] lv_rPath;
    int lv_rCur;
    unit[2] lv_cUnit;
    int[2] lv_cPath;
};

struct lib90F7C81D_gs_UndeadSpawningTimers {
    fixed lv_spawnLoopPlagueSpawns;
    fixed lv_spawnLoopMain;
    fixed lv_spawnLoopT3;
    fixed lv_spawnLoopT2;
    fixed lv_spawnLoopT1;
    fixed lv_spawnLoopSanies;
    fixed lv_spawnLoopBossRush;
    fixed lv_spawnLoopTCPContainment;
    fixed lv_spawnLoopCampaign;
    fixed lv_spawnLoopCampaignRASpawns;
};

struct lib90F7C81D_gs_WeaponsItemsTimer {
    fixed lv_weaponsItemsTime_1;
    fixed lv_weaponsItemsTime_2;
};

struct lib90F7C81D_gs_AllowWeapon {
    bool lv_rifles;
    bool lv_automatics;
    bool lv_shotguns;
    bool lv_plasmas;
    bool lv_sniper;
    bool lv_dMR;
    bool lv_flamethrowers;
    bool lv_minigun;
};

struct lib90F7C81D_gs_Armor {
    int lv_count;
};

struct lib90F7C81D_gs_SFAAT {
    point lv_spawnRallyPoint;
    point lv_rallyPoint;
    unitgroup lv_police;
    unitgroup lv_localNationals;
    int lv_totalWeight;
    int lv_lNMax;
    int[4] lv_lNButtons;
    unit[3] lv_lNUnit;
};

struct lib90F7C81D_gs_CombatEngineer {
    bool lv_scrapEngineerBayRespawning;
    bool lv_scrapRandomRespawning;
    fixed lv_scrapRandomDelay;
    fixed lv_scrapEngineerBayDelay;
    unit lv_scrapRandom;
    unit lv_scrapEngineerBay;
    int lv_securityCharge;
};

struct lib90F7C81D_gs_WeeklyModifier {
    int lv_frame;
    int lv_modifier;
    datetime lv_date_Time;
    int lv_mode;
    int[3] lv_icons;
    bool lv_enabled;
    bool lv_race_Against_Time;
    bool lv_random_Weather_Disable;
    bool lv_going_Dark_Enabled;
    bool lv_tier1;
    fixed lv_tier1_Timer;
};

struct lib90F7C81D_gs_AchievementPanel {
    int lv_skinsPanel;
    int[22][13] lv_modelPanel;
    int[13] lv_decalIndex;
    int[13] lv_camoIndex;
    int lv_pulldownCamo;
    int lv_pulldownDecal;
    int lv_camoLabel;
    int lv_decalLabel;
    int[13] lv_modelIndex;
    int[66] lv_decalList;
    int[66] lv_camoList;
    int[13] lv_prestigeLevel;
    int[13] lv_winBonusStreak;
    bool lv_achievementsDisabled;
    int[21][14] lv_mOSAchievements;
    int[21][14] lv_mOSAchievementsIcon;
    int[21][14] lv_mOSAchievementsName;
    int[21][14] lv_mOSAchievementsDescription;
    int[21][14] lv_mOSAchievementsEarned;
    int[21][14] lv_mOSAchievementsCurP;
    int[21][14] lv_mOSAchievementsMaxP;
    int[10][60] lv_modeAchievements;
    int[10][60] lv_modeAchievementsIcon;
    int[10][60] lv_modeAchievementsName;
    int[10][60] lv_modeAchievementsDescription;
    int[10][60] lv_modeAchievementsEarned;
    int[10][60] lv_modeAchievementsCurP;
    int[10][60] lv_modeAchievementsMaxP;
    int[18] lv_medal;
};

struct lib90F7C81D_gs_AchievementBadge {
    int lv_flashFrame;
    int lv_iconImage;
    int lv_nameLabel;
    int lv_descriptionLabel;
    int lv_earnedLabel;
    bool[13] lv_queue;
};

struct lib90F7C81D_gs_MOSAchievements {
    int[13] lv_rifleman_CF;
    bool[14][13] lv_rifleman_JOAT;
    int[13] lv_combatMedic_CM;
    int[13] lv_aR_SU;
    int[13] lv_cS_Bandolier;
    bool[8][13] lv_jV_Rocketeer;
    fixed[13] lv_sDM_Supersoldier_Curr;
    fixed[13] lv_sDM_Supersoldier_Prev;
    int[13] lv_pL_Grenadier;
    int[13] lv_pL_Aura_Levels;
    int[6][13] lv_pL_Combat_Orders;
    fixed[13] lv_plasmaShield;
    bool[13] lv_playerCS;
    bool[13] lv_playerFL;
    bool[13] lv_playerJV;
    int lv_plasmaShieldDisplay;
    int[6][13] lv_constructCount;
    int[6] lv_assembleTooltip;
    int[6] lv_combatOrdersTooltip;
    bool[13] lv_sFAATLNRecruited;
    int[6][13] lv_sFAATLNCount;
    int[6] lv_sFAATLNTooltip;
    fixed[13] lv_cyborgLifeCur;
    bool[13] lv_cyborgModeUsed;
    bool[13] lv_ghostHeatSignature;
    bool[2][13] lv_ghostFindersKeepers;
    int[54][13] lv_mOSAchievement;
};

struct lib90F7C81D_gs_CareerMisc {
    int[13] lv_pwned;
};

struct lib90F7C81D_gs_MOSTexture {
    string[13] lv_camo;
    string[13] lv_decal;
    string[13] lv_rankInsignia;
    string[13] lv_material;
};

struct lib90F7C81D_gs_Gameplay {
    int[7] lv_option;
    bool[13] lv_cameraShake;
    bool[13] lv_tacticalSprint;
    bool[13] lv_vitalsLabel;
    string[13] lv_submenuHotkey;
    bool[13] lv_segmentedBar;
    int lv_gameUI;
};

struct lib90F7C81D_gs_AmmoBar {
    int lv_roundsLabel;
    int lv_magazineLabel;
    int lv_reloadSpeedLabel;
    bool[13] lv_encumberedMessage;
};

struct lib90F7C81D_gs_Cutscene {
    int lv_stasisWeb;
};

struct lib90F7C81D_gs_CommandCard {
    int lv_commandCardPanel;
    int[13] lv_selfCastCC;
    unit[13] lv_selfCastUnit;
    int[13] lv_selfCastFrame;
    fixed[13] lv_xCoord;
    fixed[13] lv_yCoord;
    int lv_aCH;
    bool[13] lv_classicCard;
    unitgroup[13] lv_cCGroup;
    int lv_uiIndex;
    int lv_unitIndexLabel;
};

struct lib90F7C81D_gs_Fireteams {
    int lv_alphaButton;
    int lv_deltaButton;
    int lv_echoButton;
    int[4] lv_alphaSlot;
    int[4] lv_deltaSlot;
    int[4] lv_echoSlot;
    playergroup lv_alpha;
    playergroup lv_delta;
    playergroup lv_echo;
    int[4] lv_alphaMembers;
    int[4] lv_deltaMembers;
    int[4] lv_echoMembers;
    bool lv_alphaQueded;
    bool lv_deltaQueded;
    bool lv_echoQueded;
    bool[13] lv_fireteamMember;
};

struct lib90F7C81D_gs_Graph {
    int lv_frame;
    int lv_interval;
};

struct lib90F7C81D_gs_FPS {
    int lv_editBox;
    int[13] lv_framerateLabel;
    fixed lv_framerateInterval;
    int lv_fPSToggled;
};

struct lib90F7C81D_gs_Inventory {
    int[13] lv_inventorySlotMax;
    int lv_inventoryButton;
    int lv_inventoryType;
    int[6] lv_bandolierSlots;
    int[13] lv_playerInventory;
    int lv_hotkey_panel;
    int lv_item_eb;
    unitgroup[13] lv_hotkey_group;
    unit[13] lv_hotkey_unit;
};

struct lib90F7C81D_gs_MessageType {
    int lv_directive;
    int lv_objective;
    int lv_debug;
};

struct lib90F7C81D_gs_Movie_Player {
    int lv_movie_Frame;
    int lv_movie_Player;
    bool lv_movie_Playing;
};

struct lib90F7C81D_gs_Spinner {
    int[4] lv_label;
    int lv_frame;
};

struct lib90F7C81D_gs_TimeOfDay {
    int lv_timeOfDayLabel;
    string lv_currentLighting;
    fixed lv_durationTime;
    bool lv_allowNODs;
};

struct lib90F7C81D_gs_TipPanel {
    int lv_tipDragPanel;
    int lv_tipPanel;
    int lv_tipCurrent;
    int[13] lv_tipNumber;
    int lv_nextButton;
    int lv_previousButton;
    int lv_tipEditBox;
    string[13] lv_tipLoc;
};

struct lib90F7C81D_gs_HeroPanel {
    int lv_editBox;
    int[13] lv_speedCurrent;
    int[13] lv_unitTags;
    bool[13] lv_iDSet;
    int lv_count;
};

struct lib90F7C81D_gs_STATS {
    int lv_hUDButton;
    int lv_hUDKillButton;
    int lv_hUD;
    int[13] lv_hUD_Player_Frame;
    int[13] lv_hUD_Player_Frame_Image;
    int[13] lv_hUD_Player_Frame_Border;
    int[13] lv_hUD_Player_Frame_MOS_Label;
    int[13] lv_hUD_Player_Frame_Name_Label;
    int[13] lv_hUD_Player_Frame_Kills;
    int[13] lv_hUD_Player_Frame_Hits;
    int[13] lv_hUD_Player_Frame_Deaths;
    int[13] lv_hUD_Player_Frame_Damage_Dealt;
    int[13] lv_hUD_Player_Frame_Damage_Taken;
    int[13] lv_hUD_Player_Frame_Revive_Points;
    int[13] lv_hUD_Player_Frame_Movement_Speed;
    int[13] lv_hUD_Player_Frame_Magazines;
    int[13] lv_hUD_Player_Frame_RoundsUsed;
    int[13] lv_hUD_Player_Frame_Status;
    int[13] lv_hUD_Player_Frame_MOSStatus;
    int[13] lv_hUD_Player_Frame_MKills;
    int[13] lv_hUD_Player_Frame_Heals;
    int[13] lv_hUD_Player_Frame_Timer;
    int[13] lv_hUD_Player_Frame_PMC_Label;
    int[13] lv_hits;
    int[13] lv_kills;
    int[13] lv_massiveKills;
    int[13] lv_revivePoints;
    int[13] lv_deaths;
    int[13] lv_heals;
    int[13] lv_damageTaken;
    int[13] lv_damageDealt;
    int lv_lNDamage;
    int[13] lv_roundsUsed;
    int[13] lv_tempKills;
    int[13] lv_tempMKills;
    int[13] lv_tempHeals;
    int[13] lv_tempRoundsUsed;
    int[13] lv_pMC_Kills;
};

struct lib90F7C81D_gs_VoteKick {
    int lv_editBox;
    int lv_voteKickFrame;
    int lv_voteMenuFrame;
    int lv_voteMenuTitle;
    int lv_yesButton;
    int lv_noButton;
    int lv_voteYes;
    int lv_voteNo;
    bool[13] lv_playerVotedYes;
    bool[13] lv_playerVotedNo;
    int lv_voteTimeRemaining;
    bool lv_voteKickInProgress;
    int lv_vKB;
    int lv_yesLabel;
    int lv_noLabel;
    int lv_voteTimer;
    int[13] lv_voteKickLimit;
    bool[13] lv_voteKickCooldown;
    fixed[13] lv_cooldown;
    int[13] lv_teamKills;
};

// Variable Declarations
unit[13] lib90F7C81D_gv_heroSelectors;
unitgroup lib90F7C81D_gv_heroSelectorGroup;
bool lib90F7C81D_gv_gameOver;
bool lib90F7C81D_gv_gameOverOverride;
unit[13] lib90F7C81D_gv_playerHeroes;
unitgroup lib90F7C81D_gv_heroesGroup;
unitgroup lib90F7C81D_gv_undeadGroup;
unitgroup lib90F7C81D_gv_rAGroup;
unitgroup lib90F7C81D_gv_undeadTargetGroup;
playergroup lib90F7C81D_gv_players;
region[3] lib90F7C81D_gv_lZs;
bool[13] lib90F7C81D_gv_playerLeftGame;
unit lib90F7C81D_gv_lastlandedphantom;
unit[13] lib90F7C81D_gv_deadHeroIndicator;
bool[13] lib90F7C81D_gv_playersHeroisDead;
unitgroup[13] lib90F7C81D_gv_heroskilledbyplayer;
int lib90F7C81D_gv_teamDeathTotal;
bool[13] lib90F7C81D_gv_playerRevivedPlayer;
int lib90F7C81D_gv_mainObj;
int lib90F7C81D_gv_secondObj;
int lib90F7C81D_gv_thirdObj;
int lib90F7C81D_gv_fourthObj;
int lib90F7C81D_gv_optionalObj;
unitgroup lib90F7C81D_gv_simpleMissionItems;
int lib90F7C81D_gv_averageXP;
int lib90F7C81D_gv_xPGained;
timer lib90F7C81D_gv_missiontimer;
int lib90F7C81D_gv_missiontimerwindow;
timer lib90F7C81D_gv_missiontimer2;
int lib90F7C81D_gv_missiontimerwindow2;
bool lib90F7C81D_gv_pauseSpawning;
int[13] lib90F7C81D_gv_magsize;
int[13] lib90F7C81D_gv_magsused;
fixed[13] lib90F7C81D_gv_reloadbasetime;
string[13] lib90F7C81D_gv_playerHeroImage;
int[13] lib90F7C81D_gv_playerEncumberance;
unitgroup[13] lib90F7C81D_gv_playerdroppedammo;
int[13] lib90F7C81D_gv_playerUserIndex;
lib90F7C81D_gs_BankData lib90F7C81D_gv_bankData;
int[7][13] lib90F7C81D_gv_iIIIIIlllllll;
lib90F7C81D_gs_Weather lib90F7C81D_gv_weather;
int lib90F7C81D_gv_weatherEvent;
lib90F7C81D_gs_PMC lib90F7C81D_gv_pMC;
lib90F7C81D_gs_PathDisplay lib90F7C81D_gv_pathDisplay;
bool lib90F7C81D_gv_victory;
int lib90F7C81D_gv_gamemode;
lib90F7C81D_gs_UndeadSpawningTimers lib90F7C81D_gv_undeadSpawningTimers;
lib90F7C81D_gs_WeaponsItemsTimer lib90F7C81D_gv_weaponsItemsTimer;
int lib90F7C81D_gv_bossRushWaveDisplay;
int lib90F7C81D_gv_bossRushWaveLabel;
fixed[13] lib90F7C81D_gv_stockWeaponRounds;
lib90F7C81D_gs_AllowWeapon lib90F7C81D_gv_allowWeapon;
lib90F7C81D_gs_Armor lib90F7C81D_gv_armor;
bool lib90F7C81D_gv_levelActorOn;
lib90F7C81D_gs_SFAAT lib90F7C81D_gv_sFAAT;
lib90F7C81D_gs_CombatEngineer lib90F7C81D_gv_combatEngineer;
unitgroup lib90F7C81D_gv_minimapPingIndex;
unitgroup lib90F7C81D_gv_missionItemPingItems;
lib90F7C81D_gs_WeeklyModifier lib90F7C81D_gv_weeklyModifier;
lib90F7C81D_gs_AchievementPanel lib90F7C81D_gv_achievementPanel;
lib90F7C81D_gs_AchievementBadge lib90F7C81D_gv_achievementBadge;
lib90F7C81D_gs_MOSAchievements lib90F7C81D_gv_mOSAchievements;
lib90F7C81D_gs_CareerMisc lib90F7C81D_gv_careerMisc;
lib90F7C81D_gs_MOSTexture lib90F7C81D_gv_mOSTexture;
int lib90F7C81D_gv_editBox;
lib90F7C81D_gs_Gameplay lib90F7C81D_gv_gameplay;
lib90F7C81D_gs_AmmoBar lib90F7C81D_gv_ammoBar;
string[13] lib90F7C81D_gv_veterancyType;
lib90F7C81D_gs_Cutscene lib90F7C81D_gv_cutscene;
int lib90F7C81D_gv_bossBar;
int lib90F7C81D_gv_bossBarTitle;
int lib90F7C81D_gv_bsod;
int lib90F7C81D_gv_cameraButton;
int lib90F7C81D_gv_chatBarAnchor;
lib90F7C81D_gs_CommandCard lib90F7C81D_gv_commandCard;
int lib90F7C81D_gv_sU_Container;
int lib90F7C81D_gv_lS_Container;
int lib90F7C81D_gv_dC_Container;
int lib90F7C81D_gv_sD_Container;
int lib90F7C81D_gv_backgroundMain;
int lib90F7C81D_gv_learnSkillsButton;
int lib90F7C81D_gv_skillUpgradesButton;
int[13] lib90F7C81D_gv_learnSkillsLabel;
int[13] lib90F7C81D_gv_skillUpgradesLabel;
lib90F7C81D_gs_Fireteams lib90F7C81D_gv_fireteam;
lib90F7C81D_gs_Graph lib90F7C81D_gv_graph;
lib90F7C81D_gs_FPS lib90F7C81D_gv_fPS;
lib90F7C81D_gs_Inventory lib90F7C81D_gv_inventory;
lib90F7C81D_gs_MessageType lib90F7C81D_gv_messageFrame;
lib90F7C81D_gs_Movie_Player lib90F7C81D_gv_movie_Player;
int lib90F7C81D_gv_minimap;
int lib90F7C81D_gv_pingDeadHeros;
int lib90F7C81D_gv_deadHeroLabel;
bool[13] lib90F7C81D_gv_pingDeadHeroLock;
int lib90F7C81D_gv_uI_DeadHeroCount;
int lib90F7C81D_gv_NewPlayerDeath;
fixed lib90F7C81D_gv_infestation;
int lib90F7C81D_gv_infestationPanel;
int lib90F7C81D_gv_infestationLevel;
int lib90F7C81D_gv_mutationPanel;
int lib90F7C81D_gv_mutationLabel;
fixed lib90F7C81D_gv_supplyMax;
timer[17] lib90F7C81D_gv_pingResetTimer;
timer[17] lib90F7C81D_gv_pingSuppressionTimer;
timer[17] lib90F7C81D_gv_pingLockoutTimer;
int[17] lib90F7C81D_gv_pingRecentCount;
playergroup lib90F7C81D_gv_pingValidPlayers;
int lib90F7C81D_gv_pingPanelMinimapButton;
int[13] lib90F7C81D_gv_upgrade;
int lib90F7C81D_gv_uIicon;
int lib90F7C81D_gv_visorTextDialog;
int[13] lib90F7C81D_gv_visorText;
timer[13] lib90F7C81D_gv_visorTextTimer;
lib90F7C81D_gs_Spinner lib90F7C81D_gv_spinner;
lib90F7C81D_gs_TimeOfDay lib90F7C81D_gv_timeOfDay;
lib90F7C81D_gs_TipPanel lib90F7C81D_gv_tipPanel;
lib90F7C81D_gs_HeroPanel lib90F7C81D_gv_heroPanel;
playergroup lib90F7C81D_gv_scoreScreenPlayers;
int lib90F7C81D_gv_quitButton;
bool[13] lib90F7C81D_gv_savingAllowed;
bool[17][13] lib90F7C81D_gv_highScore;
bool[17][13] lib90F7C81D_gv_lowScore;
int lib90F7C81D_gv_gameMode_C;
int[13] lib90F7C81D_gv_gameMode_Int;
int[13] lib90F7C81D_gv_careerWins_PB;
int lib90F7C81D_gv_gameMode_Img;
lib90F7C81D_gs_STATS lib90F7C81D_gv_sTATS;
int lib90F7C81D_gv_sDFrame;
int[13] lib90F7C81D_gv_sDPlayerFrame;
int[13] lib90F7C81D_gv_sDPingPlayerButton;
bool[7][13] lib90F7C81D_gv_sDAilmentSlotEnabled;
int[13] lib90F7C81D_gv_sDPlayerImageFrame;
int[13] lib90F7C81D_gv_sDPlayerFrameBorder;
int[13] lib90F7C81D_gv_sDPlayerNameFrame;
int[13] lib90F7C81D_gv_sDPlayerUnitStatusFrame;
int[7][13] lib90F7C81D_gv_sDPlayerAilmentImages;
string[33][13] lib90F7C81D_gv_sDPlayerBehaviorCount;
text[7][13] lib90F7C81D_gv_sDAilmentTooltip;
string[7][13] lib90F7C81D_gv_sDAilmentImage;
string[7][13] lib90F7C81D_gv_sDAilment;
bool[13] lib90F7C81D_gv_sDQueue;
int[13] lib90F7C81D_gv_sDTimer;
int[8][13] lib90F7C81D_gv_sDPlayerInventorySlot;
int[13] lib90F7C81D_gv_revive_Bar;
int[13] lib90F7C81D_gv_reviveCountdown;
int[13] lib90F7C81D_gv_revive_Counter_Label;
int[13] lib90F7C81D_gv_reviveCountdown_Label;
int[13] lib90F7C81D_gv_revivePenalty;
lib90F7C81D_gs_VoteKick lib90F7C81D_gv_voteKick;

// Function Declarations
void lib90F7C81D_gf_WeatherEvent (trigger t, string lp_event);
void lib90F7C81D_gf_RunWeatherEvent (string lp_event);
void lib90F7C81D_gf_BlendFog (fixed lp_colorR, fixed lp_colorG, fixed lp_colorB, fixed lp_density, fixed lp_falloff, fixed lp_start, fixed lp_blendtime);
void lib90F7C81D_gf_BlendWeather (fixed lp_r, fixed lp_g, fixed lp_b, string lp_weatherActor, fixed lp_spacing, region lp_region, fixed lp_variance);
void lib90F7C81D_gf_UnblendWeather ();
void lib90F7C81D_gf_ResetWeatherIcon ();
bool lib90F7C81D_gf_WeatherType ();
void lib90F7C81D_gf_DebugWeatherEvent (string lp_weatherType);
string lib90F7C81D_gf_RandomPMC ();
void lib90F7C81D_gf_UpdatePMCPool (int lp_index, int lp_slot);
void lib90F7C81D_gf_ResetPMCPool ();
void lib90F7C81D_gf_PMCDifficulty ();
bool lib90F7C81D_gf_DevHandles (string lp_handle);
void lib90F7C81D_gf_MissionText (text lp_text);
void lib90F7C81D_gf_SendMissionDialogue (text lp_talker, text lp_text);
void lib90F7C81D_gf_TextChat (unit lp_unit, text lp_text);
void lib90F7C81D_gf_AIScatterFromPoint (point lp_point, fixed lp_radius);
void lib90F7C81D_gf_SetTTFadeandDuration (int lp_tag, fixed lp_duration);
void lib90F7C81D_gf_LandPhantom (point lp_lZ);
void lib90F7C81D_gf_TakeoffPhantom ();
void lib90F7C81D_gf_FloatingTextforPlayer (unit lp_unit, text lp_text, int lp_player);
void lib90F7C81D_gf_DebugTextMessageInteger (playergroup lp_players, int lp_messageArea, int lp_message);
void lib90F7C81D_gf_DebugTextMessageReal (playergroup lp_players, int lp_messageArea, fixed lp_message);
void lib90F7C81D_gf_DebugTextMessageString (playergroup lp_players, int lp_messageArea, string lp_message);
text lib90F7C81D_gf_TextImage (string lp_imgpath, int lp_scale);
bool lib90F7C81D_gf_UnitCanSprint (unit lp_unit);
fixed lib90F7C81D_gf_MathNumberWrap (fixed lp_value, fixed lp_minAmount, fixed lp_maxAmount);
string lib90F7C81D_gf_IIF (bool lp_condition, string lp_iF, string lp_eLSE);
fixed lib90F7C81D_gf_Lerp (fixed lp_valueZero, fixed lp_valueOne, fixed lp_amount);
void lib90F7C81D_gf_DrawRegion (string lp_region, color lp_color);
void lib90F7C81D_gf_DrawRegionRemoveAll ();
void lib90F7C81D_gf_DrawRegionRemoveIndex (int lp_index);
void lib90F7C81D_gf_DrawRegionEllipse (region lp_region, color lp_color);
void lib90F7C81D_gf_DrawRegionRectangle (region lp_region, color lp_color);
void lib90F7C81D_gf_InitConvoyPathDisplay (point lp_startPoint, point lp_destinationPoint, int lp_path, bool lp_state);
void lib90F7C81D_gf_AddConvoyPathPoint (point lp_point, int lp_path);
void lib90F7C81D_gf_ShowHidePathConvoy (bool lp_state, int lp_path);
void lib90F7C81D_gf_RemoveConvoyPathDisplay ();
text lib90F7C81D_gf_GetModeText (string lp_instance);
fixed lib90F7C81D_gf_GetModeXP (string lp_instance);
void lib90F7C81D_gf_GameVictory ();
void lib90F7C81D_gf_GamesPlayedUpdate ();
int lib90F7C81D_gf_DifficultyIndex (int lp_difficulty);
int lib90F7C81D_gf_DifficultyFromIndex (int lp_index);
string lib90F7C81D_gf_SendGameModeEvent ();
int lib90F7C81D_gf_GameMode ();
bool lib90F7C81D_gf_DifficultyisLOE (int lp_difficulty);
bool lib90F7C81D_gf_DifficultyisGOE (int lp_difficulty);
bool lib90F7C81D_gf_DifficultyisBetweenBounds (int lp_difficulty, int lp_difficulty1);
bool lib90F7C81D_gf_CompareDifficulty (int lp_difficulty, int lp_difficulty1, int lp_difficulty2);
int lib90F7C81D_gf_GetSkillLevel ();
void lib90F7C81D_gf_StartGameMode (trigger t, string lp_gameMode);
void lib90F7C81D_gf_StartCampaign (trigger t);
void lib90F7C81D_gf_DifficultyCampaignSettings ();
void lib90F7C81D_gf_SetDifficulty (int lp_difficulty);
void lib90F7C81D_gf_RunGameMode ();
bool lib90F7C81D_gf_GetGameMode (int lp_mode);
void lib90F7C81D_gf_UndeadSpawnEvent (trigger t, string lp_event);
void lib90F7C81D_gf_RunUndeadSpawnLoopEvent (string lp_event);
void lib90F7C81D_gf_SetSpawnLoopTimer (int lp_spawnLoop, fixed lp_time);
void lib90F7C81D_gf_WeaponsItemsEvent (trigger t, string lp_event);
void lib90F7C81D_gf_RunWeaponsItemsEvent (string lp_event);
void lib90F7C81D_gf_ModifyWeaponsItemsLoop (string lp_loop, fixed lp_time, int lp_operation);
void lib90F7C81D_gf_TurnWeaponsItemsOnOff (string lp_loop, bool lp_option);
void lib90F7C81D_gf_GameEvent (trigger t, string lp_event);
void lib90F7C81D_gf_RunEvent (string lp_event);
void lib90F7C81D_gf_CampaignEvent (trigger t, string lp_event);
void lib90F7C81D_gf_RunCampaignEvent (string lp_event);
void lib90F7C81D_gf_SurvivalEvent (trigger t, string lp_event);
void lib90F7C81D_gf_RunSurvivalEvent (string lp_event);
void lib90F7C81D_gf_GenericEventCombatDamage (unit lp_casterUnit, unit lp_targetUnit, string lp_eventEffect);
void lib90F7C81D_gf_GenericEventCombatCriticalHit (unit lp_casterUnit, unit lp_targetUnit, string lp_eventEffect);
void lib90F7C81D_gf_GenericEventCombatUnitLeavesRegion (unit lp_triggeringUnit, region lp_triggeringRegion);
void lib90F7C81D_gf_GenericEventPlayerUsesDialogItem (int lp_player, int lp_dialogItem, string lp_genericEvent);
void lib90F7C81D_gf_GenericEventBackupPlayerBank (int lp_player, string lp_genericEvent);
void lib90F7C81D_gf_GenericEventBossRushWaveDisplay (int lp_waveNumber, int lp_maxWave, int lp_waveInstanceID, string lp_genericEvent);
void lib90F7C81D_gf_RegisterMOSToEvents (unit lp_mOS);
void lib90F7C81D_gf_RegisterMOSToWeaponsCache (trigger lp_weaponCacheTrig, unit lp_mOS);
void lib90F7C81D_gf_CombatCriticalHit (trigger t);
void lib90F7C81D_gf_CombatDamage (trigger t);
void lib90F7C81D_gf_CombatUnitLeavesRegion (trigger t);
void lib90F7C81D_gf_BossRushWaveDisplay (trigger t);
string lib90F7C81D_gf_PresetGenericEvent (string lp_genericEvent);
string lib90F7C81D_gf_PresetGenericEventParameter (string lp_genericEvent, string lp_genericEventParameter);
int lib90F7C81D_gf_GetWeaponPreset (unit lp_item);
text lib90F7C81D_gf_GetWeaponTooltipIcons (string lp_weapon);
void lib90F7C81D_gf_StoreWeaponIndex (unit lp_weapon);
void lib90F7C81D_gf_EnableWeapon (int lp_index);
int lib90F7C81D_gf_GetDataTableArmorIndex (unit lp_armor);
void lib90F7C81D_gf_StoreArmorStats (fixed lp_shieldsRemaining, unit lp_unit, bool lp_removeArmor);
void lib90F7C81D_gf_StoreArmorIndex (unit lp_armor);
void lib90F7C81D_gf_DropArmor (unit lp_dropper, fixed lp_spread);
void lib90F7C81D_gf_SpawnItem (string lp_item, int lp_chance);
void lib90F7C81D_gf_SpawnItemNEW (string lp_item, int lp_chance, int lp_weightMax, int lp_minimumAmount, int lp_maximumAmount);
void lib90F7C81D_gf_SpawnItemAtLocation (string lp_item, int lp_chance, point lp_point);
void lib90F7C81D_gf_SpawnItemAtLocationNEW (string lp_item, int lp_chance, point lp_point, int lp_weightMax, int lp_minimumAmount, int lp_maximumAmount);
void lib90F7C81D_gf_AirDropItemToRegion (string lp_item, region lp_region, int lp_chance);
void lib90F7C81D_gf_AirDropItemToRegionNEW (string lp_item, region lp_region, int lp_chance, int lp_weightMax, int lp_minimumAmount, int lp_maximumAmount);
void lib90F7C81D_gf_AirDropItemToLocation (string lp_item, point lp_point, int lp_chance);
void lib90F7C81D_gf_AirDropItemToLocationNEW (string lp_item, point lp_point, int lp_chance, int lp_weightMax, int lp_minimumAmount, int lp_maximumAmount);
unit lib90F7C81D_gf_GetItemType (string lp_itemtype, unit lp_unit);
bool lib90F7C81D_gf_UnitHasItem (string lp_itemtype, unit lp_unit);
int lib90F7C81D_gf_ItemCount (string lp_itemtype, unit lp_unit);
int lib90F7C81D_gf_ItemCountChargesAreGOE (string lp_itemtype, unit lp_unit, string lp_chargestring);
fixed lib90F7C81D_gf_ItemChargesRemaining (unit lp_item, string lp_chargestring, fixed lp_maxcharges);
void lib90F7C81D_gf_DropAllItems (unit lp_dropper, fixed lp_spread);
void lib90F7C81D_gf_DropItem (unit lp_dropper, string lp_item, fixed lp_spread);
fixed lib90F7C81D_gf_NegativeReal (fixed lp_real);
unit lib90F7C81D_gf_FirstAmmoUsed (unit lp_unit);
unit lib90F7C81D_gf_FirstAmmoCaseUsed (unit lp_unit);
unit lib90F7C81D_gf_FirstMGLUsed (unit lp_unit);
unit lib90F7C81D_gf_FirstMRLUsed (unit lp_unit);
unit lib90F7C81D_gf_FirstSMLUsed (unit lp_unit);
unit lib90F7C81D_gf_SameItemTypeUsed (unit lp_host, unit lp_firstitem, string lp_chargestring);
int lib90F7C81D_gf_GetItemListIndex (unit lp_item);
bool lib90F7C81D_gf_UnitHasEmptyInventorySlot (unit lp_unit);
void lib90F7C81D_gf_RemoveItemIfChargesAreExausted (unit lp_unit, string lp_chargestring, fixed lp_maxcharges);
void lib90F7C81D_gf_CombineItems (unit lp_receiver, unit lp_donator, string lp_chargestring, fixed lp_maxcharges);
void lib90F7C81D_gf_DonateItems (unit lp_receiver, unit lp_donator, string lp_chargestring, fixed lp_maxchargesdonator);
void lib90F7C81D_gf_UpdateItemTextChargeDisplay (unit lp_item);
void lib90F7C81D_gf_RemoveAilmentsFromHero (int lp_player);
void lib90F7C81D_gf_LNRemoveCombatInexperience ();
string lib90F7C81D_gf_RandomLN ();
void lib90F7C81D_gf_UpdateLNPool (int lp_index, int lp_slot);
void lib90F7C81D_gf_PingBeaconAdd (string lp_beaconEffect, point lp_location, int lp_player);
void lib90F7C81D_gf_RefreshAirSupportCharges ();
int lib90F7C81D_gf_ReturnPlatoonLeaderIndex ();
void lib90F7C81D_gf_SpawnScrapEngineerBay ();
void lib90F7C81D_gf_SpawnScrapRandom ();
void lib90F7C81D_gf_StoreMinimapPings (unit lp_unit, text lp_pingTooltip, color lp_pingColor, fixed lp_pingScale);
void lib90F7C81D_gf_RemoveMinimapPingIndex (unit lp_unit);
void lib90F7C81D_gf_MissionItemPingEnable (bool lp_onOff);
void lib90F7C81D_gf_MissionItemPingAddItem (unit lp_item);
void lib90F7C81D_gf_MissionItemPingRemoveItem (unit lp_item);
void lib90F7C81D_gf_MissionItemCarried (unit lp_item, int lp_player);
void lib90F7C81D_gf_MissionItemDropped (int lp_player, unit lp_item);
void lib90F7C81D_gf_ModifierEvent (trigger t, int lp_modifier);
int lib90F7C81D_gf_GetModifier ();
void lib90F7C81D_gf_ModifierReward (int lp_mutation);
void lib90F7C81D_gf_ModifierCompleted (int lp_player);
void lib90F7C81D_gf_StartModifierChallenge ();
void lib90F7C81D_gf_DebugModifier (int lp_modifier);
text lib90F7C81D_gf_DebugModifierType ();
void lib90F7C81D_gf_SetupSkinPanel (int lp_player);
void lib90F7C81D_gf_SetupModeAchievementsPanel (int lp_player);
void lib90F7C81D_gf_GetGameWins (int lp_player, int lp_previousWins, bool lp_flashAchievementBadge);
bool lib90F7C81D_gf_ReturnWin (int lp_player);
void lib90F7C81D_gf_SetupRankAchievements (int lp_achievementIndex, int lp_player);
void lib90F7C81D_gf_SetupMOSAchievementLevelBadges (int lp_mOS, int lp_achievementIndex, int lp_player);
void lib90F7C81D_gf_FlashAchievementBadge (string lp_achievementBadge, int lp_player);
int lib90F7C81D_gf_RiflemanSUIndex (abilcmd lp_ability);
void lib90F7C81D_gf_NoOneLeftBehind (int lp_player);
int lib90F7C81D_gf_TwoOfAKindIndex (string lp_lN);
text lib90F7C81D_gf_TwoOfAKindCount (int lp_index, int lp_player);
int lib90F7C81D_gf_JavelinGunnerSUIndex (abilcmd lp_ability);
int lib90F7C81D_gf_CombatOrdersBuff (string lp_behavior);
text lib90F7C81D_gf_CombatOrdersCount (int lp_index, int lp_player);
text lib90F7C81D_gf_ConstructCount (int lp_index, int lp_player);
void lib90F7C81D_gf_RegisterMosAchievements (unit lp_mos, int lp_player);
void lib90F7C81D_gf_SaveMOSAchievementStats (int lp_player, bank lp_bank);
void lib90F7C81D_gf_LoadMOSAchievementStats (int lp_player, bank lp_bank);
void lib90F7C81D_gf_TurnOffAchievements ();
void lib90F7C81D_gf_AwardAchievement (int lp_achievement);
void lib90F7C81D_gf_CampaignWins ();
void lib90F7C81D_gf_FlashCampaignWinACH (int lp_difficulty, int lp_player);
text lib90F7C81D_gf_DifficultyText (int lp_difficulty);
string lib90F7C81D_gf_DifficultyImage (int lp_difficulty);
int lib90F7C81D_gf_DifficultyWinAmount (int lp_difficulty, int lp_player);
void lib90F7C81D_gf_UpdateMOSTextureFromIndex (string lp_userType, int lp_preset, int lp_player);
void lib90F7C81D_gf_AddMaterial (string lp_camo, int lp_player);
int lib90F7C81D_gf_Type (int lp_type);
void lib90F7C81D_gf_UnlockTexture (int lp_preset, string lp_camos, string lp_decal, int lp_player, bool lp_saveBank);
void lib90F7C81D_gf_UnlockMedal (string lp_medal, int lp_player);
void lib90F7C81D_gf_RewardMedal (int lp_medal, int lp_player);
void lib90F7C81D_gf_RibbonReward (int lp_index, int lp_panel, int lp_player);
void lib90F7C81D_gf_ReloadWeapon (int lp_player, int lp_controller);
void lib90F7C81D_gf_UpdateReloadDurationLabel (unit lp_unit);
abilcmd lib90F7C81D_gf_ReloadAbilitySkipCooldown (unit lp_unit);
void lib90F7C81D_gf_MoveChatBar (int lp_type);
point lib90F7C81D_gf_DebugCPCoordinates (int lp_panel, int lp_player);
void lib90F7C81D_gf_UpdateCPCoordinates (int lp_panel, int lp_player);
void lib90F7C81D_gf_HookupCoordinateReporter (int lp_panel, int lp_player);
void lib90F7C81D_gf_FlashCCButton (int lp_player, string lp_button_Ability, fixed lp_time);
void lib90F7C81D_gf_InitializeUIItems ();
order lib90F7C81D_gf_OrderConstructor (int lp_player, int lp_type, unit lp_item, string lp_hotkey);
string lib90F7C81D_gf_CAbilInventoryType (int lp_player);
int lib90F7C81D_gf_UnitTagRecycle (unit lp_u);
int lib90F7C81D_gf_UnitTagIndex (unit lp_u);
string lib90F7C81D_gf_GetUnitTag (unit lp_u);
void lib90F7C81D_gf_InitializeMovieFrame (string lp_path, structref<lib90F7C81D_gs_Movie_Player> lp_dialogItem);
void lib90F7C81D_gf_ShowHideMovieFrame (bool lp_showHide, playergroup lp_player);
void lib90F7C81D_gf_MovieSettings (string lp_movieFile, bool lp_loop, bool lp_muteAudio, bool lp_allowPause, bool lp_fullscreen, playergroup lp_player);
void lib90F7C81D_gf_StopMovie (playergroup lp_player);
void lib90F7C81D_gf_PlayMovie (string lp_movieFile, bool lp_loop, bool lp_fullscreen, bool lp_onOff);
bool lib90F7C81D_gf_MovieIsPlaying ();
void lib90F7C81D_gf_MinimapOffline (bool lp_state);
void lib90F7C81D_gf_MoveObjectivePanel (int lp_xOffset, int lp_yOffset, int lp_anchor);
void lib90F7C81D_gf_PingPlay (int lp_pingType, int lp_player, point lp_pingLocation, int lp_gameUser, string lp_pingTargetType, point lp_pingTargetPosition, int lp_pingTargetOwner);
void lib90F7C81D_gf_PingPlayUnit (string lp_pingTargetType, point lp_pingTargetPosition, int lp_pingTargetOwner, int lp_player, int lp_gameUser);
void lib90F7C81D_gf_PingBeaconAdd2 (string lp_beaconEffect, point lp_location, int lp_player, playergroup lp_playerGroup);
void lib90F7C81D_gf_PingMinimapButtonUpdate ();
void lib90F7C81D_gf_EnableDisablePingPanel (bool lp_enableDisable, playergroup lp_players);
void lib90F7C81D_gf_CreateVisorTextDialog ();
void lib90F7C81D_gf_DisplayVisorTextDialog (text lp_text, int lp_player);
void lib90F7C81D_gf_FadeVisorTextDialog (int lp_player);
void lib90F7C81D_gf_SetSpinnerMaximum (int lp_amount, playergroup lp_player);
void lib90F7C81D_gf_SetSpinnerMinimum (int lp_amount, playergroup lp_player);
void lib90F7C81D_gf_SetSpinnerMajorStep (int lp_amount, playergroup lp_player);
void lib90F7C81D_gf_SetSpinnerMinorStep (int lp_amount, playergroup lp_player);
void lib90F7C81D_gf_ResetSpinner (playergroup lp_player);
void lib90F7C81D_gf_CreateTextTagWithAnimation (unit lp_displayUnit, string lp_displayText, string lp_style, int lp_direction, playergroup lp_displayPlayers, string lp_attachment, fixed lp_time, int lp_yOffset, bool lp_critical);
void lib90F7C81D_gf_CreateTextTagForAllPlayers (unit lp_unit, text lp_text);
void lib90F7C81D_gf_FloatingCombatTextApplyAnimation (int lp_textFrame, string lp_style, playergroup lp_displayPlayers);
void lib90F7C81D_gf_FloatingCombatTextApplyDirection (int lp_frame, int lp_direction, playergroup lp_displayPlayers);
string lib90F7C81D_gf_ConvertIntegerToStringDoubleDigit (int lp_integer);
void lib90F7C81D_gf_SetGlobalLightingChange (fixed lp_durationTime, string lp_light);
void lib90F7C81D_gf_RefreshGlobalLighting ();
void lib90F7C81D_gf_EnableNightVision ();
void lib90F7C81D_gf_DisplayTipPanel (int lp_player);
int lib90F7C81D_gf_ReturnMaximumScoreValueType (int lp_sortType);
int lib90F7C81D_gf_ReturnMinimumScoreValueType (int lp_sortType);
void lib90F7C81D_gf_HeroUnitGroupInvunerable (bool lp_option);
void lib90F7C81D_gf_CycleButton (unit lp_unit, abilcmd lp_autoCast, string lp_currentButton, string lp_nextButton);
string lib90F7C81D_gf_NextButton (string lp_ability);
fixed lib90F7C81D_gf_ReturnChargeCount (unit lp_item, string lp_chargestring, fixed lp_maxcharges);
void lib90F7C81D_gf_UpdateStats (int lp_player);
int lib90F7C81D_gf_GetPingedPlayer (int lp_pingButton);
void lib90F7C81D_gf_UpdateSDInventory (int lp_player);
void lib90F7C81D_gf_DisplayReviveProgressBar (int lp_player);
void lib90F7C81D_gf_HideReviveProgressBar (int lp_player);
void lib90F7C81D_gf_UpdateRevivePenalty (int lp_player, int lp_penalty);
void lib90F7C81D_gf_VoteButtonSetup (int lp_player);
void lib90F7C81D_gf_VotekickCooldown (int lp_player);
int lib90F7C81D_gf_ImageIndex (string lp_mOSImage);
void lib90F7C81D_gf_HookUIToHero (int lp_player);
void lib90F7C81D_gf_DisplayUI (bool lp_showHide, int lp_player);
void lib90F7C81D_gf_SetUIState ();

// Trigger Declarations
trigger lib90F7C81D_gt_PeriodicWeatherEvent;
trigger lib90F7C81D_gt_RandomWeatherEvent;
trigger lib90F7C81D_gt_FogEvent;
trigger lib90F7C81D_gt_RainstormEvent;
trigger lib90F7C81D_gt_SnowEvent;
trigger lib90F7C81D_gt_CloudyEvent;
trigger lib90F7C81D_gt_IntenseSunlightEvent;
trigger lib90F7C81D_gt_BloodMoonEvent;
trigger lib90F7C81D_gt_RASprintAbility;
trigger lib90F7C81D_gt_PlayerQuits;
trigger lib90F7C81D_gt_PlayerHitStat;
trigger lib90F7C81D_gt_HeroDeath;
trigger lib90F7C81D_gt_StartCampaign;
trigger lib90F7C81D_gt_BossRushWaveDisplay;
trigger lib90F7C81D_gt_WeaponLogic;
trigger lib90F7C81D_gt_WeaponCreated;
trigger lib90F7C81D_gt_ArmorCreated;
trigger lib90F7C81D_gt_ArmorDamaged;
trigger lib90F7C81D_gt_ArmorLogic;
trigger lib90F7C81D_gt_WeaponsItems1NEW;
trigger lib90F7C81D_gt_WeaponsItems2;
trigger lib90F7C81D_gt_ItemChargeCombining;
trigger lib90F7C81D_gt_ItemChargeTooltipUpdate;
trigger lib90F7C81D_gt_VulcanMk88SentryReload;
trigger lib90F7C81D_gt_TBICameraSway;
trigger lib90F7C81D_gt_HeroLevel;
trigger lib90F7C81D_gt_DexterityPoints;
trigger lib90F7C81D_gt_SpawnedUnitVision;
trigger lib90F7C81D_gt_ResearchBeltLink;
trigger lib90F7C81D_gt_HeartbeatSensor;
trigger lib90F7C81D_gt_LaserDesignator;
trigger lib90F7C81D_gt_Bandolier;
trigger lib90F7C81D_gt_MotionSensorEarlyDetection;
trigger lib90F7C81D_gt_LNRecruited;
trigger lib90F7C81D_gt_LNRally;
trigger lib90F7C81D_gt_LNGroupUpdate;
trigger lib90F7C81D_gt_LNSITREP;
trigger lib90F7C81D_gt_LNSubgroupPanel;
trigger lib90F7C81D_gt_ApplyTrainingToAll;
trigger lib90F7C81D_gt_ApplyArmoredVestsToNeutral;
trigger lib90F7C81D_gt_PopoReachesBarracks;
trigger lib90F7C81D_gt_ReinforcePositionEnd;
trigger lib90F7C81D_gt_ReinforcePosition;
trigger lib90F7C81D_gt_AirSupportPings;
trigger lib90F7C81D_gt_SecurityResearched;
trigger lib90F7C81D_gt_SDCreationDeath;
trigger lib90F7C81D_gt_ArchitectResearched;
trigger lib90F7C81D_gt_ScrapPartsPickup;
trigger lib90F7C81D_gt_GrappleHookResetHeight;
trigger lib90F7C81D_gt_IRSensor;
trigger lib90F7C81D_gt_UntitledTrigger001;
trigger lib90F7C81D_gt_GapGeneratorShroud;
trigger lib90F7C81D_gt_MissionItemPickedUp;
trigger lib90F7C81D_gt_MissionItemDropped;
trigger lib90F7C81D_gt_FragAbilityText;
trigger lib90F7C81D_gt_FragItemText;
trigger lib90F7C81D_gt_RocketWarning;
trigger lib90F7C81D_gt_CameraShakeSmall;
trigger lib90F7C81D_gt_CameraShakeLarge;
trigger lib90F7C81D_gt_WeeklyModifierInit;
trigger lib90F7C81D_gt_Week1;
trigger lib90F7C81D_gt_Week2;
trigger lib90F7C81D_gt_Week3;
trigger lib90F7C81D_gt_Week4;
trigger lib90F7C81D_gt_Week5;
trigger lib90F7C81D_gt_Week6;
trigger lib90F7C81D_gt_Week7;
trigger lib90F7C81D_gt_Week8;
trigger lib90F7C81D_gt_Week9;
trigger lib90F7C81D_gt_AchievementsPanelInit;
trigger lib90F7C81D_gt_ConcentratedFire;
trigger lib90F7C81D_gt_JackOfAllTrades;
trigger lib90F7C81D_gt_PullThePin;
trigger lib90F7C81D_gt_NotEnoughEnergy;
trigger lib90F7C81D_gt_BigPharma;
trigger lib90F7C81D_gt_FullAutoPlease;
trigger lib90F7C81D_gt_PointOfImpact;
trigger lib90F7C81D_gt_BattleReady;
trigger lib90F7C81D_gt_BoobyTrap;
trigger lib90F7C81D_gt_EyeSeeYou;
trigger lib90F7C81D_gt_TargetLockedIn;
trigger lib90F7C81D_gt_HeavyHitter;
trigger lib90F7C81D_gt_LNKombat;
trigger lib90F7C81D_gt_DefenseBudget;
trigger lib90F7C81D_gt_Rocketeer;
trigger lib90F7C81D_gt_TeamWork;
trigger lib90F7C81D_gt_FinishHim;
trigger lib90F7C81D_gt_DemolitionMan;
trigger lib90F7C81D_gt_Maelstrom;
trigger lib90F7C81D_gt_SmokeEm;
trigger lib90F7C81D_gt_Supersoldier;
trigger lib90F7C81D_gt_FeeltheForce;
trigger lib90F7C81D_gt_CombatOrders;
trigger lib90F7C81D_gt_Omnipotent;
trigger lib90F7C81D_gt_DeathFromAbove;
trigger lib90F7C81D_gt_Grenadier;
trigger lib90F7C81D_gt_AuraLevels;
trigger lib90F7C81D_gt_WildfireHarvest;
trigger lib90F7C81D_gt_NoPainNoGain;
trigger lib90F7C81D_gt_HeavyWeight;
trigger lib90F7C81D_gt_LetItBurn;
trigger lib90F7C81D_gt_PlasmaShieldAB;
trigger lib90F7C81D_gt_JunkYard;
trigger lib90F7C81D_gt_AssembleThis;
trigger lib90F7C81D_gt_RageAgainstTheMachine;
trigger lib90F7C81D_gt__121Jigawatts;
trigger lib90F7C81D_gt_Robocrap;
trigger lib90F7C81D_gt_DazedandConfused;
trigger lib90F7C81D_gt_LeadtoLife;
trigger lib90F7C81D_gt_Escapist;
trigger lib90F7C81D_gt_CyborgModes;
trigger lib90F7C81D_gt_ResetSonicPulseCount;
trigger lib90F7C81D_gt_ShyGuy;
trigger lib90F7C81D_gt_SubZero;
trigger lib90F7C81D_gt_NowYouSeeMeNowYouDontt;
trigger lib90F7C81D_gt_FindersKeepers;
trigger lib90F7C81D_gt_HeatSignature;
trigger lib90F7C81D_gt_MosAchievementEndGameUpdate;
trigger lib90F7C81D_gt_PwnedAchievement;
trigger lib90F7C81D_gt_ClanTags;
trigger lib90F7C81D_gt_CamoTextureChange;
trigger lib90F7C81D_gt_DecalTextureChange;
trigger lib90F7C81D_gt_GameplayOptions;
trigger lib90F7C81D_gt_DropMagazine;
trigger lib90F7C81D_gt_CriticalHitDamageText;
trigger lib90F7C81D_gt_TempReloadBuffCyborgSSSU;
trigger lib90F7C81D_gt_TempReloadBuffCyborgGMDexSU;
trigger lib90F7C81D_gt_TempReloadSpeedBuffsApply;
trigger lib90F7C81D_gt_TempReloadSpeedBuffsRemove;
trigger lib90F7C81D_gt_TempWeaponReloadSpeedBuffApply;
trigger lib90F7C81D_gt_TempWeaponReloadSpeedBuffRemove;
trigger lib90F7C81D_gt_TempWeaponSpeedBuffSleightofHand;
trigger lib90F7C81D_gt_ReloadBehaviorApply;
trigger lib90F7C81D_gt_EncumberedWarning;
trigger lib90F7C81D_gt_ReloadNPCBehaviorApply;
trigger lib90F7C81D_gt_StasisWebCutscene;
trigger lib90F7C81D_gt_CameraButton;
trigger lib90F7C81D_gt_Command;
trigger lib90F7C81D_gt_FireteamAlpha;
trigger lib90F7C81D_gt_FireteamDelta;
trigger lib90F7C81D_gt_FireteamEcho;
trigger lib90F7C81D_gt_GraphUpdate;
trigger lib90F7C81D_gt_GetFPS;
trigger lib90F7C81D_gt_UpdateFPS;
trigger lib90F7C81D_gt_PMCKillCounter;
trigger lib90F7C81D_gt_InventoryHotkeyUsed;
trigger lib90F7C81D_gt_PingDeadHerosButton;
trigger lib90F7C81D_gt_PingTeammates;
trigger lib90F7C81D_gt_NewPlayerDeath;
trigger lib90F7C81D_gt_PingUsed;
trigger lib90F7C81D_gt_PingResetTimerExpires;
trigger lib90F7C81D_gt_UpgradeTooltip;
trigger lib90F7C81D_gt_VisorTextTimerExpire;
trigger lib90F7C81D_gt_SITREP;
trigger lib90F7C81D_gt_TipPanelButtons;
trigger lib90F7C81D_gt_TipPanelLocation;
trigger lib90F7C81D_gt_UnitTagListener;
trigger lib90F7C81D_gt_SpeedLabelThread;
trigger lib90F7C81D_gt_GameOver;
trigger lib90F7C81D_gt_QuitGame;
trigger lib90F7C81D_gt_PlayerLeavesGame;
trigger lib90F7C81D_gt_SelfCastButtonSwitch;
trigger lib90F7C81D_gt_SelfCastApplyBehavior;
trigger lib90F7C81D_gt_SelfCastApplyItemEffect;
trigger lib90F7C81D_gt_SelfCastHoldFire;
trigger lib90F7C81D_gt_SelfCastNightVisionOffSwitch;
trigger lib90F7C81D_gt_SelfCastNightVisionEffect;
trigger lib90F7C81D_gt_SDAilmentBar;
trigger lib90F7C81D_gt_SDPingPlayer;
trigger lib90F7C81D_gt_SDInventory;
trigger lib90F7C81D_gt_Revive;
trigger lib90F7C81D_gt_ReviveCountdown;
trigger lib90F7C81D_gt_KickPlayerButtons;
trigger lib90F7C81D_gt_VoteMenuYesNo;

// Library Initialization
void lib90F7C81D_InitVariables ();

