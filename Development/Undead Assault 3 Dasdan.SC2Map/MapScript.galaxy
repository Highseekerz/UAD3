//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Undead Assault 3: Dasdan
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/SwarmLib"
include "LibE6C8C21C"
include "Lib90F7C81D"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libHots_InitLib();
    libE6C8C21C_InitLib();
    lib90F7C81D_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const bool gv_dEBUG_GAME = true;
const int gv_mOSMax = 12;
const fixed gv_infestationTickRate = 40.0;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_Campaign {
    unit lv_mayorUnit;
    unit lv_chiefUnit;
    int lv_prologuepVote;
    int lv_prologuevTimer;
    int lv_prologueyButton;
    int lv_prologuenButton;
    int lv_prologueyLabel;
    int lv_prologuenLabel;
    int lv_prologuevYes;
    int lv_prologuevNo;
    bool[13] lv_prologuepVoteYes;
    bool[13] lv_prologuepVoteNo;
    bool lv_prologueSkip;
    bool lv_singleMission;
    bool lv_playChapterThree;
    int lv_missionCompleted;
};

struct gs_Prologue {
    bool[5] lv_passRate;
    unit lv_mission00Cop;
    int lv_mission00KLEPing;
    actor lv_mission00BriefingHighlight;
    actor lv_mission00TempActor;
    unit lv_mission00TextDummy;
    int lv_mission01SentrysPlaced;
    region[10] lv_mission01SentryRegions;
    int[6] lv_mission01SentryRegionPing;
    bool[10] lv_mission01SentryRegionUsed;
    unitgroup lv_mission01SentryItemGroup;
    actor[10] lv_mission01SentryActor;
    int[10] lv_mission01SentryMinimapPing;
    int[10] lv_mission01SentryTextTag;
    unit[10] lv_mission01SentryPlacementUnit;
    bool[10] lv_mission01SentryRegionEmpty;
    bool[10] lv_mission01SentryRegionSearched;
    fixed lv_mission02TCPScaleFactor;
    region[3] lv_mission02TCPRegions;
    int[3] lv_mission02Objectives;
    bool[3] lv_mission02TCPFailed;
    int[4] lv_mission02TCPMinimapPings;
    int lv_mission02TCPCountDefended;
    int lv_mission03TotalReservists;
    int lv_mission03CurrentEscorts;
    region[5] lv_mission03ReservistRegions1;
    region[10] lv_mission03ReservistRegions2;
    region[7] lv_mission03ReservistRegions3;
    region[10] lv_mission03ReservistRegions4;
    region[14] lv_mission03ReservistRegions5;
    bool[5] lv_mission03ReservistRegionUsed;
    int[9] lv_mission03ReservistMinimapPing;
    region[8] lv_mission03ReservistPickedLocations;
    actor[8] lv_mission03ReservistActor;
    unit[8] lv_mission03ReservistPlacementUnit;
    bool[8] lv_mission03ReservistConscripted;
    unitgroup lv_mission03ReservistUnitGroup;
    int lv_mission03BarracksPing;
    int lv_mission03BarracksTextTag;
    unitgroup lv_mission04CargoTruckUnitGroup;
    unit[6] lv_mission04CargoTruckUnits;
    point[101] lv_WestTCPRoute;
    point[101] lv_WestTCPRoute2;
    point[101] lv_WestTCPRoute3;
    int[3] lv_mission04CargoTruckPoints;
    int lv_mission04WestCargoTruckCurrentIndex;
    int lv_mission04WestCargoTruck2CurrentIndex;
    int lv_mission04SouthCargoTruckCurrentIndex;
    int lv_mission04SouthCargoTruck2CurrentIndex;
    int lv_mission04EastCargoTruckCurrentIndex;
    int lv_mission04EastCargoTruck2CurrentIndex;
    int lv_mission04SuccessfullyEscortedTrucks;
    int lv_mission04ConvoyCurrentIndex;
    bool lv_mission04ConvoySecondWaveSpawned;
    bool lv_mission04TrucksExitingTown;
    unitgroup lv_mission04CivUnits;
    int lv_mission04TrucksEscortedToTown;
    bool lv_mission04TruckLost;
};

struct gs_Chapter1 {
    bool[5] lv_passRate;
    unit[6] lv_mission05MATVUnit;
    int[6] lv_mission05MATVLocationPing;
    bool[6] lv_mission05MATVRepaired;
    unit[6] lv_mission05EngineerUnit;
    unitgroup lv_mission05EngineerGroup;
    int lv_mission05EngineerMax;
    point[6] lv_mission05RepairPoint;
    int lv_mission05Route;
    int lv_mission05RouteCount;
    int lv_mission05VehicleRepairCount;
    bool lv_mission05RepairStarted;
    actor[6] lv_mission05ActorBeacon;
    unit lv_mission05TextDummy;
    actor lv_mission05ActorDummy;
    unit lv_mission06FarmerBlackma;
    int lv_mission06SiloMax;
    int lv_mission06SiloMin;
    region[7] lv_mission06SiloRegion;
    int lv_mission06SiloCompletedCount;
    fixed lv_mission06SiloCollectionTime;
    int lv_mission06SampleCollectedCount;
    bool lv_mission06SiloLoopFinished;
    int lv_mission06ProgressFrame;
    int lv_mission06ProgressBar;
    int lv_mission06PhantomPing;
    unitgroup lv_mission06FoodItemGroup;
    region[13] lv_mission07HouseRegion;
    actor[13] lv_mission07HouseRegionActor;
    int[13] lv_mission07HouseLocationPing;
    unit[30] lv_mission07CivilianUnit;
    unitgroup lv_mission07CivilianUnitGroup;
    int lv_mission07CivilianEscortedCount;
    bool[13] lv_mission07CivilianHouseSearched;
    int lv_mission07CivilianCount;
    int lv_mission07CivilianMax;
    region[4] lv_mission08SpiderEggRegion;
    int lv_mission08SpiderEggMax;
    int lv_mission08SpiderEggKilled;
    unit[12] lv_mission08SpiderEgg;
    bool lv_mission08Bonus;
    unitgroup lv_mission08SpiderEggGroup;
    unit lv_mission09SpiderKing;
};

struct gs_Chapter2 {
    bool[6] lv_passRate;
    int lv_transitionFrame;
    unit lv_mission10Saber6Commander;
    bool lv_mission10Saber6CommanderKilled;
    bool lv_mission10Saber6SoldierKilled;
    unitgroup lv_mission10Saber6Group;
    int lv_mission10Route;
    bool lv_mission10ReachedDasdan;
    bool lv_mission10ReachedWestTCP;
    int lv_mission10SquadReachedWestTCP;
    region lv_mission10AresSpawnRegion;
    int lv_mission10NorthMax;
    int lv_mission10EastMax;
    region lv_mission10SpawnLocation;
    region lv_mission10Leash;
    int lv_mission10PointCurrent;
    int lv_mission11LastTCPSpawn;
    int lv_mission11RefugeeWave;
    int lv_mission11WavesEscorted;
    int[11] lv_mission11RefugeeWaveEscorted;
    point[21] lv_mission11SouthRefugeeRoute;
    point[33] lv_mission11EastRefugeeRoute;
    unitgroup[11] lv_mission11RefugeeGroups;
    int lv_mission12ApiaryCount;
    int lv_mission12ApiariesKilled;
    unitgroup lv_mission12ApiaryGroup;
    bool lv_mission12ApiaryFinished;
    bool lv_mission13TruckRepaired;
    unit lv_mission13AbdulsTruck;
    unit lv_mission13RepairKit;
    point lv_mission13BreakdownPoint;
    int lv_mission14RefugeeCount;
    int lv_mission14RefugeesEvacuated;
    int lv_mission14TrucksEvacuated;
    int lv_mission14MotorPoolLocation;
    unitgroup lv_mission14TruckUnitGroup;
    unitgroup lv_mission14CivUnitGroup;
    int[6] lv_mission14EvacGroups;
    point[6] lv_mission14WestRoute0Points;
    point[6] lv_mission14NorthRoute1Points;
    bool lv_mission15Started;
    bool lv_mission15DarreusKilled;
    unit lv_mission15DarruesUnit;
    int lv_mission16InfectedT3KilledStart;
    int lv_mission16InfectedT3KilledEnd;
    int lv_mission16InfectedT1KilledStart;
    int lv_mission16InfectedT1KilledEnd;
    int lv_mission16SnapshotLN;
};

struct gs_Chapter3 {
    bool[7] lv_passRate;
    region lv_rATarget;
    int lv_rASquadCount;
    int lv_rASquadSize;
    bool lv_mission17AirportSecured;
    fixed lv_mission17AirportScaleFactor;
    unitgroup lv_mission17USMCGroup;
    int lv_mission17Reinforcements;
    unitgroup lv_mission18RebelSquad;
    unit lv_mission18RebelCommander;
    int lv_mission18RebelPing;
    bool lv_mission19DocumentsFound;
    bool[12] lv_mission19HomeSearched;
    region[12] lv_mission19HouseRegion;
    actor[12] lv_mission19HouseRegionActor;
    int[12] lv_mission19HouseLocationPing;
    region lv_mission19DocumentLocation;
    int lv_mission20ScrapPartsCollected;
    int lv_mission20ScrapPartsTotal;
    region[10] lv_mission20ScrapRegion;
    int[10] lv_mission20ScrapLocationPing;
    bool lv_mission20ProductionEnabled;
    fixed lv_mission20BattlebotsPer;
    unitgroup lv_mission20Battlebots;
    unit lv_mission21LLDR;
    bool lv_mission21ComputerHacked;
    bool[6] lv_mission21TankSpawnRegion;
    fixed lv_mission21TanksDestroyed;
    int lv_mission21TankSpawnCount;
    int lv_mission21TerminalPing;
    actor lv_mission21TerminalActor;
    int lv_mission22RASaboteurKillCount;
    int lv_mission23SilosDisarmedCount;
    region[7] lv_mission23SiloRegion;
    actor[7] lv_mission23SiloRegionActor;
    int[7] lv_mission23SiloLocationPing;
    unit[7] lv_mission23SiloUnits;
    int[7] lv_mission23SiloLabels;
    int[7] lv_mission23SiloTimers;
    bool[7] lv_mission23SiloDisarmed;
    bool[7] lv_mission23SiloInactive;
    unit lv_mission23CacumenUnit;
};

struct gs_CampaignMissions {
    int lv_missionPanel;
    int lv_missionList;
    int lv_missionButtonStart;
    int lv_missionCheckboxSingleRun;
    int lv_missionID;
    int lv_mission00KLE;
    int lv_mission01Sentries;
    int lv_mission02TCPs;
    int lv_mission03Reservists;
    int lv_mission04OpenBorders;
    int lv_mission05Engineers;
    int lv_mission06Akma;
    int lv_mission07MassRecall;
    int lv_mission08Spiders;
    int lv_mission09SpiderKing;
    int lv_mission10Saber6;
    int lv_mission11Bulwark;
    int lv_mission12Apiaries;
    int lv_mission13Abdul;
    int lv_mission14Evac;
    int lv_mission15Darreus;
    int lv_mission16Plague;
    int lv_mission17OldCrew;
    int lv_mission18Rebellion;
    int lv_mission19ThePlan;
    int lv_mission20Wartime;
    int lv_mission21Tanks;
    int lv_mission22JamIt;
    int lv_mission23Finale;
};

struct gs_Survival {
    unit lv_phantom;
    region lv_lZRegion;
    bool lv_survivalComplete;
    int lv_extracted;
    int lv_consumeLifeCount;
    bool lv_bonusObjCompleted;
    bool lv_smallTeam;
    int lv_teamCount;
};

struct gs_PolicePosts {
    unit[41] lv_unit;
    point[41] lv_point;
};

struct gs_MissionSurvivalVariant1 {
    int lv_path;
    int lv_experienceCounter;
    int[9][2] lv_route;
    region[10] lv_bonusRewardRegions;
    int[3] lv_currentSanie;
    int lv_currentTarget;
    int lv_currentRoute;
    int lv_bruiserBrothersObjective;
    int lv_bruiserBrothersKilled;
    unitgroup lv_bruiserBrothersGroup;
    int lv_convoysExited;
    int[7] lv_convoyPoints;
    unit[5] lv_convoyUnit;
    int lv_convoyMovementCurrentIndex;
    point[101] lv_convoyRoute;
    bool lv_convoyExitStarted;
    bool lv_didBonus;
    actor lv_satchelBeacon;
    bool lv_satchelDestroyed;
    unit lv_satchelUnit;
    int lv_satchelTimeRemaining;
    int lv_satchelLabel;
    unit lv_satchelItem;
    int lv_satchelExplosionPing;
    bool lv_satchelMO;
    bool lv_satchelDamaged;
    int lv_saniesBonusMax;
    int lv_saniesTotalBonusAllowed;
    unit[3][6] lv_saniesBonusUnit;
    bool[3][6] lv_saniesBonusAllowed;
    unit[3][8] lv_saniesTargetUnit;
    bool[3][8] lv_saniesTargetAllowed;
    int lv_saniesTimer;
    unitgroup lv_saniesGroup;
    int lv_saniesKilled;
    int lv_saniesAlive;
    unit lv_saniesCurrentTarget;
    int lv_saniesCoreMax;
    int lv_saniesCoreCount;
    int lv_saniesBonusCount;
    bool lv_saniesBonusComplete;
};

struct gs_MissionSurvivalVariant2 {
    int lv_convoyLength;
    unit[11] lv_convoy;
    int lv_sector1;
};

struct gs_BossRush {
    bool lv_decayActive;
    region lv_spawnerRegion;
    unitgroup lv_spawnerUnitGroups;
    string[12] lv_bossTypes;
    unitgroup lv_bossGroup;
    int lv_bossesKilled;
    region lv_lastRegion;
    int lv_currentRound;
    int lv_currentPingActor;
    actor lv_currentZoneHighlight;
    int lv_currentInstanceNumber;
    string lv_currentInstance;
    region lv_currentSpawnRegion;
};

struct gs_Sandbox {
    actor[13] lv_cursor;
    string[13] lv_unit;
    bool[2][13] lv_list;
    int[4] lv_sandBoxPanelButtons;
    int lv_clearCursorButton;
    int lv_closeButton;
    int lv_optionsButton;
    int lv_autoReviveButton;
    int lv_spawnButton;
    int lv_spawnGroupButton;
    int lv_itemListContainer;
    int lv_itemListSelectedIndex;
    int lv_itemSliderCount;
    int[13] lv_itemSpawnCount;
    int lv_unitListContainer;
    int lv_unitListSelectedIndex;
    int lv_unitSliderCount;
    int[13] lv_unitMOSSelectedIndex;
    int[13] lv_unitSelectedIndex;
    int[13] lv_unitSpawnCount;
    int lv_enemyListButton;
    int lv_enemyListContainer;
    int lv_enemyListSelectedIndex;
    int lv_enemySliderCount;
    int[13] lv_enemySpawnCount;
    int[13] lv_enemySelectedIndex;
    int lv_enemyGroupListContainer;
    int lv_enemyGroupListSelectedIndex;
    int[13] lv_enemyGroupSelectedIndex;
    point[13] lv_enemyGroupSpawnPoint;
    int lv_enemyGroupTargetPointButton;
    bool[13] lv_enemyGroupPointEnabled;
    int[13] lv_upgradeCount;
    int[51] lv_mOSIcons;
    int[19] lv_mOSButtons;
    int[13] lv_previousSelectedMOS;
    int lv_optionsPanel;
    int[14] lv_optionSettings;
    int[13] lv_nPCSetting;
    revealer[13] lv_revealer;
    int[13] lv_skillUpgradesCurrent;
    bool[13] lv_maxSUOn;
    bool[13] lv_clearCursor;
    bool lv_disableInfestationLevel;
    bool[13] lv_optionLock;
};

struct gs_XPEvents {
    bool[7][13] lv_dayBonus;
    string[13] lv_day;
    bool[13] lv_bonusXp;
    bool[13] lv_hotStreakACH;
};

struct gs_SupplyCache {
    region[5] lv_supply_Cache_Region;
    bool[5] lv_supply_Cache_Found;
    int lv_supply_Cache_Found_Count;
    int lv_supply_Cache_Max;
    bool[6] lv_supply_Cache_List_Used;
    actor[5] lv_rock;
};

struct gs_ModeSelection {
    int lv_votesRemaining;
    int lv_votesRemainingLabel;
    int lv_campaignSelectedIndex;
    int lv_campaignModesContainer;
    int lv_survivalSelectedIndex;
    int lv_survivalModesContainer;
    int lv_modeCategoriesIndex;
    int[13] lv_votes;
    int[13] lv_voteCountLabel;
    int[13] lv_voteContainers;
    bool[13] lv_modeContainer;
    int[13] lv_modePlayerVoted;
    bool lv_voteQueue;
    bool lv_votingFinished;
    bool[13] lv_voteRemoved;
    bool[13] lv_playerVoted;
    int lv_modifierContainer;
    int lv_modifierSelectedIndex;
};

struct gs_Screen {
    bool[13] lv_charSelected;
    int[25] lv_mOSButtons;
    int[25] lv_buttonChargeLabel;
    int[25] lv_mOSCharges;
    int lv_charScreen;
    int lv_readyButton;
    int lv_readyLabel;
    int[13] lv_mOSSelected;
    int lv_mOSTabSelectedIndex;
    int[25][13] lv_mOSModelRankInsig;
    bool[13] lv_lobbySelection;
    int lv_mOSButtonsContainer;
    int lv_playerID;
    int[13] lv_notReadySlots;
    int[13] lv_notReadySlotsLabel;
    int[25] lv_mOSPanel;
    int lv_firstWinBonusFrame;
    int lv_infoPaneGroup;
};

struct gs_Debug {
    bool lv_gameEvents;
    int lv_gameEventsType;
    string lv_gameEventsFile;
    bool lv_spawnMechanics;
    int lv_spawnMechanicsType;
    string lv_spawnMechanicsFile;
    int lv_debugPanel;
    int lv_campaignMissions;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
string ge_TCP_Ident (string lp_val);
string ge_MissionSurvivalVariant_Ident (string lp_val);
const int ge_ListType_Item = 0;
const int ge_ListType_Unit = 1;
const int ge_ListType_Target = 2;
const int ge_UndeadUnitFilter_All = 0;
const int ge_UndeadUnitFilter_Fliers = 1;
const int ge_UndeadUnitFilter_SpecialT2 = 2;
const int ge_UndeadUnitFilter_T1Fliers = 3;
const int ge_UndeadUnitFilter_T1 = 4;
const int ge_UndeadUnitFilter_Cloaked = 5;
const int ge_UndeadUnitFilter_CloakedAir = 6;
string ge_UndeadUnitFilter_Ident (int lp_val);

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_dEBUG_MODE;
int gv_dEBUG_MOS;
gs_Campaign gv_campaign;
gs_Prologue gv_prologue;
region gv_mission03ReservistRegions;
int gv_tugOfWarPanel;
fixed[3] gv_tugOfWarPrev;
gs_Chapter1 gv_chapter_1;
gs_Chapter2 gv_chapter_2;
gs_Chapter3 gv_chapter_3;
gs_CampaignMissions gv_campaign_Missions;
gs_Survival gv_survival;
gs_PolicePosts gv_police;
bool gv_msv;
gs_MissionSurvivalVariant1 gv_missionSurvivalVariant1;
gs_MissionSurvivalVariant2 gv_missionSurvivalVariant2;
gs_BossRush gv_bossRush;
gs_Sandbox gv_sandbox;
bank[13] gv_stR;
bool[13] gv_allowPlayerSave;
bool gv_allowGlobalSave;
int gv_xPFrame;
int[3] gv_xPLabels;
int gv_classicCardOption;
int[13] gv_mosAmount;
int[25][13] gv_skillUpgradeBonus;
fixed gv_xPMOD;
int gv_xPButton;
int[13] gv_sDFrameIndex;
gs_XPEvents gv_xPEvents;
fixed gv_currentPlayerLevel;
gs_SupplyCache gv_supplyCache;
gs_ModeSelection gv_modeSelection;
bool gv_gameStart;
gs_Screen gv_menu;
int gv_cC_Index;
unitgroup[13] gv_cC_Group;
int[13] gv_cC_Panel;
fixed gv_voteTime;
int gv_voteTimeFrame;
region[21] gv_t3Ground;
region[16] gv_t2Ground;
region[25] gv_airSpawns;
fixed gv_supplyCount;
bool gv_pauseSpawning;
int gv_mutateBuffCount;
int gv_scaleLevel;
bool gv_campaignReaperSpawned;
playergroup gv_devGroup;
gs_Debug gv_debug;

void InitGlobals () {
    int init_i;
    int init_i1;
    int init_j1;

    gv_dEBUG_MODE = UserDataGetInt("GameModes", "Normal", "Mode #", 1);
    gv_dEBUG_MOS = UserDataGetInt("MOSSetup", "MOS - Ghost", "ID Index", 1);
    gv_campaign.lv_prologuepVote = c_invalidDialogControlId;
    gv_campaign.lv_prologuevTimer = c_invalidDialogControlId;
    gv_campaign.lv_prologueyButton = c_invalidDialogControlId;
    gv_campaign.lv_prologuenButton = c_invalidDialogControlId;
    gv_campaign.lv_prologueyLabel = c_invalidDialogControlId;
    gv_campaign.lv_prologuenLabel = c_invalidDialogControlId;
    gv_prologue.lv_mission00Cop = UnitFromId(2036300671);
    gv_prologue.lv_mission00KLEPing = c_invalidPingId;
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        gv_prologue.lv_mission01SentryRegionPing[init_i1] = c_invalidPingId;
    }
    gv_prologue.lv_mission01SentryItemGroup = UnitGroupEmpty();
    for (init_i1 = 0; init_i1 <= 9; init_i1 += 1) {
        gv_prologue.lv_mission01SentryMinimapPing[init_i1] = c_invalidPingId;
    }
    for (init_i1 = 0; init_i1 <= 9; init_i1 += 1) {
        gv_prologue.lv_mission01SentryTextTag[init_i1] = c_textTagNone;
    }
    gv_prologue.lv_mission02TCPScaleFactor = 4.0;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        gv_prologue.lv_mission02Objectives[init_i1] = c_invalidObjectiveId;
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_prologue.lv_mission02TCPMinimapPings[init_i1] = c_invalidPingId;
    }
    for (init_i1 = 0; init_i1 <= 8; init_i1 += 1) {
        gv_prologue.lv_mission03ReservistMinimapPing[init_i1] = c_invalidPingId;
    }
    gv_prologue.lv_mission03ReservistUnitGroup = UnitGroupEmpty();
    gv_prologue.lv_mission03BarracksPing = c_invalidPingId;
    gv_prologue.lv_mission03BarracksTextTag = c_textTagNone;
    gv_prologue.lv_mission04CargoTruckUnitGroup = UnitGroupEmpty();
    gv_prologue.lv_mission04WestCargoTruckCurrentIndex = 10;
    gv_prologue.lv_mission04WestCargoTruck2CurrentIndex = 10;
    gv_prologue.lv_mission04SouthCargoTruckCurrentIndex = 10;
    gv_prologue.lv_mission04SouthCargoTruck2CurrentIndex = 10;
    gv_prologue.lv_mission04EastCargoTruckCurrentIndex = 10;
    gv_prologue.lv_mission04EastCargoTruck2CurrentIndex = 10;
    gv_prologue.lv_mission04ConvoyCurrentIndex = 18;
    gv_prologue.lv_mission04CivUnits = UnitGroupEmpty();
    gv_mission03ReservistRegions = RegionEmpty();
    gv_tugOfWarPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_tugOfWarPrev[init_i] = 50.0;
    }
    for (init_i1 = 0; init_i1 <= 5; init_i1 += 1) {
        gv_chapter_1.lv_mission05MATVLocationPing[init_i1] = c_invalidPingId;
    }
    gv_chapter_1.lv_mission05EngineerGroup = UnitGroupEmpty();
    gv_chapter_1.lv_mission05Route = 1;
    gv_chapter_1.lv_mission06ProgressFrame = c_invalidDialogControlId;
    gv_chapter_1.lv_mission06ProgressBar = c_invalidDialogControlId;
    gv_chapter_1.lv_mission06PhantomPing = c_invalidPingId;
    gv_chapter_1.lv_mission06FoodItemGroup = UnitGroupEmpty();
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_chapter_1.lv_mission07HouseLocationPing[init_i1] = c_invalidPingId;
    }
    gv_chapter_1.lv_mission07CivilianUnitGroup = UnitGroupEmpty();
    gv_chapter_1.lv_mission07CivilianMax = 26;
    gv_chapter_1.lv_mission08SpiderEggGroup = UnitGroupEmpty();
    gv_chapter_2.lv_transitionFrame = c_invalidDialogControlId;
    gv_chapter_2.lv_mission10Saber6Group = UnitGroupEmpty();
    gv_chapter_2.lv_mission10NorthMax = 10;
    gv_chapter_2.lv_mission10EastMax = 8;
    gv_chapter_2.lv_mission10Leash = RegionFromId(206);
    gv_chapter_2.lv_mission10PointCurrent = 1;
    gv_chapter_2.lv_mission11LastTCPSpawn = RandomInt(1, 2);
    for (init_i1 = 0; init_i1 <= 10; init_i1 += 1) {
        gv_chapter_2.lv_mission11RefugeeGroups[init_i1] = UnitGroupEmpty();
    }
    gv_chapter_2.lv_mission12ApiaryGroup = UnitGroupEmpty();
    gv_chapter_2.lv_mission14TruckUnitGroup = UnitGroupEmpty();
    gv_chapter_2.lv_mission14CivUnitGroup = UnitGroupEmpty();
    gv_chapter_3.lv_mission17AirportScaleFactor = 4.0;
    gv_chapter_3.lv_mission17USMCGroup = UnitGroupEmpty();
    gv_chapter_3.lv_mission18RebelSquad = UnitGroupEmpty();
    gv_chapter_3.lv_mission18RebelPing = c_invalidPingId;
    for (init_i1 = 0; init_i1 <= 11; init_i1 += 1) {
        gv_chapter_3.lv_mission19HouseLocationPing[init_i1] = c_invalidPingId;
    }
    for (init_i1 = 0; init_i1 <= 9; init_i1 += 1) {
        gv_chapter_3.lv_mission20ScrapLocationPing[init_i1] = c_invalidPingId;
    }
    gv_chapter_3.lv_mission20Battlebots = UnitGroupEmpty();
    gv_chapter_3.lv_mission21TerminalPing = c_invalidPingId;
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        gv_chapter_3.lv_mission23SiloLocationPing[init_i1] = c_invalidPingId;
    }
    for (init_i1 = 0; init_i1 <= 6; init_i1 += 1) {
        gv_chapter_3.lv_mission23SiloLabels[init_i1] = c_invalidDialogControlId;
    }
    gv_campaign_Missions.lv_missionPanel = c_invalidDialogControlId;
    gv_campaign_Missions.lv_missionList = c_invalidDialogControlId;
    gv_campaign_Missions.lv_missionButtonStart = c_invalidDialogControlId;
    gv_campaign_Missions.lv_missionCheckboxSingleRun = c_invalidDialogControlId;
    gv_campaign_Missions.lv_mission01Sentries = 1;
    gv_campaign_Missions.lv_mission02TCPs = 2;
    gv_campaign_Missions.lv_mission03Reservists = 3;
    gv_campaign_Missions.lv_mission04OpenBorders = 4;
    gv_campaign_Missions.lv_mission05Engineers = 5;
    gv_campaign_Missions.lv_mission06Akma = 6;
    gv_campaign_Missions.lv_mission07MassRecall = 7;
    gv_campaign_Missions.lv_mission08Spiders = 8;
    gv_campaign_Missions.lv_mission09SpiderKing = 9;
    gv_campaign_Missions.lv_mission10Saber6 = 10;
    gv_campaign_Missions.lv_mission11Bulwark = 11;
    gv_campaign_Missions.lv_mission12Apiaries = 12;
    gv_campaign_Missions.lv_mission13Abdul = 13;
    gv_campaign_Missions.lv_mission14Evac = 14;
    gv_campaign_Missions.lv_mission15Darreus = 15;
    gv_campaign_Missions.lv_mission16Plague = 16;
    gv_campaign_Missions.lv_mission17OldCrew = 17;
    gv_campaign_Missions.lv_mission18Rebellion = 18;
    gv_campaign_Missions.lv_mission19ThePlan = 19;
    gv_campaign_Missions.lv_mission20Wartime = 20;
    gv_campaign_Missions.lv_mission21Tanks = 21;
    gv_campaign_Missions.lv_mission22JamIt = 22;
    gv_campaign_Missions.lv_mission23Finale = 23;
    gv_missionSurvivalVariant1.lv_experienceCounter = 5;
    gv_missionSurvivalVariant1.lv_bruiserBrothersObjective = c_invalidObjectiveId;
    gv_missionSurvivalVariant1.lv_bruiserBrothersGroup = UnitGroupEmpty();
    gv_missionSurvivalVariant1.lv_convoyMovementCurrentIndex = 10;
    gv_missionSurvivalVariant1.lv_satchelLabel = c_invalidDialogControlId;
    gv_missionSurvivalVariant1.lv_satchelExplosionPing = c_invalidPingId;
    gv_missionSurvivalVariant1.lv_saniesBonusMax = 4;
    gv_missionSurvivalVariant1.lv_saniesTimer = 30;
    gv_missionSurvivalVariant1.lv_saniesGroup = UnitGroupEmpty();
    gv_missionSurvivalVariant2.lv_sector1 = 11;
    gv_bossRush.lv_spawnerUnitGroups = UnitGroupEmpty();
    gv_bossRush.lv_bossGroup = UnitGroupEmpty();
    gv_bossRush.lv_lastRegion = RegionFromId(45);
    gv_bossRush.lv_currentPingActor = c_invalidPingId;
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        gv_sandbox.lv_sandBoxPanelButtons[init_i1] = c_invalidDialogControlId;
    }
    gv_sandbox.lv_clearCursorButton = c_invalidDialogControlId;
    gv_sandbox.lv_closeButton = c_invalidDialogControlId;
    gv_sandbox.lv_optionsButton = c_invalidDialogControlId;
    gv_sandbox.lv_autoReviveButton = c_invalidDialogControlId;
    gv_sandbox.lv_spawnButton = c_invalidDialogControlId;
    gv_sandbox.lv_spawnGroupButton = c_invalidDialogControlId;
    gv_sandbox.lv_itemListContainer = c_invalidDialogControlId;
    gv_sandbox.lv_itemListSelectedIndex = c_invalidDialogControlId;
    gv_sandbox.lv_itemSliderCount = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_sandbox.lv_itemSpawnCount[init_i1] = 1;
    }
    gv_sandbox.lv_unitListContainer = c_invalidDialogControlId;
    gv_sandbox.lv_unitListSelectedIndex = c_invalidDialogControlId;
    gv_sandbox.lv_unitSliderCount = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_sandbox.lv_unitSpawnCount[init_i1] = 1;
    }
    gv_sandbox.lv_enemyListButton = c_invalidDialogControlId;
    gv_sandbox.lv_enemyListContainer = c_invalidDialogControlId;
    gv_sandbox.lv_enemyListSelectedIndex = c_invalidDialogControlId;
    gv_sandbox.lv_enemySliderCount = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_sandbox.lv_enemySpawnCount[init_i1] = 1;
    }
    gv_sandbox.lv_enemyGroupListContainer = c_invalidDialogControlId;
    gv_sandbox.lv_enemyGroupListSelectedIndex = c_invalidDialogControlId;
    gv_sandbox.lv_enemyGroupTargetPointButton = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 50; init_i1 += 1) {
        gv_sandbox.lv_mOSIcons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 18; init_i1 += 1) {
        gv_sandbox.lv_mOSButtons[init_i1] = c_invalidDialogControlId;
    }
    gv_sandbox.lv_optionsPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 13; init_i1 += 1) {
        gv_sandbox.lv_optionSettings[init_i1] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_allowPlayerSave[init_i] = true;
    }
    gv_allowGlobalSave = true;
    gv_xPFrame = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_xPLabels[init_i] = c_invalidDialogControlId;
    }
    gv_classicCardOption = c_invalidDialogControlId;
    gv_xPMOD = 1.0;
    gv_xPButton = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_xPEvents.lv_day[init_i1] = "";
    }
    gv_currentPlayerLevel = 1.0;
    gv_supplyCache.lv_supply_Cache_Max = 5;
    gv_modeSelection.lv_votesRemainingLabel = c_invalidDialogControlId;
    gv_modeSelection.lv_campaignSelectedIndex = c_invalidDialogControlId;
    gv_modeSelection.lv_campaignModesContainer = c_invalidDialogControlId;
    gv_modeSelection.lv_survivalSelectedIndex = c_invalidDialogControlId;
    gv_modeSelection.lv_survivalModesContainer = c_invalidDialogControlId;
    gv_modeSelection.lv_modeCategoriesIndex = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_modeSelection.lv_voteCountLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_modeSelection.lv_voteContainers[init_i1] = c_invalidDialogControlId;
    }
    gv_modeSelection.lv_modifierContainer = c_invalidDialogControlId;
    gv_modeSelection.lv_modifierSelectedIndex = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 24; init_i1 += 1) {
        gv_menu.lv_mOSButtons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 24; init_i1 += 1) {
        gv_menu.lv_buttonChargeLabel[init_i1] = c_invalidDialogControlId;
    }
    gv_menu.lv_charScreen = c_invalidDialogControlId;
    gv_menu.lv_readyButton = c_invalidDialogControlId;
    gv_menu.lv_readyLabel = c_invalidDialogControlId;
    gv_menu.lv_mOSTabSelectedIndex = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 24; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= 12; init_j1 += 1) {
            gv_menu.lv_mOSModelRankInsig[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    gv_menu.lv_mOSButtonsContainer = c_invalidDialogControlId;
    gv_menu.lv_playerID = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_menu.lv_notReadySlots[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 12; init_i1 += 1) {
        gv_menu.lv_notReadySlotsLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 24; init_i1 += 1) {
        gv_menu.lv_mOSPanel[init_i1] = c_invalidDialogControlId;
    }
    gv_menu.lv_firstWinBonusFrame = c_invalidDialogControlId;
    gv_menu.lv_infoPaneGroup = c_invalidDialogControlId;
    gv_cC_Index = 1;
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_cC_Group[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        gv_cC_Panel[init_i] = c_invalidDialogControlId;
    }
    gv_voteTimeFrame = c_invalidDialogControlId;
    gv_devGroup = PlayerGroupEmpty();
    gv_debug.lv_gameEventsType = 1;
    gv_debug.lv_gameEventsFile = "Game Events.txt";
    gv_debug.lv_spawnMechanicsType = 2;
    gv_debug.lv_spawnMechanicsFile = "Spawn Mechanics.txt";
    gv_debug.lv_debugPanel = c_invalidDialogControlId;
    gv_debug.lv_campaignMissions = c_invalidDialogControlId;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_TextActorAnim (unit lp_unit, string lp_unitStatusFrame);
fixed gf_ScaleSentryTime (fixed lp_baseTime);
void gf_SpawnSentrys ();
void gf_TOWUpdate (fixed lp_friendlySupply, fixed lp_enemySupply, region lp_triggeringRegion);
void gf_TOWPBSet (string lp_tCP, fixed lp_value);
void gf_TOWPanel (bool lp_state);
int gf_ReturnTCP (string lp_tCP);
fixed gf_CalculateUnitGroupSupply (unitgroup lp_unitGroup);
text gf_GetReservistText ();
void gf_PickReservistLocations ();
void gf_CreateCargoTrucks (int lp_spawnGroup);
void gf_MoveOutConvoy ();
void gf_SetupCargoTruckRoutes ();
void gf_PingCargoTruckRoute (int lp_route);
void gf_StartEngineerRoute ();
void gf_SpawnSpiderEggs (int lp_eggMax, int lp_zones);
void gf_SpawnApiaries ();
void gf_StartTruckRoute ();
void gf_Chapter3Items ();
void gf_OutlawPhantom ();
void gf_CreateCrashSite ();
void gf_SpawnOutlawSoldiers (int lp_groupSpawnCount);
void gf_SpawnRAPowerStationDefense ();
void gf_SpawnRASaboteurs ();
int gf_InitSiloTimers (int lp_siloNumber);
void gf_CampaignScriptedSpawns (int lp_missionEvent);
void gf_MissionMenuInit ();
int gf_CampaignVictoryMultiplier (int lp_earnedXP);
void gf_ChapterTransition (int lp_chapter, bool lp_option);
void gf_PolicePostInit ();
void gf_SurvivalTimer ();
void gf_StartMissionSurvivalVariant (trigger t, string lp_event);
void gf_RunMissionSurvivalEvent (string lp_event);
void gf_CreateConvoy ();
void gf_ConvoyEncounters ();
void gf_SetupConvoyRoutes (int lp_route);
void gf_DropoffSatchelItem (point lp_location);
void gf_SpawnSatchel (point lp_location, int lp_sector, int lp_target, bool lp_bonus);
void gf_CreateDebris ();
void gf_SpawnSanies (string lp_location);
void gf_BonusCheck (int lp_sector, int lp_bonus);
void gf_SelectRandomBonus ();
void gf_BonusReward (int lp_bonus);
void gf_SpawnCivilians (string lp_sector, int lp_rangeStart, int lp_rangeEnd);
void gf_CreateConvoyEscort (int lp_length);
void gf_MoveConvoyEscort (int lp_start, int lp_end);
int gf_CivilianScale (string lp_section);
void gf_RushBoss ();
void gf_CreateSpawnRegion ();
void gf_SelectRandomZone ();
region gf_GetRushRegion ();
int gf_GetRushTime ();
text gf_GetRushName ();
int gf_GetRushRadius ();
int gf_GetRushTimeScaled ();
bool gf_CheckRushBoss (string lp_boss);
int gf_GetBossCount (string lp_boss);
bool gf_CheckPathability (point lp_point);
void gf_ProgressRound ();
void gf_SendItemsBossRush ();
void gf_UpdateCursor (int lp_index, int lp_player, int lp_listType);
void gf_CreateCursorModel (string lp_model, string lp_gameLink, int lp_player);
void gf_DestroyCursorModel (int lp_player);
void gf_RemoveUpgrades (int lp_player, point lp_point);
void gf_SpawnEnemyType (int lp_player);
void gf_SpawnUndeadGroup (int lp_player);
void gf_SpawnPMCSquad (int lp_player);
void gf_DevelopmentMode ();
void gf_DefaultMOSUI (int lp_player);
point gf_SpawnPoint (int lp_player);
void gf_EnableDeathmatch ();
void gf_Phantom ();
void gf_SpawnCustomLocation ();
void gf_LoadBank (int lp_player);
string gf_BankKey (int lp_index);
bool gf_BankValidated (int lp_player);
string gf_GenerateHash (int lp_player);
int gf_SumXP (int lp_player);
void gf_BankSavingPlayer (bool lp_state, int lp_player);
void gf_BankSavingGlobal (bool lp_state);
void gf_SaveGameStats ();
void gf_CreatePing (point lp_startPoint, point lp_endPoint, int lp_seperation, int lp_scale);
text gf_MOSLevelUnlocked (int lp_mOS, int lp_player);
text gf_MOSLevelName (int lp_mOS, int lp_player);
text gf_MOSLevelNameSDTooltip (int lp_mOS, int lp_player);
int gf_MOSLevelCurrent (int lp_xP);
int gf_MOSLevelNextXP (int lp_mOS, int lp_player);
fixed gf_MOSLevelProgressBarCurrentValue (int lp_mOS, int lp_player);
fixed gf_MOSLevelProgressBarMax (int lp_mOS, int lp_player);
text gf_MOSRankRequirement (int lp_index);
int gf_MOSRankXPRequirement (int lp_index);
bool gf_PlayersMOSUnlocked (int lp_player, int lp_index);
text gf_PlayersCurrentRankAbbr (int lp_player);
text gf_PlayersCurrentRank (int lp_player);
text gf_PlayersNextRank (int lp_player);
int gf_PlayersCurrentRankLevel (int lp_xP);
string gf_PlayersCurrentRankImage (int lp_player);
void gf_XPGainGlobal (int lp_xP, text lp_mission);
void gf_XPGainPlayer (int lp_xP, text lp_mission, int lp_player);
void gf_XPMultiplier (fixed lp_multiplier);
void gf_UpdateSDFrameTooltip (int lp_player);
void gf_HideXPFrame (string lp_key);
bool gf_FirstWinBonus (int lp_player);
void gf_SetupDayBonus (int lp_player);
void gf_FirstWinCheck ();
void gf_XPEvents ();
void gf_AddHeroLevels (int lp_levels);
void gf_AddHalfHeroLevel ();
void gf_AddQuarterHeroLevel ();
void gf_SupplyCacheSpawnItem (string lp_itemUnitType, int lp_number, region lp_cacheSite);
void gf_TallyVotes ();
void gf_UpdateVotesRemainingTooltip ();
void gf_UpdateVoteContainerTooltip (int lp_mode);
void gf_UpdateVoteCount (int lp_index);
void gf_PlayerSlotCheck ();
void gf_SetupMOS (int lp_playerIndex);
void gf_SpawnSoldiers ();
void gf_HeroSelector (point lp_point);
void gf_MOSLobbyPreference ();
void gf_SetupMOSUI ();
void gf_UpdateMOSUI (int lp_index, int lp_player);
void gf_HookSelfCast (int lp_player);
bool gf_LoopEnabled (int lp_loop);
void gf_SpawnLoopManager (int lp_loopType, bool lp_onOff);
void gf_SpawnUnitGroupAsync (string lp_group, bool lp_tCP, fixed lp_delay, fixed lp_wait);
void gf_SendAttackWaveAsync (bool lp_tCP, string lp_group1UnitList, int lp_group1Amount, string lp_group2UnitList, int lp_group2Amount, string lp_group3UnitList, int lp_group3Amount, fixed lp_delay, fixed lp_wait);
void gf_SpawnUnitGroup (string lp_group, bool lp_tCP);
void gf_SpawnUnitGroupAtLocation (string lp_group, point lp_location);
void gf_SpawnPMCUnitGroup (int lp_groupSize, bool lp_tCP);
void gf_SpawnPMCUnitGroupinRegion (int lp_groupSize, region lp_location);
void gf_SpawnUnitsAtLocation (string lp_unit, point lp_point, int lp_amount);
void gf_SendAirAttackWave (string lp_group1UnitList, int lp_group1Amount, string lp_group2UnitList, int lp_group2Amount, string lp_group3UnitList, int lp_group3Amount);
void gf_SendT2AttackWave (bool lp_tCP, string lp_group1UnitList, int lp_group1Amount, string lp_group2UnitList, int lp_group2Amount, string lp_group3UnitList, int lp_group3Amount);
void gf_SendT3AttackWave (bool lp_tCP, string lp_group1UnitList, int lp_group1Amount, string lp_group2UnitList, int lp_group2Amount, string lp_group3UnitList, int lp_group3Amount);
void gf_SpawnZombiesAtSanies ();
void gf_SendTimedBossSpawn (fixed lp_wait, string lp_undeadUnit, trigger lp_trigger);
void gf_SendRandomTimedBossSpawn (fixed lp_wait, trigger lp_trigger);
fixed gf_GetCurrentInfestationRate ();
void gf_UndeadGroupFilter (int lp_groupType, bool lp_groupAllowed);
void gf_StartInfestationLevel ();
void gf_PauseSpawning (bool lp_onOff);
void gf_ModifyUndeadSupplyLimit (fixed lp_value, int lp_operation);
unitgroup gf_SpawnPMCCampaign (int lp_groupSize, region lp_location);
int gf_MainLoopRepeat ();
int gf_CampaignLoopRepeat ();
string gf_CampaignLoopType ();
void gf_SetupDebug ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_ModeController;
trigger gt_ConductKLE;
trigger gt_EnterTown;
trigger gt_MeetWithMayor;
trigger gt_KLEEnd;
trigger gt_SentryItemUse;
trigger gt_SentryTimerExpires;
trigger gt_SentryEnd;
trigger gt_SentrySetup;
trigger gt_SentryPing;
trigger gt_SpawnCaches;
trigger gt_CheckContainmentAuto;
trigger gt_TCPTimerExpires;
trigger gt_TCPContainmentSetup;
trigger gt_PreservetheReserveSetup;
trigger gt_SearchHomeForCivillian;
trigger gt_ReservistEntersBarracks;
trigger gt_ReservistDeath;
trigger gt_EscortCargoTrucksSetup;
trigger gt_EscortCargoTrucksEnd;
trigger gt_CargoTruckMovement;
trigger gt_CargoTruckDeath;
trigger gt_CargoTruckExit;
trigger gt_CargoTruckUnstuck;
trigger gt_EngineerEscortSetup;
trigger gt_EngineerEntersRepairPoint;
trigger gt_EngineerRepairedVehicle;
trigger gt_EngineerDeath;
trigger gt_EngineerMissionEnd;
trigger gt_AkmasRevengeSetup;
trigger gt_MeetFarmerBlackma;
trigger gt_SiloLoop;
trigger gt_ReservistEscort;
trigger gt_FarmerBlackmaDamaged;
trigger gt_FarmerBlackmaDeath;
trigger gt_FoodSampleCollected;
trigger gt_FoodSampleTimerEnd;
trigger gt_MassRecallSetup;
trigger gt_CivilianHouseSearched;
trigger gt_CivilianEntersDasdan;
trigger gt_CiviianChangeOwner;
trigger gt_CivilianDies;
trigger gt_MassRecallTimerEnd;
trigger gt_SpiderEggSetup;
trigger gt_SpiderEggDeath;
trigger gt_SpiderEggTimerEnd;
trigger gt_SpiderKingSetup;
trigger gt_SpiderKingMinimapPing;
trigger gt_SpiderKingDeath;
trigger gt_SpiderKingTimerEnd;
trigger gt_EscalationSetup;
trigger gt_Saber6CommanderDeath;
trigger gt_SquadMovement;
trigger gt_Saber6ArrivesAtMayor;
trigger gt_Saber6SquadDeath;
trigger gt_Saber6ArrivesAtWestTCP;
trigger gt_EscalationEnd;
trigger gt_BulwarkSetup;
trigger gt_BulwarkUnstuck;
trigger gt_SpawnRefugees;
trigger gt_RefugeeDeath;
trigger gt_RefugeeEntersDasdan;
trigger gt_RefugeeEnd;
trigger gt_PestControlSetup;
trigger gt_ApiaryDeath;
trigger gt_ApiaryEnd;
trigger gt_AbdulSetup;
trigger gt_AbdulVehicleRepaired;
trigger gt_AbdulExit;
trigger gt_AbdulEnd;
trigger gt_TheGreatEscapeSetup;
trigger gt_TruckEntersDasdan;
trigger gt_LoadUpCivilians;
trigger gt_CivEntersTruck;
trigger gt_RefugeesRun;
trigger gt_RefugeeExit;
trigger gt_DasdanRefugeeDeath;
trigger gt_TheGreatEscapeEnd;
trigger gt_TrucksStuck;
trigger gt_PartingGiftSetup;
trigger gt_DarreusDeath;
trigger gt_PartingGiftEnd;
trigger gt_Chapter2EndingSetup;
trigger gt_Chapter2End;
trigger gt_TheOldCrewSetup;
trigger gt_PhantomReinforcements;
trigger gt_TheOldCrewEnd;
trigger gt_ForTheRebellionSetup;
trigger gt_Rebel6CommanderDeath;
trigger gt_ForTheRebellionEnd;
trigger gt_WhatsThePlanSetup;
trigger gt_HouseSearched;
trigger gt_PlayerEntersSearchRegion;
trigger gt_PlayerExitsSearchRegion;
trigger gt_WhatsThePlanEnd;
trigger gt_WartimeProductionSetup;
trigger gt_ScrapPartPickup;
trigger gt_WartimeProductionEnd;
trigger gt_BattlebotProduction;
trigger gt_TanksAlotSetup;
trigger gt_TankDeath;
trigger gt_TerminalHacked;
trigger gt_PlayerEntersTerminalRegion;
trigger gt_PlayerExitsTerminalRegion;
trigger gt_TanksALotEnd;
trigger gt_JamItSetup;
trigger gt_RASaboteurDeath;
trigger gt_JamItEnd;
trigger gt_FinaleSetup;
trigger gt_PlayerEntersSiloRegion;
trigger gt_PlayerExitsSiloRegion;
trigger gt_SiloDisarmed;
trigger gt_SiloTimers;
trigger gt_CacumenDeath;
trigger gt_FinaleEnd;
trigger gt_PrologueVoteInit;
trigger gt_PrologueVotes;
trigger gt_PrologueVoteEnd;
trigger gt_CampaignDebugCommands;
trigger gt_CampaignMissionSelector;
trigger gt_CampaignMissionStart;
trigger gt_CampaignSingleMissionChecked;
trigger gt_CampaignSetup;
trigger gt_Survival3Minutes;
trigger gt_Survival6Minutes;
trigger gt_Survival9Minutes;
trigger gt_Survival12Minutes;
trigger gt_Survival15Minutes;
trigger gt_Survival18Minutes;
trigger gt_Survival21Minutes;
trigger gt_Survival24Minutes;
trigger gt_Survival27Minutes;
trigger gt_Survival30Minutes;
trigger gt_Survival35Minutes;
trigger gt_SurvivalEvacPlayer;
trigger gt_SurvivalEnd;
trigger gt_SurvivalMiniBossKilled;
trigger gt_ConsumeLife;
trigger gt_ReturnPoliceToPost;
trigger gt_SurvivalModeSetup;
trigger gt_MissionSurvivalSetup3;
trigger gt_ConvoyUnstuck;
trigger gt_ConvoyDeath;
trigger gt_ConvoyExit;
trigger gt_ConvoyMovement;
trigger gt_ConvoyETATimer;
trigger gt_BruiserBrothers;
trigger gt_SatchelItemUse;
trigger gt_SatchelTimer;
trigger gt_SatchelBeacon;
trigger gt_SatchelDeath;
trigger gt_SatchelDamaged;
trigger gt_MissionSurvivalSetup;
trigger gt_MissionSurvDebugVariant1;
trigger gt_MissionSurvivalSetup2;
trigger gt_MissionSurvDebugVariant2;
trigger gt_TimedRushBossDeath;
trigger gt_RushBossTimer;
trigger gt_RushBossExit;
trigger gt_RushPointAToBTimer;
trigger gt_Decay;
trigger gt_BossRushSetup;
trigger gt_BossRushDebugCommands;
trigger gt_ListSelectedIndex;
trigger gt_SpawnCount;
trigger gt_PlaceUnit;
trigger gt_SpawnUndeadType;
trigger gt_SpawnEnemyGroup;
trigger gt_DestroyCursor;
trigger gt_AbilitiesResearched;
trigger gt_OptionSettings;
trigger gt_AutoRevive;
trigger gt_SandboxSetup;
trigger gt_DeathmatchSetup;
trigger gt_Initialize;
trigger gt_LoadBank;
trigger gt_UpdateStats;
trigger gt_BankBackup;
trigger gt_ClassicCard;
trigger gt_DisplayXP;
trigger gt_ScoreScreenXPCard;
trigger gt_InitSupplyCaches;
trigger gt_FindSupplyCache;
trigger gt_ModeSelection;
trigger gt_VoteTimerTimeout;
trigger gt_ChooseHero;
trigger gt_ReadyButton;
trigger gt_MOSButtons;
trigger gt_AutoSelectMOS;
trigger gt_SpawnLoopMain;
trigger gt_SpawnLoopCampaign;
trigger gt_SpawnLoopT3;
trigger gt_SpawnLoopT1;
trigger gt_SpawnLoopSanies;
trigger gt_SpawnLoopBossRush;
trigger gt_SpawnLoopTCPContainment;
trigger gt_PlagueSpawnLoop;
trigger gt_CampaignRASpawnLoop;
trigger gt_UndeadAIThink;
trigger gt_ScaleDifficulty;
trigger gt_ForceRemoveUndeadUnits;
trigger gt_DevCommands;
trigger gt_Whatami;
trigger gt_DiceRoll;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------
string ge_TCP_Ident (string lp_val) {
         if (lp_val == "TCP1") { return "TCP1"; }
    else if (lp_val == "TCP2") { return "TCP2"; }
    else if (lp_val == "TCP3") { return "TCP3"; }
    else if (lp_val == "Green") { return "Green"; }
    else if (lp_val == "Red") { return "Red"; }
    else if (lp_val == "Neutral") { return "Neutral"; }
    return null;
}

string ge_MissionSurvivalVariant_Ident (string lp_val) {
         if (lp_val == "Variant1") { return "Variant1"; }
    else if (lp_val == "Variant2") { return "Variant2"; }
    return null;
}

string ge_UndeadUnitFilter_Ident (int lp_val) {
         if (lp_val == ge_UndeadUnitFilter_All) { return "All"; }
    else if (lp_val == ge_UndeadUnitFilter_Fliers) { return "Fliers"; }
    else if (lp_val == ge_UndeadUnitFilter_SpecialT2) { return "SpecialT2"; }
    else if (lp_val == ge_UndeadUnitFilter_T1Fliers) { return "T1Fliers"; }
    else if (lp_val == ge_UndeadUnitFilter_T1) { return "T1"; }
    else if (lp_val == ge_UndeadUnitFilter_Cloaked) { return "Cloaked"; }
    else if (lp_val == ge_UndeadUnitFilter_CloakedAir) { return "CloakedAir"; }
    return null;
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
trigger auto_gf_TextActorAnim_Trigger = null;
unit auto_gf_TextActorAnim_lp_unit;
string auto_gf_TextActorAnim_lp_unitStatusFrame;

void gf_TextActorAnim (unit lp_unit, string lp_unitStatusFrame) {
    auto_gf_TextActorAnim_lp_unit = lp_unit;
    auto_gf_TextActorAnim_lp_unitStatusFrame = lp_unitStatusFrame;

    if (auto_gf_TextActorAnim_Trigger == null) {
        auto_gf_TextActorAnim_Trigger = TriggerCreate("auto_gf_TextActorAnim_TriggerFunc");
    }

    TriggerExecute(auto_gf_TextActorAnim_Trigger, false, false);
}

bool auto_gf_TextActorAnim_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_TextActorAnim_lp_unit;
    string lp_unitStatusFrame = auto_gf_TextActorAnim_lp_unitStatusFrame;

    // Variable Declarations
    int lv_hook;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_hook = c_invalidDialogControlId;

    // Implementation
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, lp_unitStatusFrame, lp_unit);
    lv_hook = DialogControlLastCreated();
    while ((UnitIsAlive(lp_unit) == true)) {
        Wait(0.75, c_timeGame);
        DialogControlSendAnimationEvent(lv_hook, PlayerGroupAll(), "Spin");
    }
    lv_hook = c_invalidDialogControlId;
    return true;
}

fixed gf_ScaleSentryTime (fixed lp_baseTime) {
    // Variable Declarations
    int lv_playerCount;
    fixed lv_timeChange;

    // Automatic Variable Declarations
    int auto35D4F079_val;

    // Variable Initialization
    lv_playerCount = PlayerGroupCount(lib90F7C81D_gv_players);
    lv_timeChange = lp_baseTime;

    // Implementation
    if ((lv_playerCount <= 4)) {
        lv_timeChange += 60.0;
        if ((lv_playerCount <= 3)) {
            lv_timeChange += 15.0;
            if ((lv_playerCount <= 2)) {
                lv_timeChange += 15.0;
                if ((lv_playerCount <= 1)) {
                    lv_timeChange += 15.0;
                }
            }
        }
    }
    auto35D4F079_val = lib90F7C81D_gf_GameMode();
    if (auto35D4F079_val == 1) {
        lv_timeChange += 60.0;
    }
    else if (auto35D4F079_val == 2) {
        lv_timeChange += 0.0;
    }
    else if (auto35D4F079_val == 3) {
        lv_timeChange -= 15.0;
    }
    else if (auto35D4F079_val == 4) {
        lv_timeChange -= 30.0;
    }
    else if (auto35D4F079_val == 5) {
        lv_timeChange -= 45.0;
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/AD56969F", "A", FixedToText(lv_timeChange, c_fixedPrecisionAny));
    TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/AD56969F"), gv_debug.lv_gameEvents);
    return lv_timeChange;
}

void gf_SpawnSentrys () {
    // Variable Declarations
    region[6] lv_spawnRegions;
    bool[6] lv_spawnRegionUsed;
    int lv_spawnRandom;
    point lv_spawnPoint;
    int lv_spawnCount;
    int lv_locali;

    // Automatic Variable Declarations
    const int autoC4408751_ae = 5;
    const int autoC4408751_ai = 1;
    int autoA30FE0B4_n;
    int autoA30FE0B4_i;
    unitgroup auto48E48871_g;
    int auto48E48871_u;
    unit auto48E48871_var;
    int autoFA2F2F98_n;
    int autoFA2F2F98_i;
    unitgroup auto303B18EB_g;
    int auto303B18EB_u;
    unit auto303B18EB_var;
    const int autoA075618C_ae = 5;
    const int autoA075618C_ai = 1;
    unitgroup auto86EB7938_g;
    int auto86EB7938_u;
    unit auto86EB7938_var;

    // Variable Initialization
    lv_spawnRandom = RandomInt(0, 5);
    lv_spawnCount = 10;

    // Implementation
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/859592D0"), gv_debug.lv_gameEvents);
    lv_locali = 0;
    for ( ; ( (autoC4408751_ai >= 0 && lv_locali <= autoC4408751_ae) || (autoC4408751_ai < 0 && lv_locali >= autoC4408751_ae) ) ; lv_locali += autoC4408751_ai ) {
        lv_spawnRegions[lv_locali] = RegionFromName(("C.P.Sentry Spawn " + IntToString((lv_locali + 1))));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(lv_spawnRegions[lv_locali]), ColorWithAlpha(0.00, 0.00, 50.20, 49.41), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E0030115"));
        gv_prologue.lv_mission01SentryRegionPing[lv_locali] = PingLastCreated();
        gv_prologue.lv_mission01SentryRegionEmpty[lv_locali] = true;
    }
    while ((lv_spawnCount > 0)) {
        TextExpressionSetToken("Param/Expression/12588A71", "A", IntToText(lv_spawnCount));
        TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/12588A71"), gv_debug.lv_gameEvents);
        while ((lv_spawnRegionUsed[lv_spawnRandom] == true)) {
            TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/F79FB8B5"), gv_debug.lv_gameEvents);
            lv_spawnRandom = RandomInt(0, 5);
        }
        TextExpressionSetToken("Param/Expression/0DF62114", "A", IntToText(lv_spawnRandom));
        TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/0DF62114"), gv_debug.lv_gameEvents);
        lv_spawnRegionUsed[lv_spawnRandom] = true;
        gv_prologue.lv_mission01SentryRegionEmpty[lv_spawnRandom] = false;
        if ((lv_spawnCount >= 3)) {
            TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/4BC389CD"), gv_debug.lv_gameEvents);
            autoFA2F2F98_n = RandomInt(2, 3);
            for (autoFA2F2F98_i = 1; autoFA2F2F98_i <= autoFA2F2F98_n; autoFA2F2F98_i += 1) {
                TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/277D09CA"), gv_debug.lv_gameEvents);
                lv_spawnPoint = RegionRandomPoint(lv_spawnRegions[lv_spawnRandom]);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "VulcanMK88SentryGunItem", 0, 0, lv_spawnPoint);
                UnitGroupAdd(gv_prologue.lv_mission01SentryItemGroup, UnitLastCreated());
                auto303B18EB_g = lib90F7C81D_gv_heroesGroup;
                auto303B18EB_u = UnitGroupCount(auto303B18EB_g, c_unitCountAll);
                for (;; auto303B18EB_u -= 1) {
                    auto303B18EB_var = UnitGroupUnitFromEnd(auto303B18EB_g, auto303B18EB_u);
                    if (auto303B18EB_var == null) { break; }
                    TriggerAddEventUnitRange(gt_SentryPing, UnitRefFromUnit(auto303B18EB_var), UnitLastCreated(), 5.0, true);
                }
                lv_spawnCount -= 1;
            }
        }
        else {
            TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/31A0AB12"), gv_debug.lv_gameEvents);
            autoA30FE0B4_n = lv_spawnCount;
            for (autoA30FE0B4_i = 1; autoA30FE0B4_i <= autoA30FE0B4_n; autoA30FE0B4_i += 1) {
                TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/6CF51CEF"), gv_debug.lv_gameEvents);
                lv_spawnPoint = RegionRandomPoint(lv_spawnRegions[lv_spawnRandom]);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "VulcanMK88SentryGunItem", 0, 0, lv_spawnPoint);
                UnitGroupAdd(gv_prologue.lv_mission01SentryItemGroup, UnitLastCreated());
                lv_spawnCount -= 1;
                auto48E48871_g = lib90F7C81D_gv_heroesGroup;
                auto48E48871_u = UnitGroupCount(auto48E48871_g, c_unitCountAll);
                for (;; auto48E48871_u -= 1) {
                    auto48E48871_var = UnitGroupUnitFromEnd(auto48E48871_g, auto48E48871_u);
                    if (auto48E48871_var == null) { break; }
                    TriggerAddEventUnitRange(gt_SentryPing, UnitRefFromUnit(auto48E48871_var), UnitLastCreated(), 5.0, true);
                }
            }
        }
    }
    lv_locali = 0;
    for ( ; ( (autoA075618C_ai >= 0 && lv_locali <= autoA075618C_ae) || (autoA075618C_ai < 0 && lv_locali >= autoA075618C_ae) ) ; lv_locali += autoA075618C_ai ) {
        if ((gv_prologue.lv_mission01SentryRegionEmpty[lv_locali] == true)) {
            lv_spawnPoint = RegionRandomPoint(lv_spawnRegions[lv_locali]);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "MissionDummyUnit", 0, 0, lv_spawnPoint);
            UnitGroupAdd(gv_prologue.lv_mission01SentryItemGroup, UnitLastCreated());
            auto86EB7938_g = lib90F7C81D_gv_heroesGroup;
            auto86EB7938_u = UnitGroupCount(auto86EB7938_g, c_unitCountAll);
            for (;; auto86EB7938_u -= 1) {
                auto86EB7938_var = UnitGroupUnitFromEnd(auto86EB7938_g, auto86EB7938_u);
                if (auto86EB7938_var == null) { break; }
                TriggerAddEventUnitRange(gt_SentryPing, UnitRefFromUnit(auto86EB7938_var), UnitLastCreated(), 5.0, true);
            }
        }
    }
}

void gf_TOWUpdate (fixed lp_friendlySupply, fixed lp_enemySupply, region lp_triggeringRegion) {
    // Variable Declarations
    fixed lv_tugofWarBarPercent;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((lp_friendlySupply <= 0.0) && (lp_enemySupply <= 0.0))) {
        lv_tugofWarBarPercent = 0.0;
    }
    else {
        lv_tugofWarBarPercent = (100.0*(lp_friendlySupply/(lp_friendlySupply+lp_enemySupply)));
    }
    if ((lp_triggeringRegion == RegionFromId(86))) {
        if ((lp_friendlySupply == 0.0)) {
            lv_tugofWarBarPercent = 1.0;
        }
        gf_TOWPBSet("TCP1", lv_tugofWarBarPercent);
    }
    else if ((lp_triggeringRegion == RegionFromId(85))) {
        if ((lp_friendlySupply == 0.0)) {
            lv_tugofWarBarPercent = 1.0;
        }
        gf_TOWPBSet("TCP2", lv_tugofWarBarPercent);
    }
    else if ((lp_triggeringRegion == RegionFromId(84))) {
        if ((lp_friendlySupply == 0.0)) {
            lv_tugofWarBarPercent = 1.0;
        }
        gf_TOWPBSet("TCP3", lv_tugofWarBarPercent);
    }
}

void gf_TOWPBSet (string lp_tCP, fixed lp_value) {
    // Variable Declarations
    int lv_tCP;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tCP = gf_ReturnTCP(lp_tCP);

    // Implementation
    PlayerScoreValueSetFromFixed(0, (ge_TCP_Ident(lp_tCP)), lp_value);
    gv_tugOfWarPrev[lv_tCP] = lp_value;
}

void gf_TOWPanel (bool lp_state) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_state == true)) {
        if ((gv_tugOfWarPanel == c_invalidDialogControlId)) {
            DialogControlHookupStandard(c_triggerControlTypePanel, "$TugOfWarPanel");
            gv_tugOfWarPanel = DialogControlLastCreated();
            gf_TOWPBSet("TCP1", 50.0);
            gf_TOWPBSet("TCP2", 50.0);
            gf_TOWPBSet("TCP3", 50.0);
            DialogControlSendAnimationEvent(gv_tugOfWarPanel, PlayerGroupAll(), "Display");
        }
    }
    else {
        if ((gv_tugOfWarPanel != c_invalidDialogControlId)) {
            DialogControlSendAnimationEvent(gv_tugOfWarPanel, PlayerGroupAll(), "Hide");
            DialogControlDestroy(gv_tugOfWarPanel);
            gv_tugOfWarPanel = c_invalidDialogControlId;
        }
    }
}

int gf_ReturnTCP (string lp_tCP) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_tCP == "TCP2")) {
        return 1;
    }
    else if ((lp_tCP == "TCP3")) {
        return 2;
    }
    return 0;
}

fixed gf_CalculateUnitGroupSupply (unitgroup lp_unitGroup) {
    // Variable Declarations
    fixed lv_supplyCost;

    // Automatic Variable Declarations
    unitgroup autoD860CAF5_g;
    int autoD860CAF5_u;
    unit autoD860CAF5_var;

    // Variable Initialization

    // Implementation
    if ((UnitGroupCount(lp_unitGroup, c_unitCountAlive) == 0)) {
        return 0.0;
    }
    autoD860CAF5_g = lp_unitGroup;
    autoD860CAF5_u = UnitGroupCount(autoD860CAF5_g, c_unitCountAll);
    for (;; autoD860CAF5_u -= 1) {
        autoD860CAF5_var = UnitGroupUnitFromEnd(autoD860CAF5_g, autoD860CAF5_u);
        if (autoD860CAF5_var == null) { break; }
        lv_supplyCost += AbsF(UnitGetPropertyFixed(autoD860CAF5_var, c_unitPropSuppliesUsed, c_unitPropNormal));
    }
    return lv_supplyCost;
}

text gf_GetReservistText () {
    // Variable Declarations
    int lv_rng;

    // Automatic Variable Declarations
    int auto6EDB0C10_val;

    // Variable Initialization

    // Implementation
    auto6EDB0C10_val = lv_rng;
    if (auto6EDB0C10_val == 0) {
        return StringExternal("Param/Value/F1676F34");
    }
    else if (auto6EDB0C10_val == 1) {
        return StringExternal("Param/Value/49444AFF");
    }
    else if (auto6EDB0C10_val == 2) {
        return StringExternal("Param/Value/E420D2F7");
    }
    else if (auto6EDB0C10_val == 3) {
        return StringExternal("Param/Value/EA844CC9");
    }
    else if (auto6EDB0C10_val == 4) {
        return StringExternal("Param/Value/293364DA");
    }
    else if (auto6EDB0C10_val == 5) {
        return StringExternal("Param/Value/7827E358");
    }
    else if (auto6EDB0C10_val == 6) {
        return StringExternal("Param/Value/FB574CB2");
    }
    else {
        return StringExternal("Param/Value/46841173");
    }
}

void gf_PickReservistLocations () {
    // Variable Declarations
    region lv_spawnRegions;
    bool[6] lv_spawnRegionUsed;
    int lv_spawnRandom;
    int lv_spawnCount;
    int lv_locali;
    region lv_previouslyUsedSpawnLocation;
    int lv_pingCount;

    // Automatic Variable Declarations
    const int autoB7437AB2_ae = 4;
    const int autoB7437AB2_ai = 1;
    int auto093965EA_val;

    // Variable Initialization
    lv_spawnRandom = RandomInt(0, 4);

    // Implementation
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/A9FA34FF"), gv_debug.lv_gameEvents);
    lv_locali = 0;
    for ( ; ( (autoB7437AB2_ai >= 0 && lv_locali <= autoB7437AB2_ae) || (autoB7437AB2_ai < 0 && lv_locali >= autoB7437AB2_ae) ) ; lv_locali += autoB7437AB2_ai ) {
        while ((gv_prologue.lv_mission03ReservistRegionUsed[lv_spawnRandom] == true)) {
            lv_spawnRandom = RandomInt(0, 4);
            Wait(0.0625, c_timeGame);
        }
        TextExpressionSetToken("Param/Expression/48BD1DF5", "A", IntToText(lv_spawnRandom));
        TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/48BD1DF5"), gv_debug.lv_gameEvents);
        gv_prologue.lv_mission03ReservistRegionUsed[lv_spawnRandom] = true;
        if ((lv_locali <= 1)) {
            lv_spawnCount = 1;
        }
        else {
            lv_spawnCount = 2;
        }
        TextExpressionSetToken("Param/Expression/98FF1D54", "A", IntToText(lv_spawnCount));
        TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/98FF1D54"), gv_debug.lv_gameEvents);
        while ((lv_spawnCount > 0) && (lv_previouslyUsedSpawnLocation == lv_spawnRegions)) {
            auto093965EA_val = lv_spawnRandom;
            if (auto093965EA_val == 0) {
                lv_spawnRegions = gv_prologue.lv_mission03ReservistRegions1[RandomInt(0, 4)];
            }
            else if (auto093965EA_val == 1) {
                lv_spawnRegions = gv_prologue.lv_mission03ReservistRegions2[RandomInt(0, 9)];
            }
            else if (auto093965EA_val == 2) {
                lv_spawnRegions = gv_prologue.lv_mission03ReservistRegions3[RandomInt(0, 6)];
            }
            else if (auto093965EA_val == 3) {
                lv_spawnRegions = gv_prologue.lv_mission03ReservistRegions4[RandomInt(0, 9)];
            }
            else if (auto093965EA_val == 4) {
                lv_spawnRegions = gv_prologue.lv_mission03ReservistRegions5[RandomInt(0, 13)];
            }
            else {
            }
            TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/AA72BE28"), gv_debug.lv_gameEvents);
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(lv_spawnRegions), ColorWithAlpha(0.00, 0.00, 50.20, 49.41), 0.0, 270.0);
            PingSetScale(PingLastCreated(), 0.7);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/FF161C52"));
            gv_prologue.lv_mission03ReservistMinimapPing[lv_pingCount] = PingLastCreated();
            libNtve_gf_CreateModelAtPoint("ChallengeShield", RegionGetCenter(lv_spawnRegions));
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.200000");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetVisibility 1");
            gv_prologue.lv_mission03ReservistActor[lv_pingCount] = libNtve_gf_ActorLastCreated();
            gv_prologue.lv_mission03ReservistPickedLocations[lv_pingCount] = lv_spawnRegions;
            lv_previouslyUsedSpawnLocation = lv_spawnRegions;
            lv_pingCount += 1;
            lv_spawnCount -= 1;
        }
    }
}

void gf_CreateCargoTrucks (int lp_spawnGroup) {
    // Variable Declarations
    int lv_routeIndex;
    int lv_index;
    int lv_temp;

    // Automatic Variable Declarations
    const int autoAC34F6EA_ae = 2;
    const int autoAC34F6EA_ai = 1;
    int auto6B02B29E_val;
    const int auto60B8CE85_ae = 2;
    const int auto60B8CE85_ai = 1;
    int autoDF7EA46F_val;
    const int autoDB3B5145_ae = 9;
    const int autoDB3B5145_ai = 1;
    const int autoCFFF97DF_ae = 9;
    const int autoCFFF97DF_ai = 1;
    const int auto6E3B80FA_ae = 9;
    const int auto6E3B80FA_ai = 1;
    const int auto97063B2E_ae = 9;
    const int auto97063B2E_ai = 1;
    const int autoF2F04363_ae = 9;
    const int autoF2F04363_ai = 1;
    const int auto70A5E5E1_ae = 9;
    const int auto70A5E5E1_ai = 1;

    // Variable Initialization

    // Implementation
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/9C824CB6"), gv_debug.lv_gameEvents);
    lv_index = 0;
    for ( ; ( (autoAC34F6EA_ai >= 0 && lv_index <= autoAC34F6EA_ae) || (autoAC34F6EA_ai < 0 && lv_index >= autoAC34F6EA_ae) ) ; lv_index += autoAC34F6EA_ai ) {
        if ((gv_prologue.lv_mission02TCPFailed[lv_index] == false)) {
            auto6B02B29E_val = lv_index;
            if (auto6B02B29E_val == 0) {
                UnitCreate(1, "LMTV", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(49)), 0.0);
            }
            else if (auto6B02B29E_val == 1) {
                UnitCreate(1, "LMTV", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(50)), 0.0);
            }
            else if (auto6B02B29E_val == 2) {
                UnitCreate(1, "LMTV", c_unitCreateIgnorePlacement, 0, RegionGetCenter(RegionFromId(51)), 0.0);
            }
            else {
            }
        }
        else {
            continue;
        }
        lib90F7C81D_gf_StoreMinimapPings(UnitLastCreated(), StringExternal("Param/Value/F382745D"), Color(0.00, 25.10, 0.00), 0.65);
        TriggerAddEventUnitDied(gt_CargoTruckDeath, UnitRefFromUnit(UnitLastCreated()));
        TriggerAddEventUnitRegion(gt_CargoTruckExit, UnitRefFromUnit(UnitLastCreated()), RegionFromId(262), true);
        if ((lp_spawnGroup == 0)) {
            gv_prologue.lv_mission04CargoTruckUnits[lv_index] = UnitLastCreated();
        }
        else {
            gv_prologue.lv_mission04CargoTruckUnits[(lv_index + 3)] = UnitLastCreated();
        }
        UnitGroupAdd(gv_prologue.lv_mission04CargoTruckUnitGroup, UnitLastCreated());
        UnitBehaviorRemove(UnitLastCreated(), "ConvoyAntiStuck", 1);
        UnitBehaviorAdd(UnitLastCreated(), "LMTVAntiStuck", UnitLastCreated(), 1);
    }
    lv_index = 0;
    for ( ; ( (auto60B8CE85_ai >= 0 && lv_index <= auto60B8CE85_ae) || (auto60B8CE85_ai < 0 && lv_index >= auto60B8CE85_ae) ) ; lv_index += auto60B8CE85_ai ) {
        if ((gv_prologue.lv_mission02TCPFailed[lv_index] == false)) {
            if ((lp_spawnGroup == 0)) {
                lv_temp = lv_index;
            }
            else {
                lv_temp = (lv_index + 3);
            }
            autoDF7EA46F_val = lv_temp;
            if (autoDF7EA46F_val == 0) {
                lv_routeIndex = 0;
                for ( ; ( (autoDB3B5145_ai >= 0 && lv_routeIndex <= autoDB3B5145_ae) || (autoDB3B5145_ai < 0 && lv_routeIndex >= autoDB3B5145_ae) ) ; lv_routeIndex += autoDB3B5145_ai ) {
                    UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[lv_temp], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute[lv_routeIndex]), c_orderQueueAddToEnd);
                }
                RegionSetCenter(RegionFromId(134), gv_prologue.lv_WestTCPRoute[9]);
            }
            else if (autoDF7EA46F_val == 1) {
                lv_routeIndex = 0;
                for ( ; ( (autoCFFF97DF_ai >= 0 && lv_routeIndex <= autoCFFF97DF_ae) || (autoCFFF97DF_ai < 0 && lv_routeIndex >= autoCFFF97DF_ae) ) ; lv_routeIndex += autoCFFF97DF_ai ) {
                    UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[lv_temp], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[lv_routeIndex]), c_orderQueueAddToEnd);
                }
                RegionSetCenter(RegionFromId(135), gv_prologue.lv_WestTCPRoute2[9]);
            }
            else if (autoDF7EA46F_val == 2) {
                lv_routeIndex = 0;
                for ( ; ( (auto6E3B80FA_ai >= 0 && lv_routeIndex <= auto6E3B80FA_ae) || (auto6E3B80FA_ai < 0 && lv_routeIndex >= auto6E3B80FA_ae) ) ; lv_routeIndex += auto6E3B80FA_ai ) {
                    UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[lv_temp], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute3[lv_routeIndex]), c_orderQueueAddToEnd);
                }
                RegionSetCenter(RegionFromId(136), gv_prologue.lv_WestTCPRoute3[9]);
            }
            else if (autoDF7EA46F_val == 3) {
                lv_routeIndex = 0;
                for ( ; ( (auto97063B2E_ai >= 0 && lv_routeIndex <= auto97063B2E_ae) || (auto97063B2E_ai < 0 && lv_routeIndex >= auto97063B2E_ae) ) ; lv_routeIndex += auto97063B2E_ai ) {
                    UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[lv_temp], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute[lv_routeIndex]), c_orderQueueAddToEnd);
                }
                RegionSetCenter(RegionFromId(139), gv_prologue.lv_WestTCPRoute[9]);
            }
            else if (autoDF7EA46F_val == 4) {
                lv_routeIndex = 0;
                for ( ; ( (autoF2F04363_ai >= 0 && lv_routeIndex <= autoF2F04363_ae) || (autoF2F04363_ai < 0 && lv_routeIndex >= autoF2F04363_ae) ) ; lv_routeIndex += autoF2F04363_ai ) {
                    UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[lv_temp], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[lv_routeIndex]), c_orderQueueAddToEnd);
                }
                RegionSetCenter(RegionFromId(138), gv_prologue.lv_WestTCPRoute2[9]);
            }
            else if (autoDF7EA46F_val == 5) {
                lv_routeIndex = 0;
                for ( ; ( (auto70A5E5E1_ai >= 0 && lv_routeIndex <= auto70A5E5E1_ae) || (auto70A5E5E1_ai < 0 && lv_routeIndex >= auto70A5E5E1_ae) ) ; lv_routeIndex += auto70A5E5E1_ai ) {
                    UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[lv_temp], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute3[lv_routeIndex]), c_orderQueueAddToEnd);
                }
                RegionSetCenter(RegionFromId(137), gv_prologue.lv_WestTCPRoute3[9]);
            }
            else {
            }
        }
        else {
            continue;
        }
    }
    if ((lp_spawnGroup == 0)) {
        TriggerEnable(gt_CargoTruckMovement, true);
        TriggerEnable(gt_CargoTruckDeath, true);
        TriggerEnable(gt_CargoTruckUnstuck, true);
    }
    gf_CampaignScriptedSpawns(gv_campaign_Missions.lv_mission04OpenBorders);
}

void gf_MoveOutConvoy () {
    // Variable Declarations
    int lv_loopcount;

    // Automatic Variable Declarations
    const int auto45770B27_ae = 5;
    const int auto45770B27_ai = 1;
    const int auto349F3B0D_ae = 1;
    const int auto349F3B0D_ai = -1;
    int auto369BB6C9_val;
    unitgroup auto6657AD42_g;
    int auto6657AD42_u;
    unit auto6657AD42_var;
    unitgroup autoF9C9056F_g;
    int autoF9C9056F_u;
    unit autoF9C9056F_var;

    // Variable Initialization

    // Implementation
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/E34551D7"), gv_debug.lv_gameEvents);
    gv_campaign.lv_missionCompleted += 1;
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
    Wait(5.0, c_timeGame);
    TextExpressionSetToken("Param/Expression/7A73335A", "A", IntToText(gv_prologue.lv_mission04SuccessfullyEscortedTrucks));
    TextExpressionSetToken("Param/Expression/7A73335A", "B", IntToText(gv_prologue.lv_mission04TrucksEscortedToTown));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/7A73335A"), StringExternal("Param/Value/1B56D412"), c_objectiveStateActive, true);
    lib90F7C81D_gv_secondObj = ObjectiveLastCreated();
    RegionSetCenter(RegionFromId(140), gv_prologue.lv_WestTCPRoute2[(gv_prologue.lv_mission04ConvoyCurrentIndex - 0)]);
    lv_loopcount = 0;
    for ( ; ( (auto45770B27_ai >= 0 && lv_loopcount <= auto45770B27_ae) || (auto45770B27_ai < 0 && lv_loopcount >= auto45770B27_ae) ) ; lv_loopcount += auto45770B27_ai ) {
        if ((UnitIsAlive(gv_prologue.lv_mission04CargoTruckUnits[lv_loopcount]) == true)) {
            UnitGroupAdd(gv_prologue.lv_mission04CargoTruckUnitGroup, gv_prologue.lv_mission04CargoTruckUnits[lv_loopcount]);
        }
    }
    lv_loopcount = 6;
    for ( ; ( (auto349F3B0D_ai >= 0 && lv_loopcount <= auto349F3B0D_ae) || (auto349F3B0D_ai < 0 && lv_loopcount >= auto349F3B0D_ae) ) ; lv_loopcount += auto349F3B0D_ai ) {
        auto369BB6C9_val = lv_loopcount;
        if (auto369BB6C9_val == 6) {
            if ((UnitIsAlive(gv_prologue.lv_mission04CargoTruckUnits[5]) == true)) {
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[5], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[(gv_prologue.lv_mission04ConvoyCurrentIndex + 1)]), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[5], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[gv_prologue.lv_mission04ConvoyCurrentIndex]), c_orderQueueAddToEnd);
            }
        }
        else if (auto369BB6C9_val == 5) {
            if ((UnitIsAlive(gv_prologue.lv_mission04CargoTruckUnits[3]) == true)) {
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[3], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[(gv_prologue.lv_mission04ConvoyCurrentIndex + 3)]), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[3], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[(gv_prologue.lv_mission04ConvoyCurrentIndex + 2)]), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[3], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[(gv_prologue.lv_mission04ConvoyCurrentIndex + 1)]), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[3], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[gv_prologue.lv_mission04ConvoyCurrentIndex]), c_orderQueueAddToEnd);
            }
        }
        else if (auto369BB6C9_val == 4) {
            if ((UnitIsAlive(gv_prologue.lv_mission04CargoTruckUnits[4]) == true)) {
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[4], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[(gv_prologue.lv_mission04ConvoyCurrentIndex + 2)]), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[4], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[(gv_prologue.lv_mission04ConvoyCurrentIndex + 1)]), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[4], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[gv_prologue.lv_mission04ConvoyCurrentIndex]), c_orderQueueAddToEnd);
            }
        }
        else if (auto369BB6C9_val == 3) {
            if ((UnitIsAlive(gv_prologue.lv_mission04CargoTruckUnits[2]) == true)) {
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[2], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[(gv_prologue.lv_mission04ConvoyCurrentIndex + 4)]), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[2], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[(gv_prologue.lv_mission04ConvoyCurrentIndex + 3)]), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[2], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[(gv_prologue.lv_mission04ConvoyCurrentIndex + 2)]), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[2], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[(gv_prologue.lv_mission04ConvoyCurrentIndex + 1)]), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[2], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[gv_prologue.lv_mission04ConvoyCurrentIndex]), c_orderQueueAddToEnd);
            }
        }
        else if (auto369BB6C9_val == 2) {
            if ((UnitIsAlive(gv_prologue.lv_mission04CargoTruckUnits[0]) == true)) {
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[0], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[(gv_prologue.lv_mission04ConvoyCurrentIndex + 4)]), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[0], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[(gv_prologue.lv_mission04ConvoyCurrentIndex + 3)]), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[0], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[(gv_prologue.lv_mission04ConvoyCurrentIndex + 2)]), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[0], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[(gv_prologue.lv_mission04ConvoyCurrentIndex + 1)]), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[0], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[gv_prologue.lv_mission04ConvoyCurrentIndex]), c_orderQueueAddToEnd);
            }
        }
        else if (auto369BB6C9_val == 1) {
            if ((UnitIsAlive(gv_prologue.lv_mission04CargoTruckUnits[1]) == true)) {
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[1], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[(gv_prologue.lv_mission04ConvoyCurrentIndex + 4)]), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[1], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[(gv_prologue.lv_mission04ConvoyCurrentIndex + 3)]), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[1], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[(gv_prologue.lv_mission04ConvoyCurrentIndex + 2)]), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[1], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[(gv_prologue.lv_mission04ConvoyCurrentIndex + 1)]), c_orderQueueAddToEnd);
                UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[1], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[gv_prologue.lv_mission04ConvoyCurrentIndex]), c_orderQueueAddToEnd);
            }
        }
        else {
        }
        Wait(1.0, c_timeGame);
    }
    gv_prologue.lv_mission04ConvoyCurrentIndex -= 1;
    TriggerEnable(gt_CargoTruckExit, true);
    auto6657AD42_g = gv_prologue.lv_mission04CargoTruckUnitGroup;
    auto6657AD42_u = UnitGroupCount(auto6657AD42_g, c_unitCountAll);
    for (;; auto6657AD42_u -= 1) {
        auto6657AD42_var = UnitGroupUnitFromEnd(auto6657AD42_g, auto6657AD42_u);
        if (auto6657AD42_var == null) { break; }
        UnitBehaviorAdd(auto6657AD42_var, "ConvoyAntiStuck", auto6657AD42_var, 1);
    }
    autoF9C9056F_g = gv_prologue.lv_mission04CivUnits;
    autoF9C9056F_u = UnitGroupCount(autoF9C9056F_g, c_unitCountAll);
    for (;; autoF9C9056F_u -= 1) {
        autoF9C9056F_var = UnitGroupUnitFromEnd(autoF9C9056F_g, autoF9C9056F_u);
        if (autoF9C9056F_var == null) { break; }
        UnitBehaviorRemove(autoF9C9056F_var, "CivilianWander", 1);
        UnitIssueOrder(autoF9C9056F_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(199))), c_orderQueueReplace);
        UnitWaitUntilIdle(autoF9C9056F_var, true);
        UnitBehaviorAdd(autoF9C9056F_var, "CivilianWander", autoF9C9056F_var, 1);
    }
}

void gf_SetupCargoTruckRoutes () {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoE8762F8E_ae;
    const int autoE8762F8E_ai = 1;
    int autoC6F7EB45_ae;
    const int autoC6F7EB45_ai = 1;
    int auto1A55BB56_ae;
    const int auto1A55BB56_ai = 1;

    // Variable Initialization

    // Implementation
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/4BB79973"), gv_debug.lv_gameEvents);
    gv_prologue.lv_mission04CargoTruckPoints[0] = 26;
    gv_prologue.lv_mission04CargoTruckPoints[1] = 24;
    gv_prologue.lv_mission04CargoTruckPoints[2] = 36;
    autoE8762F8E_ae = gv_prologue.lv_mission04CargoTruckPoints[0];
    lv_index = 0;
    for ( ; ( (autoE8762F8E_ai >= 0 && lv_index <= autoE8762F8E_ae) || (autoE8762F8E_ai < 0 && lv_index >= autoE8762F8E_ae) ) ; lv_index += autoE8762F8E_ai ) {
        gv_prologue.lv_WestTCPRoute[lv_index] = PointFromName(("CPM4-1_" + IntToString((lv_index + 1))));
    }
    autoC6F7EB45_ae = gv_prologue.lv_mission04CargoTruckPoints[1];
    lv_index = 0;
    for ( ; ( (autoC6F7EB45_ai >= 0 && lv_index <= autoC6F7EB45_ae) || (autoC6F7EB45_ai < 0 && lv_index >= autoC6F7EB45_ae) ) ; lv_index += autoC6F7EB45_ai ) {
        gv_prologue.lv_WestTCPRoute2[lv_index] = PointFromName(("CPM4-2_" + IntToString((lv_index + 1))));
    }
    auto1A55BB56_ae = gv_prologue.lv_mission04CargoTruckPoints[2];
    lv_index = 0;
    for ( ; ( (auto1A55BB56_ai >= 0 && lv_index <= auto1A55BB56_ae) || (auto1A55BB56_ai < 0 && lv_index >= auto1A55BB56_ae) ) ; lv_index += auto1A55BB56_ai ) {
        gv_prologue.lv_WestTCPRoute3[lv_index] = PointFromName(("CPM4-3_" + IntToString((lv_index + 1))));
    }
}

trigger auto_gf_PingCargoTruckRoute_Trigger = null;
int auto_gf_PingCargoTruckRoute_lp_route;

void gf_PingCargoTruckRoute (int lp_route) {
    auto_gf_PingCargoTruckRoute_lp_route = lp_route;

    if (auto_gf_PingCargoTruckRoute_Trigger == null) {
        auto_gf_PingCargoTruckRoute_Trigger = TriggerCreate("auto_gf_PingCargoTruckRoute_TriggerFunc");
    }

    TriggerExecute(auto_gf_PingCargoTruckRoute_Trigger, false, false);
}

bool auto_gf_PingCargoTruckRoute_TriggerFunc (bool testConds, bool runActions) {
    int lp_route = auto_gf_PingCargoTruckRoute_lp_route;

    // Variable Declarations
    int lv_currentPingPoint;
    int lv_index;
    int lv_runCount;

    // Automatic Variable Declarations
    int autoC757E70D_ae;
    const int autoC757E70D_ai = 1;
    int autoD6F91D4F_val;

    // Variable Initialization

    // Implementation
    while ((TriggerIsEnabled(gt_CargoTruckDeath) == true) && (gv_prologue.lv_mission04TrucksExitingTown == false)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/966CAA97"), gv_debug.lv_gameEvents);
        lv_currentPingPoint = 0;
        autoC757E70D_ae = (gv_prologue.lv_mission04CargoTruckPoints[lp_route] - 1);
        lv_index = 0;
        for ( ; ( (autoC757E70D_ai >= 0 && lv_index <= autoC757E70D_ae) || (autoC757E70D_ai < 0 && lv_index >= autoC757E70D_ae) ) ; lv_index += autoC757E70D_ai ) {
            autoD6F91D4F_val = lp_route;
            if (autoD6F91D4F_val == 0) {
                if ((lv_runCount >= 2) && ((UnitIsAlive(gv_prologue.lv_mission04CargoTruckUnits[3]) == false) || (libNtve_gf_UnitIsInvulnerable(gv_prologue.lv_mission04CargoTruckUnits[3]) == true))) {
                    break;
                }
                if ((DistanceBetweenPoints(gv_prologue.lv_WestTCPRoute[lv_currentPingPoint], gv_prologue.lv_WestTCPRoute[lv_index]) > 4.0)) {
                    lv_currentPingPoint = lv_index;
                    PingCreate(PlayerGroupAll(), "PingArrow", gv_prologue.lv_WestTCPRoute[lv_currentPingPoint], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0);
                    PingSetScale(PingLastCreated(), 0.5);
                    Wait(0.1, c_timeGame);
                }
            }
            else if (autoD6F91D4F_val == 1) {
                if ((lv_runCount >= 2) && ((UnitIsAlive(gv_prologue.lv_mission04CargoTruckUnits[4]) == false) || (libNtve_gf_UnitIsInvulnerable(gv_prologue.lv_mission04CargoTruckUnits[4]) == true))) {
                    break;
                }
                if ((DistanceBetweenPoints(gv_prologue.lv_WestTCPRoute2[lv_currentPingPoint], gv_prologue.lv_WestTCPRoute2[lv_index]) > 4.0)) {
                    lv_currentPingPoint = lv_index;
                    PingCreate(PlayerGroupAll(), "PingArrow", gv_prologue.lv_WestTCPRoute2[lv_currentPingPoint], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0);
                    PingSetScale(PingLastCreated(), 0.5);
                    Wait(0.1, c_timeGame);
                }
            }
            else if (autoD6F91D4F_val == 2) {
                if ((lv_runCount >= 2) && ((UnitIsAlive(gv_prologue.lv_mission04CargoTruckUnits[5]) == false) || (libNtve_gf_UnitIsInvulnerable(gv_prologue.lv_mission04CargoTruckUnits[5]) == true))) {
                    break;
                }
                if ((DistanceBetweenPoints(gv_prologue.lv_WestTCPRoute3[lv_currentPingPoint], gv_prologue.lv_WestTCPRoute3[lv_index]) > 4.0)) {
                    lv_currentPingPoint = lv_index;
                    PingCreate(PlayerGroupAll(), "PingArrow", gv_prologue.lv_WestTCPRoute3[lv_currentPingPoint], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 4.0);
                    PingSetScale(PingLastCreated(), 0.5);
                    Wait(0.1, c_timeGame);
                }
            }
            else {
            }
        }
        Wait(25.0, c_timeGame);
        lv_runCount += 1;
    }
    return true;
}

trigger auto_gf_StartEngineerRoute_Trigger = null;

void gf_StartEngineerRoute () {
    if (auto_gf_StartEngineerRoute_Trigger == null) {
        auto_gf_StartEngineerRoute_Trigger = TriggerCreate("auto_gf_StartEngineerRoute_TriggerFunc");
    }

    TriggerExecute(auto_gf_StartEngineerRoute_Trigger, false, false);
}

bool auto_gf_StartEngineerRoute_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_min;
    int lv_max;
    int lv_index;

    // Automatic Variable Declarations
    int auto5811B75D_ae;
    const int auto5811B75D_ai = 1;
    int auto58D5E057_ae;
    const int auto58D5E057_ai = 1;

    // Variable Initialization

    // Implementation
    UnitRemove(gv_chapter_1.lv_mission05TextDummy);
    libNtve_gf_KillModel(gv_chapter_1.lv_mission05ActorDummy);
    gv_chapter_1.lv_mission05ActorDummy = null;
    gv_chapter_1.lv_mission05RouteCount += 1;
    gv_chapter_1.lv_mission05EngineerMax = 3;
    if ((gv_chapter_1.lv_mission05RepairStarted == true)) {
        gv_chapter_1.lv_mission05RepairStarted = false;
    }
    if ((gv_chapter_1.lv_mission05RouteCount > 1)) {
        if ((gv_chapter_1.lv_mission05Route == 1)) {
            gv_chapter_1.lv_mission05Route = 2;
            TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/B33F3ECB") + StringExternal("Param/Value/81C8BFEF")), gv_debug.lv_gameEvents);
        }
        else {
            gv_chapter_1.lv_mission05Route = 1;
            TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/A77E0012") + StringExternal("Param/Value/509EBDCD")), gv_debug.lv_gameEvents);
        }
    }
    if ((gv_chapter_1.lv_mission05Route == 1)) {
        lv_index = 0;
        lv_min = 0;
        lv_max = 2;
    }
    else {
        lv_index = 3;
        lv_min = 3;
        lv_max = 5;
    }
    auto5811B75D_ae = lv_max;
    lv_index = lv_min;
    for ( ; ( (auto5811B75D_ai >= 0 && lv_index <= auto5811B75D_ae) || (auto5811B75D_ai < 0 && lv_index >= auto5811B75D_ae) ) ; lv_index += auto5811B75D_ai ) {
        UnitCreate(1, "CivilianEngineer", 0, 0, RegionGetCenter(RegionFromId(62)), 270.0);
        gv_chapter_1.lv_mission05EngineerUnit[lv_index] = UnitLastCreated();
        UnitGroupAdd(gv_chapter_1.lv_mission05EngineerGroup, gv_chapter_1.lv_mission05EngineerUnit[lv_index]);
        lib90F7C81D_gf_StoreMinimapPings(gv_chapter_1.lv_mission05EngineerUnit[lv_index], StringExternal("Param/Value/614CD9B8"), Color(100.00, 100.00, 0.00), 0.5);
        TriggerAddEventUnitDied(gt_EngineerDeath, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(gv_chapter_1.lv_mission05EngineerUnit[lv_index])));
        TriggerAddEventUnitRangePoint(gt_EngineerEntersRepairPoint, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(gv_chapter_1.lv_mission05EngineerUnit[lv_index])), gv_chapter_1.lv_mission05RepairPoint[lv_index], 2.0, true);
        PingSetVisible(gv_chapter_1.lv_mission05MATVLocationPing[lv_index], true);
    }
    Wait(2.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/23ED1B4F"));
    auto58D5E057_ae = lv_max;
    lv_index = lv_min;
    for ( ; ( (auto58D5E057_ai >= 0 && lv_index <= auto58D5E057_ae) || (auto58D5E057_ai < 0 && lv_index >= auto58D5E057_ae) ) ; lv_index += auto58D5E057_ai ) {
        if ((UnitIsAlive(gv_chapter_1.lv_mission05EngineerUnit[lv_index]) == true)) {
            UnitIssueOrder(gv_chapter_1.lv_mission05EngineerUnit[lv_index], OrderTargetingPoint(AbilityCommand("move", 0), gv_chapter_1.lv_mission05RepairPoint[lv_index]), c_orderQueueReplace);
        }
    }
    gf_CampaignScriptedSpawns(gv_campaign_Missions.lv_mission05Engineers);
    return true;
}

void gf_SpawnSpiderEggs (int lp_eggMax, int lp_zones) {
    // Variable Declarations
    bool lv_succeded;
    point lv_where;
    point lv_from;
    int lv_randomRegion;
    int lv_index;

    // Automatic Variable Declarations
    int autoFCB19FA6_n;
    int autoFCB19FA6_i;
    const int auto2CEB0542_n = 8;
    int auto2CEB0542_i;

    // Variable Initialization

    // Implementation
    autoFCB19FA6_n = lp_eggMax;
    for (autoFCB19FA6_i = 1; autoFCB19FA6_i <= autoFCB19FA6_n; autoFCB19FA6_i += 1) {
        lv_succeded = false;
        lv_randomRegion = RandomInt(0, (lp_zones - 1));
        lv_from = RegionGetCenter(RegionFromId(30));
        for (auto2CEB0542_i = 1; auto2CEB0542_i <= auto2CEB0542_n; auto2CEB0542_i += 1) {
            lv_where = RegionRandomPoint(gv_chapter_1.lv_mission08SpiderEggRegion[lv_randomRegion]);
            if ((PointPathingPassable(lv_where) == true) && (PointPathingIsConnected(lv_from, lv_where) == true) && (RegionContainsPoint(RegionFromId(189), lv_where) == false)) {
                lv_succeded = true;
                break;
            }

        }
        if ((lv_succeded == false)) {
            lv_where = lv_from;
        }

        TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/5A1E43F0") + IntToText(lv_randomRegion)), gv_debug.lv_gameEvents);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpiderEgg", c_unitCreateIgnorePlacement, 14, lv_where);
        gv_chapter_1.lv_mission08SpiderEgg[lv_index] = UnitLastCreated();
        UnitGroupAdd(gv_chapter_1.lv_mission08SpiderEggGroup, gv_chapter_1.lv_mission08SpiderEgg[lv_index]);
        lib90F7C81D_gf_StoreMinimapPings(gv_chapter_1.lv_mission08SpiderEgg[lv_index], StringExternal("Param/Value/196F2C3A"), Color(100.00, 0.00, 0.00), 0.75);
        TriggerAddEventUnitDied(gt_SpiderEggDeath, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(gv_chapter_1.lv_mission08SpiderEgg[lv_index])));
        lv_index += 1;
    }
    lv_where = null;
    lv_from = null;
}

void gf_SpawnApiaries () {
    // Variable Declarations
    bool lv_succeded;
    point lv_where;
    point lv_from;

    // Automatic Variable Declarations
    int autoE4E12152_val;
    int auto8927BE2B_n;
    int auto8927BE2B_i;

    // Variable Initialization

    // Implementation
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/CBCB2C31"), gv_debug.lv_gameEvents);
    autoE4E12152_val = lib90F7C81D_gf_GameMode();
    if (autoE4E12152_val == 2) {
    }
    else if (autoE4E12152_val == 3) {
        TechTreeUpgradeAddLevel(14, "SpawnSwarmers", 1);
    }
    else if (autoE4E12152_val == 4) {
        TechTreeUpgradeAddLevel(14, "SpawnSwarmers", 2);
    }
    else if (autoE4E12152_val == 5) {
        TechTreeUpgradeAddLevel(14, "SpawnSwarmers", 2);
    }
    else {
    }
    auto8927BE2B_n = gv_chapter_2.lv_mission12ApiaryCount;
    for (auto8927BE2B_i = 1; auto8927BE2B_i <= auto8927BE2B_n; auto8927BE2B_i += 1) {
        lv_succeded = false;
        lv_from = RegionGetCenter(RegionFromId(47));
        while ((lv_succeded == false)) {
            lv_where = RegionRandomPoint(RegionFromId(200));
            if ((PointPathingPassable(lv_where) == true) && (PointPathingIsConnected(lv_from, lv_where) == true)) {
                lv_succeded = true;
                break;
            }
            else {
                Wait(0.0625, c_timeGame);
            }
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Apiary", c_unitCreateIgnorePlacement, 14, lv_where);
        TriggerAddEventUnitDied(gt_ApiaryDeath, UnitRefFromUnit(UnitLastCreated()));
        UnitGroupAdd(gv_chapter_2.lv_mission12ApiaryGroup, UnitLastCreated());
    }
}

void gf_StartTruckRoute () {
    // Variable Declarations
    int lv_min;
    int lv_max;
    int lv_index;
    int lv_pointIndex;

    // Automatic Variable Declarations
    int autoCFCB9797_ae;
    const int autoCFCB9797_ai = 1;
    const int auto1033A86C_ae = 5;
    const int auto1033A86C_ai = 1;
    unitgroup auto33452498_g;
    int auto33452498_u;
    unit auto33452498_var;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/24287E6D", "A", IntToText(gv_chapter_2.lv_mission14MotorPoolLocation));
    TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/24287E6D"), gv_debug.lv_gameEvents);
    if ((gv_chapter_2.lv_mission14MotorPoolLocation == 0)) {
        lv_index = 0;
        lv_min = 0;
        lv_max = 2;
        lib90F7C81D_gf_ShowHidePathConvoy(true, 0);
        lib90F7C81D_gf_ShowHidePathConvoy(false, 1);
    }
    else {
        lv_index = 3;
        lv_min = 3;
        lv_max = 5;
        lib90F7C81D_gf_ShowHidePathConvoy(false, 0);
        lib90F7C81D_gf_ShowHidePathConvoy(true, 1);
    }
    autoCFCB9797_ae = lv_max;
    lv_index = lv_min;
    for ( ; ( (autoCFCB9797_ai >= 0 && lv_index <= autoCFCB9797_ae) || (autoCFCB9797_ai < 0 && lv_index >= autoCFCB9797_ae) ) ; lv_index += autoCFCB9797_ai ) {
        if ((gv_chapter_1.lv_mission05MATVRepaired[lv_index] == true)) {
            TextExpressionSetToken("Param/Expression/768157DE", "A", IntToText(lv_index));
            TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/768157DE"), gv_debug.lv_gameEvents);
            UnitGroupAdd(gv_chapter_2.lv_mission14TruckUnitGroup, gv_chapter_1.lv_mission05MATVUnit[lv_index]);
            lib90F7C81D_gf_StoreMinimapPings(gv_chapter_1.lv_mission05MATVUnit[lv_index], StringExternal("Param/Value/6A5F10DE"), Color(100.00, 100.00, 0.00), 0.5);
            UnitBehaviorRemove(gv_chapter_1.lv_mission05MATVUnit[lv_index], "Unpowered", 1);
            lv_pointIndex = 0;
            for ( ; ( (auto1033A86C_ai >= 0 && lv_pointIndex <= auto1033A86C_ae) || (auto1033A86C_ai < 0 && lv_pointIndex >= auto1033A86C_ae) ) ; lv_pointIndex += auto1033A86C_ai ) {
                if ((gv_chapter_2.lv_mission14MotorPoolLocation == 0) && ((lv_pointIndex - lv_index) >= 0)) {
                    if ((lv_pointIndex == 0)) {
                        UnitIssueOrder(gv_chapter_1.lv_mission05MATVUnit[lv_index], OrderTargetingPoint(AbilityCommand("move", 0), gv_chapter_2.lv_mission14WestRoute0Points[(lv_pointIndex - lv_index)]), c_orderQueueReplace);
                    }
                    else {
                        UnitIssueOrder(gv_chapter_1.lv_mission05MATVUnit[lv_index], OrderTargetingPoint(AbilityCommand("move", 0), gv_chapter_2.lv_mission14WestRoute0Points[(lv_pointIndex - lv_index)]), c_orderQueueAddToEnd);
                    }
                }
                else if ((gv_chapter_2.lv_mission14MotorPoolLocation == 1) && ((lv_pointIndex - lv_index) >= -3)) {
                    if ((lv_pointIndex == 0)) {
                        UnitIssueOrder(gv_chapter_1.lv_mission05MATVUnit[lv_index], OrderTargetingPoint(AbilityCommand("move", 0), gv_chapter_2.lv_mission14NorthRoute1Points[(lv_pointIndex - (lv_index - 3))]), c_orderQueueReplace);
                    }
                    else {
                        UnitIssueOrder(gv_chapter_1.lv_mission05MATVUnit[lv_index], OrderTargetingPoint(AbilityCommand("move", 0), gv_chapter_2.lv_mission14NorthRoute1Points[(lv_pointIndex - (lv_index - 3))]), c_orderQueueAddToEnd);
                    }
                }
            }
        }
    }
    auto33452498_g = gv_chapter_2.lv_mission14TruckUnitGroup;
    auto33452498_u = UnitGroupCount(auto33452498_g, c_unitCountAll);
    for (;; auto33452498_u -= 1) {
        auto33452498_var = UnitGroupUnitFromEnd(auto33452498_g, auto33452498_u);
        if (auto33452498_var == null) { break; }
        TriggerAddEventUnitRegion(gt_TruckEntersDasdan, UnitRefFromUnit(auto33452498_var), RegionFromId(47), true);
        TriggerAddEventUnitRegion(gt_RefugeeExit, UnitRefFromUnit(auto33452498_var), RegionFromId(6), true);
        TriggerAddEventUnitDied(gt_DasdanRefugeeDeath, UnitRefFromUnit(auto33452498_var));
    }
    if ((gv_chapter_2.lv_mission14MotorPoolLocation == 0)) {
        gv_chapter_2.lv_mission14MotorPoolLocation = 1;
    }
    else {
        gv_chapter_2.lv_mission14MotorPoolLocation = 0;
    }
    TriggerEnable(gt_TruckEntersDasdan, true);
}

void gf_Chapter3Items () {
    // Variable Declarations
    int lv_countRifle;
    int lv_countAutoRifle;
    int lv_countShotgun;
    int lv_countFlamer;
    int lv_countMarksmen;
    int lv_countPlasma;

    // Automatic Variable Declarations
    unitgroup auto462352FD_g;
    int auto462352FD_u;
    unit auto462352FD_var;
    unitgroup auto5E490BC6_g;
    int auto5E490BC6_u;
    unit auto5E490BC6_var;
    int auto0F2D80B0_val;
    int auto9FD7AB42_val;
    int auto094B0845_val;
    int auto2862CA90_val;
    int auto91B8D070_val;
    int auto2770C048_val;

    // Variable Initialization

    // Implementation
    auto462352FD_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto462352FD_u = UnitGroupCount(auto462352FD_g, c_unitCountAll);
    for (;; auto462352FD_u -= 1) {
        auto462352FD_var = UnitGroupUnitFromEnd(auto462352FD_g, auto462352FD_u);
        if (auto462352FD_var == null) { break; }
        UnitRemove(auto462352FD_var);
    }
    auto5E490BC6_g = lib90F7C81D_gv_heroesGroup;
    auto5E490BC6_u = UnitGroupCount(auto5E490BC6_g, c_unitCountAll);
    for (;; auto5E490BC6_u -= 1) {
        auto5E490BC6_var = UnitGroupUnitFromEnd(auto5E490BC6_g, auto5E490BC6_u);
        if (auto5E490BC6_var == null) { break; }
        if (((UnitGetType(auto5E490BC6_var) == "NewRifleman") || (UnitGetType(auto5E490BC6_var) == "CombatMedic") || (UnitGetType(auto5E490BC6_var) == "CavalryScout") || (UnitGetType(auto5E490BC6_var) == "PlatoonLeader") || (UnitGetType(auto5E490BC6_var) == "JavelinGunner"))) {
            auto0F2D80B0_val = RandomInt(0, 10);
            if (auto0F2D80B0_val == 1) {
                lib90F7C81D_gf_AirDropItemToRegionNEW("HK42", RegionFromId(266), 1, 1, 1, 1);
            }
            else if (auto0F2D80B0_val == 2) {
                lib90F7C81D_gf_AirDropItemToRegionNEW("M5MAR", RegionFromId(266), 1, 1, 1, 1);
            }
            else if (auto0F2D80B0_val == 3) {
                lib90F7C81D_gf_AirDropItemToRegionNEW("USMCR", RegionFromId(266), 1, 1, 1, 1);
            }
            else if (auto0F2D80B0_val == 4) {
                lib90F7C81D_gf_AirDropItemToRegionNEW("SOFAR", RegionFromId(266), 1, 1, 1, 1);
            }
            else {
                lib90F7C81D_gf_AirDropItemToRegionNEW("StynerBR2", RegionFromId(266), 1, 1, 1, 1);
            }
        }
        else if (((UnitGetType(auto5E490BC6_var) == "AutomaticRifleman"))) {
            auto9FD7AB42_val = RandomInt(0, 2);
            if (auto9FD7AB42_val == 1) {
                lib90F7C81D_gf_AirDropItemToRegionNEW("M41SAW", RegionFromId(266), 1, 1, 1, 1);
            }
            else {
                lib90F7C81D_gf_AirDropItemToRegionNEW("M241MMG", RegionFromId(266), 1, 1, 1, 1);
            }
        }
        else if (((UnitGetType(auto5E490BC6_var) == "CombatEngineer") || (UnitGetType(auto5E490BC6_var) == "SFAAT"))) {
            auto094B0845_val = RandomInt(0, 2);
            if (auto094B0845_val == 1) {
                lib90F7C81D_gf_AirDropItemToRegionNEW("M1014", RegionFromId(266), 1, 1, 1, 1);
            }
            else {
                lib90F7C81D_gf_AirDropItemToRegionNEW("W1200", RegionFromId(266), 1, 1, 1, 1);
            }
        }
        else if (((UnitGetType(auto5E490BC6_var) == "SquadDesignatedMarksman"))) {
            auto2862CA90_val = RandomInt(0, 2);
            if (auto2862CA90_val == 1) {
                lib90F7C81D_gf_AirDropItemToRegionNEW("M92Torrent", RegionFromId(266), 1, 1, 1, 1);
            }
            else {
                lib90F7C81D_gf_AirDropItemToRegionNEW("Mk14", RegionFromId(266), 1, 1, 1, 1);
            }
        }
        else if (((UnitGetType(auto5E490BC6_var) == "Flamethrower"))) {
            lib90F7C81D_gf_AirDropItemToRegionNEW("M9Flamethrower", RegionFromId(266), 1, 1, 1, 1);
        }
        else if (((UnitGetType(auto5E490BC6_var) == "GhostMOS"))) {
            auto91B8D070_val = RandomInt(0, 2);
            if (auto91B8D070_val == 1) {
                lib90F7C81D_gf_AirDropItemToRegionNEW("XR42", RegionFromId(266), 1, 1, 1, 1);
            }
            else {
                lib90F7C81D_gf_AirDropItemToRegionNEW("IPR", RegionFromId(266), 1, 1, 1, 1);
            }
        }
        else if (((UnitGetType(auto5E490BC6_var) == "Cyborg"))) {
            auto2770C048_val = RandomInt(0, 2);
            if (auto2770C048_val == 1) {
                lib90F7C81D_gf_AirDropItemToRegionNEW("DeathMachine", RegionFromId(266), 1, 1, 1, 1);
            }
            else {
                lib90F7C81D_gf_AirDropItemToRegionNEW("M935Minigun", RegionFromId(266), 1, 1, 1, 1);
            }
        }
    }
    lib90F7C81D_gf_SpawnItemAtLocationNEW("AmmoCase", 100, RegionRandomPoint(RegionFromId(266)), 100, 1, 2);
    lib90F7C81D_gf_SpawnItemAtLocationNEW("AmmoCase", 50, RegionRandomPoint(RegionFromId(266)), 100, 1, 2);
    lib90F7C81D_gf_SpawnItemAtLocationNEW("Magazines", 100, RegionRandomPoint(RegionFromId(266)), 100, 1, 4);
    lib90F7C81D_gf_SpawnItemAtLocationNEW("Magazines", 50, RegionRandomPoint(RegionFromId(266)), 100, 1, 5);
    lib90F7C81D_gf_SpawnItemAtLocationNEW("QuikClot", 100, RegionRandomPoint(RegionFromId(266)), 100, 1, 1);
    lib90F7C81D_gf_SpawnItemAtLocationNEW("QuikClot", 50, RegionRandomPoint(RegionFromId(266)), 100, 1, 1);
    lib90F7C81D_gf_SpawnItemAtLocationNEW("FragGrenade", 100, RegionRandomPoint(RegionFromId(266)), 100, 1, 1);
    lib90F7C81D_gf_SpawnItemAtLocationNEW("FragGrenade", 50, RegionRandomPoint(RegionFromId(266)), 100, 1, 1);
    lib90F7C81D_gf_SpawnItemAtLocationNEW("SmokeGrenadeItem", 100, RegionRandomPoint(RegionFromId(266)), 100, 1, 1);
    lib90F7C81D_gf_SpawnItemAtLocationNEW("SmokeGrenadeItem", 50, RegionRandomPoint(RegionFromId(266)), 100, 1, 1);
    lib90F7C81D_gf_SpawnItemAtLocationNEW("FlareGun", 100, RegionRandomPoint(RegionFromId(266)), 100, 1, 1);
    lib90F7C81D_gf_SpawnItemAtLocationNEW("FlareGun", 50, RegionRandomPoint(RegionFromId(266)), 100, 1, 1);
    lib90F7C81D_gf_SpawnItemAtLocationNEW("GroundFlareItem", 100, RegionRandomPoint(RegionFromId(266)), 100, 1, 1);
    lib90F7C81D_gf_SpawnItemAtLocationNEW("GroundFlareItem", 50, RegionRandomPoint(RegionFromId(266)), 100, 1, 1);
    lib90F7C81D_gf_SpawnItemAtLocationNEW("Flashlight", 25, RegionRandomPoint(RegionFromId(266)), 100, 1, 1);
    lib90F7C81D_gf_SpawnItemAtLocationNEW("Binoculars", 25, RegionRandomPoint(RegionFromId(266)), 100, 1, 1);
    lib90F7C81D_gf_SpawnItemAtLocationNEW("FirstAidKit", 100, RegionRandomPoint(RegionFromId(266)), 100, 1, 2);
    lib90F7C81D_gf_SpawnItemAtLocationNEW("AdvancedFirstAidKit", 25, RegionRandomPoint(RegionFromId(266)), 100, 1, 2);
    lib90F7C81D_gf_SpawnItemAtLocationNEW("AntiVeninShot", 100, RegionRandomPoint(RegionFromId(266)), 100, 1, 1);
    lib90F7C81D_gf_SpawnItemAtLocationNEW("AdvancedAntiVeninShot", 25, RegionRandomPoint(RegionFromId(266)), 100, 1, 1);
    lib90F7C81D_gf_SpawnItemAtLocationNEW("ClaymoreItem", 17, RegionRandomPoint(RegionFromId(266)), 100, 1, 2);
}

void gf_OutlawPhantom () {
    // Variable Declarations
    unit lv_phantom;
    int lv_index;

    // Automatic Variable Declarations
    playergroup auto4AC8D2E8_g;
    int auto4AC8D2E8_var;
    unitgroup autoFB43533C_g;
    int autoFB43533C_u;
    unit autoFB43533C_var;
    int auto150DCA1B_n;
    int auto150DCA1B_i;

    // Variable Initialization

    // Implementation
    auto4AC8D2E8_g = lib90F7C81D_gv_players;
    auto4AC8D2E8_var = -1;
    while (true) {
        auto4AC8D2E8_var = PlayerGroupNextPlayer(auto4AC8D2E8_g, auto4AC8D2E8_var);
        if (auto4AC8D2E8_var < 0) { break; }
        CameraRestore(auto4AC8D2E8_var, 0.0, -1, 10.0);
        CameraLockInput(auto4AC8D2E8_var, true);
    }
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/0B2FE8CC"));
    libNtve_gf_UnitCreateFacingPoint(1, "ColonistShipFlying", 0, 13, PointFromId(705303440), PointFromId(1254458203));
    lv_phantom = UnitLastCreated();
    UnitSetTeamColorIndex(lv_phantom, 14);
    libNtve_gf_MakeUnitInvulnerable(lv_phantom, true);
    UnitIssueOrder(lv_phantom, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), PointFromId(1254458203)), c_orderQueueReplace);
    UnitSetHeight(lv_phantom, 3.0, 3.0);
    libNtve_gf_ShowHideUnit(lv_phantom, false);
    Wait(0.5, c_timeGame);
    libNtve_gf_ShowHideUnit(lv_phantom, true);
    Wait(12.0, c_timeGame);
    autoFB43533C_g = lib90F7C81D_gv_heroesGroup;
    autoFB43533C_u = UnitGroupCount(autoFB43533C_g, c_unitCountAll);
    for (;; autoFB43533C_u -= 1) {
        autoFB43533C_var = UnitGroupUnitFromEnd(autoFB43533C_g, autoFB43533C_u);
        if (autoFB43533C_var == null) { break; }
        PlayerCreateEffectUnit(0, "ReviveModifyUnit", autoFB43533C_var);
        Wait(0.0625, c_timeGame);
        UnitSetPosition(autoFB43533C_var, RegionRandomPoint(RegionFromId(43)), false);
        UnitSetPropertyFixed(autoFB43533C_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(autoFB43533C_var, c_unitPropEnergyPercent, 100.0);
        CameraLockInput(UnitGetOwner(autoFB43533C_var), false);
        if ((UnitGetType(autoFB43533C_var) == "SFAAT")) {
            TextExpressionSetToken("Param/Expression/8B286E7B", "A", IntToText(gv_chapter_2.lv_mission16SnapshotLN));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/8B286E7B"), true);
            RegionSetCenter(RegionFromId(62), RegionGetCenter(RegionFromId(30)));
            auto150DCA1B_n = gv_chapter_2.lv_mission16SnapshotLN;
            for (auto150DCA1B_i = 1; auto150DCA1B_i <= auto150DCA1B_n; auto150DCA1B_i += 1) {
                PlayerCreateEffectUnit(UnitGetOwner(autoFB43533C_var), "RecruitLNDummy", autoFB43533C_var);
            }
        }
    }
    lib90F7C81D_gv_gameOverOverride = false;
    lib90F7C81D_gf_LNRemoveCombatInexperience();
    Wait(2.0, c_timeGame);
    gf_SpawnOutlawSoldiers(2);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(lv_phantom, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_phantom), "Fly", "Land Forward", 0, c_animTimeDefault);
    UnitIssueOrder(lv_phantom, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(12))), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    UnitRemove(lv_phantom);
    lv_phantom = null;
}

trigger auto_gf_CreateCrashSite_Trigger = null;

void gf_CreateCrashSite () {
    if (auto_gf_CreateCrashSite_Trigger == null) {
        auto_gf_CreateCrashSite_Trigger = TriggerCreate("auto_gf_CreateCrashSite_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateCrashSite_Trigger, false, false);
}

bool auto_gf_CreateCrashSite_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto39531A21_g;
    int auto39531A21_var;

    // Implementation
    auto39531A21_g = lib90F7C81D_gv_players;
    auto39531A21_var = -1;
    while (true) {
        auto39531A21_var = PlayerGroupNextPlayer(auto39531A21_g, auto39531A21_var);
        if (auto39531A21_var < 0) { break; }
        VisRevealArea(auto39531A21_var, RegionFromId(263), 10.0, false);
    }
    MinimapPing(PlayerGroupAll(), RegionGetCenter(RegionFromId(263)), 4.0, Color(100.00, 0.00, 0.00));
    SoundPlayForPlayer(SoundLink("Doodad_CharCrashingDebrisDrop", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 2.0, c_soundOffsetEnd);
    SoundPlayForPlayer(SoundLink("Banshee_Help", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    libNtve_gf_CreateModelAtPoint("WreckedBattlecruiserHeliosFinal", PointFromId(1370697770));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetFacing 180.000000");
    ActorSend(libNtve_gf_ActorLastCreated(), "AnimPlay Death Death PlayForever,NonLooping");
    SoundPlayForPlayer(SoundLink("SS_Battlecruiser_Explode", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    return true;
}

void gf_SpawnOutlawSoldiers (int lp_groupSpawnCount) {
    // Variable Declarations
    int lv_loopCount;
    unitgroup lv_uSMC;
    unit lv_marineUnit;

    // Automatic Variable Declarations
    int auto2AC5A2D9_ae;
    const int auto2AC5A2D9_ai = 1;
    const int autoA1CDFF42_n = 2;
    int autoA1CDFF42_i;
    unitgroup auto58BAA3DC_g;
    int auto58BAA3DC_u;
    unitgroup auto19E67DC2_g;
    int auto19E67DC2_u;

    // Variable Initialization
    lv_uSMC = UnitGroupEmpty();

    // Implementation
    auto2AC5A2D9_ae = lp_groupSpawnCount;
    lv_loopCount = 1;
    for ( ; ( (auto2AC5A2D9_ai >= 0 && lv_loopCount <= auto2AC5A2D9_ae) || (auto2AC5A2D9_ai < 0 && lv_loopCount >= auto2AC5A2D9_ae) ) ; lv_loopCount += auto2AC5A2D9_ai ) {
        for (autoA1CDFF42_i = 1; autoA1CDFF42_i <= autoA1CDFF42_n; autoA1CDFF42_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryRifleman", 0, 13, RegionRandomPoint(RegionFromId(30)));
            UnitGroupAdd(lv_uSMC, UnitLastCreated());
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryAutomaticRifleman", 0, 13, RegionRandomPoint(RegionFromId(30)));
        UnitGroupAdd(lv_uSMC, UnitLastCreated());
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryMedic", 0, 13, RegionRandomPoint(RegionFromId(30)));
        UnitGroupAdd(lv_uSMC, UnitLastCreated());
        if ((ModI(lv_loopCount, 2) == 1)) {
            auto19E67DC2_g = lv_uSMC;
            auto19E67DC2_u = UnitGroupCount(auto19E67DC2_g, c_unitCountAll);
            for (;; auto19E67DC2_u -= 1) {
                lv_marineUnit = UnitGroupUnitFromEnd(auto19E67DC2_g, auto19E67DC2_u);
                if (lv_marineUnit == null) { break; }
                UnitIssueOrder(lv_marineUnit, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(209))), c_orderQueueReplace);
            }
        }
        else {
            auto58BAA3DC_g = lv_uSMC;
            auto58BAA3DC_u = UnitGroupCount(auto58BAA3DC_g, c_unitCountAll);
            for (;; auto58BAA3DC_u -= 1) {
                lv_marineUnit = UnitGroupUnitFromEnd(auto58BAA3DC_g, auto58BAA3DC_u);
                if (lv_marineUnit == null) { break; }
                UnitIssueOrder(lv_marineUnit, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(210))), c_orderQueueReplace);
            }
        }
        UnitGroupAddUnitGroup(gv_chapter_3.lv_mission17USMCGroup, lv_uSMC);
        RefreshUnitGroup(lv_uSMC);
        Wait(0.125, c_timeGame);
    }
}

void gf_SpawnRAPowerStationDefense () {
    // Variable Declarations
    int lv_tankSpawnLocation;
    int lv_tankSpawnCount;
    unitgroup lv_rAUnitsSpawned;
    int lv_spawnCounter;

    // Automatic Variable Declarations
    const int auto1B2B93D0_ae = 36;
    const int auto1B2B93D0_ai = 1;
    const int auto7673B56D_ae = 12;
    const int auto7673B56D_ai = 1;
    const int auto53542079_ae = 12;
    const int auto53542079_ai = 1;
    unitgroup autoDA66D797_g;
    int autoDA66D797_u;
    unit autoDA66D797_var;

    // Variable Initialization
    lv_tankSpawnLocation = RandomInt(1, 5);
    lv_rAUnitsSpawned = UnitGroupEmpty();

    // Implementation
    while ((lv_tankSpawnCount < gv_chapter_3.lv_mission21TankSpawnCount)) {
        if ((gv_chapter_3.lv_mission21TankSpawnRegion[lv_tankSpawnLocation] == false)) {
            lv_tankSpawnCount += 1;
            gv_chapter_3.lv_mission21TankSpawnRegion[lv_tankSpawnLocation] = true;
            if ((lv_tankSpawnCount == 5)) {
                UnitCreate(1, "M1Abrams", 0, 15, RegionRandomPoint(RegionFromName(("Campaign M21 Defense" + IntToString(lv_tankSpawnLocation)))), 270.0);
            }
            else {
                UnitCreate(1, "M2BradleyIFV", 0, 15, RegionRandomPoint(RegionFromName(("Campaign M21 Defense" + IntToString(lv_tankSpawnLocation)))), 270.0);
            }
            UnitGroupAdd(lv_rAUnitsSpawned, UnitLastCreated());
            TriggerAddEventUnitDied(gt_TankDeath, UnitRefFromUnit(UnitLastCreated()));
        }
        lv_tankSpawnLocation = RandomInt(1, 5);
        Wait(0.0625, c_timeGame);
    }
    if ((lib90F7C81D_gf_GetSkillLevel() >= 1)) {
        lv_spawnCounter = 1;
        for ( ; ( (auto1B2B93D0_ai >= 0 && lv_spawnCounter <= auto1B2B93D0_ae) || (auto1B2B93D0_ai < 0 && lv_spawnCounter >= auto1B2B93D0_ae) ) ; lv_spawnCounter += auto1B2B93D0_ai ) {
            lv_tankSpawnLocation = RandomInt(1, 5);
            UnitCreate(1, lib90F7C81D_gf_RandomPMC(), 0, 15, RegionRandomPoint(RegionFromName(("Campaign M21 Defense" + IntToString(lv_tankSpawnLocation)))), 270.0);
            UnitGroupAdd(lv_rAUnitsSpawned, UnitLastCreated());
            lib90F7C81D_gf_ResetPMCPool();
        }
    }
    if ((lib90F7C81D_gf_GetSkillLevel() >= 2)) {
        lv_spawnCounter = 1;
        for ( ; ( (auto7673B56D_ai >= 0 && lv_spawnCounter <= auto7673B56D_ae) || (auto7673B56D_ai < 0 && lv_spawnCounter >= auto7673B56D_ae) ) ; lv_spawnCounter += auto7673B56D_ai ) {
            lv_tankSpawnLocation = RandomInt(1, 5);
            if ((lv_spawnCounter <= 4)) {
                UnitCreate(1, "InfantrySniper", 0, 15, RegionRandomPoint(RegionFromName(("Campaign M21 Defense" + IntToString(lv_tankSpawnLocation)))), 270.0);
            }
            else {
                UnitCreate(1, lib90F7C81D_gf_RandomPMC(), 0, 15, RegionRandomPoint(RegionFromName(("Campaign M21 Defense" + IntToString(lv_tankSpawnLocation)))), 270.0);
            }
            UnitGroupAdd(lv_rAUnitsSpawned, UnitLastCreated());
            lib90F7C81D_gf_ResetPMCPool();
        }
    }
    if ((lib90F7C81D_gf_GetSkillLevel() >= 3)) {
        lv_spawnCounter = 1;
        for ( ; ( (auto53542079_ai >= 0 && lv_spawnCounter <= auto53542079_ae) || (auto53542079_ai < 0 && lv_spawnCounter >= auto53542079_ae) ) ; lv_spawnCounter += auto53542079_ai ) {
            lv_tankSpawnLocation = RandomInt(1, 5);
            if ((lv_spawnCounter <= 2)) {
                UnitCreate(1, "InfantryForwardObserver", 0, 15, RegionRandomPoint(RegionFromId(239)), 270.0);
            }
            else if ((lv_spawnCounter > 2) && (lv_spawnCounter <= 4)) {
                UnitCreate(1, "InfantrySniper", 0, 15, RegionRandomPoint(RegionFromName(("Campaign M21 Defense" + IntToString(lv_tankSpawnLocation)))), 270.0);
            }
            else if (true) {
                UnitCreate(1, lib90F7C81D_gf_RandomPMC(), 0, 15, RegionRandomPoint(RegionFromName(("Campaign M21 Defense" + IntToString(lv_tankSpawnLocation)))), 270.0);
            }
            UnitGroupAdd(lv_rAUnitsSpawned, UnitLastCreated());
            lib90F7C81D_gf_ResetPMCPool();
        }
    }
    autoDA66D797_g = lv_rAUnitsSpawned;
    autoDA66D797_u = UnitGroupCount(autoDA66D797_g, c_unitCountAll);
    for (;; autoDA66D797_u -= 1) {
        autoDA66D797_var = UnitGroupUnitFromEnd(autoDA66D797_g, autoDA66D797_u);
        if (autoDA66D797_var == null) { break; }
        if ((UnitHasBehavior2(autoDA66D797_var, "RASquadLeader") == false)) {
            UnitSetInfoText(autoDA66D797_var, StringExternal("Param/Value/41BFD43D"), StringToText(""), StringToText(""));
        }
        UnitAbilityEnable(autoDA66D797_var, "PMCIssueOrderAttackWhenIdle", false);
    }
    UnitGroupAddUnitGroup(lib90F7C81D_gv_rAGroup, lv_rAUnitsSpawned);
}

void gf_SpawnRASaboteurs () {
    // Variable Declarations
    int lv_index;
    unitgroup lv_rAUnits;
    unitgroup lv_rASaboteurs;

    // Automatic Variable Declarations
    const int autoD2C7DB62_ae = 4;
    const int autoD2C7DB62_ai = 1;
    const int auto9A16944D_n = 4;
    int auto9A16944D_i;
    const int autoFAA97D50_n = 2;
    int autoFAA97D50_i;
    unitgroup auto1693C966_g;
    int auto1693C966_u;
    unit auto1693C966_var;
    unitgroup auto8831CE03_g;
    int auto8831CE03_u;
    unit auto8831CE03_var;

    // Variable Initialization
    lv_rAUnits = UnitGroupEmpty();
    lv_rASaboteurs = UnitGroupEmpty();

    // Implementation
    lv_index = 1;
    for ( ; ( (autoD2C7DB62_ai >= 0 && lv_index <= autoD2C7DB62_ae) || (autoD2C7DB62_ai < 0 && lv_index >= autoD2C7DB62_ae) ) ; lv_index += autoD2C7DB62_ai ) {
        UnitCreate(1, "InfantryRifleman", 0, 15, RegionGetCenter(RegionFromName(("Campaign M22 Saboteur" + IntToString(lv_index)))), 270.0);
        UnitGroupAdd(lv_rASaboteurs, UnitLastCreated());
        TriggerAddEventUnitDied(gt_RASaboteurDeath, UnitRefFromUnit(UnitLastCreated()));
        if ((lib90F7C81D_gf_GetSkillLevel() >= 1)) {
            for (auto9A16944D_i = 1; auto9A16944D_i <= auto9A16944D_n; auto9A16944D_i += 1) {
                UnitCreate(1, "InfantryRifleman", 0, 15, RegionRandomPoint(RegionFromName(("Campaign M22 Saboteur" + IntToString(lv_index)))), 270.0);
                UnitGroupAdd(lv_rAUnits, UnitLastCreated());
            }
        }
        if ((lib90F7C81D_gf_GetSkillLevel() >= 2)) {
            UnitCreate(1, "InfantryAutomaticRifleman", 0, 15, RegionRandomPoint(RegionFromName(("Campaign M22 Saboteur" + IntToString(lv_index)))), 270.0);
            UnitGroupAdd(lv_rAUnits, UnitLastCreated());
            UnitCreate(1, "InfantryMedic", 0, 15, RegionRandomPoint(RegionFromName(("Campaign M22 Saboteur" + IntToString(lv_index)))), 270.0);
            UnitGroupAdd(lv_rAUnits, UnitLastCreated());
        }
        if ((lib90F7C81D_gf_GetSkillLevel() >= 3)) {
            for (autoFAA97D50_i = 1; autoFAA97D50_i <= autoFAA97D50_n; autoFAA97D50_i += 1) {
                UnitCreate(1, "InfantryRifleman", 0, 15, RegionRandomPoint(RegionFromName(("Campaign M22 Saboteur" + IntToString(lv_index)))), 270.0);
                UnitGroupAdd(lv_rAUnits, UnitLastCreated());
            }
            UnitCreate(1, "InfantryMarksman", 0, 15, RegionRandomPoint(RegionFromName(("Campaign M22 Saboteur" + IntToString(lv_index)))), 270.0);
            UnitGroupAdd(lv_rAUnits, UnitLastCreated());
        }
    }
    auto1693C966_g = lv_rAUnits;
    auto1693C966_u = UnitGroupCount(auto1693C966_g, c_unitCountAll);
    for (;; auto1693C966_u -= 1) {
        auto1693C966_var = UnitGroupUnitFromEnd(auto1693C966_g, auto1693C966_u);
        if (auto1693C966_var == null) { break; }
        UnitSetInfoText(auto1693C966_var, StringExternal("Param/Value/F5EB2C3F"), StringToText(""), StringToText(""));
        UnitAbilityEnable(auto1693C966_var, "PMCIssueOrderAttackWhenIdle", false);
    }
    auto8831CE03_g = lv_rASaboteurs;
    auto8831CE03_u = UnitGroupCount(auto8831CE03_g, c_unitCountAll);
    for (;; auto8831CE03_u -= 1) {
        auto8831CE03_var = UnitGroupUnitFromEnd(auto8831CE03_g, auto8831CE03_u);
        if (auto8831CE03_var == null) { break; }
        UnitSetInfoText(auto8831CE03_var, StringExternal("Param/Value/AFF6C9E3"), StringExternal("Param/Value/8831BFBC"), StringToText(""));
        UnitAbilityEnable(auto8831CE03_var, "PMCIssueOrderAttackWhenIdle", false);
    }
    UnitGroupAddUnitGroup(lib90F7C81D_gv_rAGroup, lv_rASaboteurs);
    UnitGroupAddUnitGroup(lib90F7C81D_gv_rAGroup, lv_rAUnits);
}

int gf_InitSiloTimers (int lp_siloNumber) {
    // Automatic Variable Declarations
    int auto91D2D8B2_val;

    // Implementation
    if (((lp_siloNumber < 1) || (lp_siloNumber > 6))) {
        return 0;
    }
    auto91D2D8B2_val = lib90F7C81D_gf_GetSkillLevel();
    if (auto91D2D8B2_val == 1) {
        if ((lp_siloNumber == 1)) {
            return 360;
        }
        else if ((lp_siloNumber == 2)) {
            return 345;
        }
        else if ((lp_siloNumber == 3)) {
            return 330;
        }
        else if ((lp_siloNumber == 4)) {
            return 315;
        }
        else if ((lp_siloNumber == 5)) {
            return 300;
        }
        else if ((lp_siloNumber == 6)) {
            return 285;
        }
    }
    else if (auto91D2D8B2_val == 2) {
        if ((lp_siloNumber == 1)) {
            return 360;
        }
        else if ((lp_siloNumber == 2)) {
            return 345;
        }
        else if ((lp_siloNumber == 3)) {
            return 315;
        }
        else if ((lp_siloNumber == 4)) {
            return 300;
        }
        else if ((lp_siloNumber == 5)) {
            return 270;
        }
        else if ((lp_siloNumber == 6)) {
            return 255;
        }
    }
    else if (auto91D2D8B2_val == 3) {
        if ((lp_siloNumber == 1)) {
            return 360;
        }
        else if ((lp_siloNumber == 2)) {
            return 270;
        }
        else if ((lp_siloNumber == 3)) {
            return 240;
        }
        else if ((lp_siloNumber == 4)) {
            return 225;
        }
        else if ((lp_siloNumber == 5)) {
            return 210;
        }
        else if ((lp_siloNumber == 6)) {
            return 195;
        }
    }
    else {
        return 0;
    }
    return 0;
}

void gf_CampaignScriptedSpawns (int lp_missionEvent) {
    // Automatic Variable Declarations
    int auto1659FA7B_val;
    int auto70E34563_val;
    int auto390F3F7B_val;
    int auto7F340892_val;
    int auto8CFC9EAD_val;
    const int autoCCAF77AF_n = 2;
    int autoCCAF77AF_i;
    int autoE1037735_val;
    const int auto1E7D0DE5_n = 4;
    int auto1E7D0DE5_i;
    const int auto72E821CF_n = 4;
    int auto72E821CF_i;
    const int auto893E1341_n = 4;
    int auto893E1341_i;
    const int auto200AD4F0_n = 4;
    int auto200AD4F0_i;
    const int auto4E5C55E4_n = 4;
    int auto4E5C55E4_i;
    const int autoB28E9EA9_n = 2;
    int autoB28E9EA9_i;
    int auto86AAFA51_val;
    const int autoC9DCEA01_n = 6;
    int autoC9DCEA01_i;
    const int auto9E80519A_n = 8;
    int auto9E80519A_i;
    const int auto3094E055_n = 4;
    int auto3094E055_i;
    const int auto0284B57C_n = 12;
    int auto0284B57C_i;
    const int auto468AE020_n = 4;
    int auto468AE020_i;
    const int auto14680094_n = 2;
    int auto14680094_i;
    int autoB5AF6B3A_val;
    const int auto43768EF1_n = 3;
    int auto43768EF1_i;
    const int auto0FC50D1D_n = 3;
    int auto0FC50D1D_i;
    const int auto0D792511_n = 2;
    int auto0D792511_i;
    const int auto9CBC4935_n = 3;
    int auto9CBC4935_i;
    const int autoA2FDEED1_n = 2;
    int autoA2FDEED1_i;
    int auto43270F8A_val;
    const int auto6343F16A_n = 3;
    int auto6343F16A_i;
    const int auto7858A657_n = 3;
    int auto7858A657_i;
    const int auto1C2112FC_n = 3;
    int auto1C2112FC_i;
    int auto9483253F_val;
    const int auto206399B6_n = 3;
    int auto206399B6_i;
    const int auto99D4F465_n = 3;
    int auto99D4F465_i;
    const int auto23283054_n = 3;
    int auto23283054_i;
    const int auto4B783FE9_n = 2;
    int auto4B783FE9_i;
    int autoEB8A6FE7_val;
    const int auto8271D0D4_n = 2;
    int auto8271D0D4_i;
    const int autoC5662C19_n = 3;
    int autoC5662C19_i;
    const int auto95C21454_n = 4;
    int auto95C21454_i;

    // Implementation
    auto1659FA7B_val = lp_missionEvent;
    if (auto1659FA7B_val == 4) {
        auto70E34563_val = lib90F7C81D_gf_GetSkillLevel();
        if (auto70E34563_val == 1) {
            gf_SpawnUnitGroupAsync("Basic", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Basic", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Vermin", true, 10.0, RandomFixed(3.0, 9.0));
        }
        else if (auto70E34563_val == 2) {
            gf_SpawnUnitGroupAsync("Basic", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Basic", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Vermin", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Vermin", true, 10.0, RandomFixed(3.0, 9.0));
        }
        else if (auto70E34563_val == 3) {
            gf_SpawnUnitGroupAsync("Assault Basic", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Assault Basic", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Assault Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Vermin Assault", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Vermin Assault", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Assault Variety", true, 10.0, RandomFixed(3.0, 9.0));
        }
        else {
        }
    }
    else if (auto1659FA7B_val == 5) {
        auto390F3F7B_val = lib90F7C81D_gf_GetSkillLevel();
        if (auto390F3F7B_val == 1) {
            gf_SpawnUnitGroupAsync("Basic", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Basic", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Vermin", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Special", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
        }
        else if (auto390F3F7B_val == 2) {
            gf_SpawnUnitGroupAsync("Basic", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Basic", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Vermin", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Vermin", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Special", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_UndeadGroupFilter(ge_UndeadUnitFilter_Cloaked, true);
            gf_SpawnUnitGroupAsync("Cloaked", true, 10.0, RandomFixed(3.0, 9.0));
            gf_UndeadGroupFilter(ge_UndeadUnitFilter_Cloaked, false);
        }
        else if (auto390F3F7B_val == 3) {
            gf_SpawnUnitGroupAsync("Assault Basic", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Assault Basic", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Assault Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Vermin Assault", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Vermin Assault", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Assault Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Special", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Special", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Assault Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Cloaked", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Cloaked Air", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Cloaked Air", true, 10.0, RandomFixed(3.0, 9.0));
        }
        else {
        }
    }
    else if (auto1659FA7B_val == 6) {
        if ((lib90F7C81D_gf_DifficultyisGOE(3) == true)) {
            gf_SendT2AttackWave(true, "Gourmand", RandomInt(1, 2), "Glutton", RandomInt(2, 5), "Glutton", RandomInt(2, 5));
        }
        auto7F340892_val = lib90F7C81D_gf_GetSkillLevel();
        if (auto7F340892_val == 1) {
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
        }
        else if (auto7F340892_val == 2) {
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Assault Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Assault Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Assault Variety", true, 10.0, RandomFixed(3.0, 9.0));
            if ((RandomInt(0, 6) == 0)) {
                gf_SpawnUnitGroupAsync("Tier 1 Air", true, 10.0, RandomFixed(3.0, 9.0));
            }
            else {
                gf_SpawnUnitGroupAsync("Tier 1", true, 10.0, RandomFixed(3.0, 9.0));
            }
        }
        else if (auto7F340892_val == 3) {
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Assault Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Assault Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Assault Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Assault Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Assault Variety", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Assault Variety", true, 10.0, RandomFixed(3.0, 9.0));
            if ((RandomInt(0, 6) == 0)) {
                gf_SpawnUnitGroupAsync("Tier 1 Air", true, 10.0, RandomFixed(3.0, 9.0));
            }
            else {
                gf_SpawnUnitGroupAsync("Tier 1", true, 10.0, RandomFixed(3.0, 9.0));
            }
        }
        else {
        }
    }
    else if (auto1659FA7B_val == 7) {
        auto8CFC9EAD_val = lib90F7C81D_gf_GetSkillLevel();
        if (auto8CFC9EAD_val == 1) {
            gf_SpawnUnitGroupAsync("Basic", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Ranged", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Special", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Special", true, 10.0, RandomFixed(3.0, 9.0));
        }
        else if (auto8CFC9EAD_val == 2) {
            gf_SpawnUnitGroupAsync("Basic", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Ranged", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Special", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Special", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Vermin", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Vermin", true, 10.0, RandomFixed(3.0, 9.0));
            if ((RandomInt(0, 6) == 0)) {
                gf_SpawnUnitGroupAsync("Tier 1 Air", true, 10.0, RandomFixed(3.0, 9.0));
            }
            else {
                gf_SpawnUnitGroupAsync("Tier 1", true, 10.0, RandomFixed(3.0, 9.0));
            }
        }
        else if (auto8CFC9EAD_val == 3) {
            gf_SpawnUnitGroupAsync("Assault Basic", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Assault Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Ranged", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Ranged", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Special", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Special", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Vermin Assault", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Vermin Assault", true, 10.0, RandomFixed(3.0, 9.0));
            for (autoCCAF77AF_i = 1; autoCCAF77AF_i <= autoCCAF77AF_n; autoCCAF77AF_i += 1) {
                if ((RandomInt(0, 6) == 0)) {
                    gf_SpawnUnitGroupAsync("Tier 1 Air", true, 10.0, RandomFixed(3.0, 9.0));
                }
                else {
                    gf_SpawnUnitGroupAsync("Tier 1", true, 10.0, RandomFixed(3.0, 9.0));
                }
            }
        }
        else {
        }
    }
    else if (auto1659FA7B_val == 8) {
        autoE1037735_val = lib90F7C81D_gf_GetSkillLevel();
        if (autoE1037735_val == 1) {
            gf_SpawnUnitGroupAsync("Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
            for (auto1E7D0DE5_i = 1; auto1E7D0DE5_i <= auto1E7D0DE5_n; auto1E7D0DE5_i += 1) {
                gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            }
            gf_SpawnUnitGroupAsync("Cloaked Air", true, 10.0, RandomFixed(3.0, 9.0));
        }
        else if (autoE1037735_val == 2) {
            gf_SpawnUnitGroupAsync("Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
            for (auto72E821CF_i = 1; auto72E821CF_i <= auto72E821CF_n; auto72E821CF_i += 1) {
                gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            }
            gf_SpawnUnitGroupAsync("Cloaked Air", true, 10.0, RandomFixed(3.0, 9.0));
            for (auto893E1341_i = 1; auto893E1341_i <= auto893E1341_n; auto893E1341_i += 1) {
                gf_SendAttackWaveAsync(true, "SpittingSpider", 1, null, 0, null, 0, 10.0, RandomFixed(3.0, 9.0));
            }
        }
        else if (autoE1037735_val == 3) {
            gf_SpawnUnitGroupAsync("Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
            for (auto200AD4F0_i = 1; auto200AD4F0_i <= auto200AD4F0_n; auto200AD4F0_i += 1) {
                gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            }
            gf_SpawnUnitGroupAsync("Cloaked Air", true, 10.0, RandomFixed(3.0, 9.0));
            for (auto4E5C55E4_i = 1; auto4E5C55E4_i <= auto4E5C55E4_n; auto4E5C55E4_i += 1) {
                gf_SendAttackWaveAsync(true, "SpittingSpider", 1, null, 0, null, 0, 10.0, RandomFixed(3.0, 9.0));
            }
            for (autoB28E9EA9_i = 1; autoB28E9EA9_i <= autoB28E9EA9_n; autoB28E9EA9_i += 1) {
                gf_SendAttackWaveAsync(true, "SpittingSpider", 2, null, 0, null, 0, 10.0, RandomFixed(3.0, 9.0));
            }
            gf_SpawnUnitGroupAsync("Cloaked", true, 10.0, RandomFixed(3.0, 9.0));
        }
        else {
        }
    }
    else if (auto1659FA7B_val == 9) {
        auto86AAFA51_val = lib90F7C81D_gf_GetSkillLevel();
        if (auto86AAFA51_val == 1) {
            for (autoC9DCEA01_i = 1; autoC9DCEA01_i <= autoC9DCEA01_n; autoC9DCEA01_i += 1) {
                gf_SpawnUnitGroupAsync("Vermin", true, 10.0, RandomFixed(3.0, 9.0));
            }
            gf_SpawnUnitGroupAsync("Special", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Special", true, 10.0, RandomFixed(3.0, 9.0));
        }
        else if (auto86AAFA51_val == 2) {
            for (auto9E80519A_i = 1; auto9E80519A_i <= auto9E80519A_n; auto9E80519A_i += 1) {
                gf_SpawnUnitGroupAsync("Vermin", true, 10.0, RandomFixed(3.0, 9.0));
            }
            gf_SpawnUnitGroupAsync("Special", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Special", true, 10.0, RandomFixed(3.0, 9.0));
            for (auto3094E055_i = 1; auto3094E055_i <= auto3094E055_n; auto3094E055_i += 1) {
                gf_SendAttackWaveAsync(true, "SpittingSpider", 1, null, 0, null, 0, 10.0, RandomFixed(3.0, 9.0));
            }
        }
        else if (auto86AAFA51_val == 3) {
            for (auto0284B57C_i = 1; auto0284B57C_i <= auto0284B57C_n; auto0284B57C_i += 1) {
                gf_SpawnUnitGroupAsync("Vermin", true, 10.0, RandomFixed(3.0, 9.0));
            }
            gf_SpawnUnitGroupAsync("Special", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Special", true, 10.0, RandomFixed(3.0, 9.0));
            for (auto468AE020_i = 1; auto468AE020_i <= auto468AE020_n; auto468AE020_i += 1) {
                gf_SendAttackWaveAsync(true, "SpittingSpider", 1, null, 0, null, 0, 10.0, RandomFixed(3.0, 9.0));
            }
            for (auto14680094_i = 1; auto14680094_i <= auto14680094_n; auto14680094_i += 1) {
                gf_SendAttackWaveAsync(true, "SpittingSpider", 2, null, 0, null, 0, 10.0, RandomFixed(3.0, 9.0));
            }
        }
        else {
        }
    }
    else if (auto1659FA7B_val == 10) {
        autoB5AF6B3A_val = lib90F7C81D_gf_GetSkillLevel();
        if (autoB5AF6B3A_val == 1) {
            for (auto43768EF1_i = 1; auto43768EF1_i <= auto43768EF1_n; auto43768EF1_i += 1) {
                gf_SpawnUnitGroupAsync("Basic", true, 10.0, RandomFixed(3.0, 9.0));
                gf_SpawnUnitGroupAsync("Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
                gf_SpawnUnitGroupAsync("Assault Basic", true, 10.0, RandomFixed(3.0, 9.0));
                gf_SpawnUnitGroupAsync("Assault Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
            }
        }
        else if (autoB5AF6B3A_val == 2) {
            for (auto0FC50D1D_i = 1; auto0FC50D1D_i <= auto0FC50D1D_n; auto0FC50D1D_i += 1) {
                gf_SpawnUnitGroupAsync("Basic", true, 10.0, RandomFixed(3.0, 9.0));
                gf_SpawnUnitGroupAsync("Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
                gf_SpawnUnitGroupAsync("Assault Basic", true, 10.0, RandomFixed(3.0, 9.0));
                gf_SpawnUnitGroupAsync("Assault Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
            }
            for (auto0D792511_i = 1; auto0D792511_i <= auto0D792511_n; auto0D792511_i += 1) {
                gf_SpawnUnitGroupAsync("Ranged", true, 10.0, RandomFixed(3.0, 9.0));
                gf_SpawnUnitGroupAsync("Ranged Air", true, 10.0, RandomFixed(3.0, 9.0));
            }
        }
        else if (autoB5AF6B3A_val == 3) {
            for (auto9CBC4935_i = 1; auto9CBC4935_i <= auto9CBC4935_n; auto9CBC4935_i += 1) {
                gf_SpawnUnitGroupAsync("Basic", true, 10.0, RandomFixed(3.0, 9.0));
                gf_SpawnUnitGroupAsync("Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
                gf_SpawnUnitGroupAsync("Assault Basic", true, 10.0, RandomFixed(3.0, 9.0));
                gf_SpawnUnitGroupAsync("Assault Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
            }
            for (autoA2FDEED1_i = 1; autoA2FDEED1_i <= autoA2FDEED1_n; autoA2FDEED1_i += 1) {
                gf_SpawnUnitGroupAsync("Ranged", true, 10.0, RandomFixed(3.0, 9.0));
                gf_SpawnUnitGroupAsync("Ranged Air", true, 10.0, RandomFixed(3.0, 9.0));
            }
        }
        else {
        }
    }
    else if (auto1659FA7B_val == 11) {
        auto43270F8A_val = lib90F7C81D_gf_GetSkillLevel();
        if (auto43270F8A_val == 1) {
            for (auto6343F16A_i = 1; auto6343F16A_i <= auto6343F16A_n; auto6343F16A_i += 1) {
                gf_SpawnUnitGroupAsync("Basic", true, 10.0, RandomFixed(3.0, 9.0));
            }
            if ((gv_chapter_2.lv_mission11RefugeeWave == 5)) {
                gf_SendAttackWaveAsync(true, "Gourmand", 1, null, 0, null, 0, 10.0, RandomFixed(3.0, 9.0));
            }
            if ((ModI(gv_chapter_2.lv_mission11RefugeeWave, 3) == 0)) {
                gf_SpawnUnitGroupAsync("Cloaked Air", true, 10.0, RandomFixed(3.0, 9.0));
            }
        }
        else if (auto43270F8A_val == 2) {
            for (auto7858A657_i = 1; auto7858A657_i <= auto7858A657_n; auto7858A657_i += 1) {
                gf_SpawnUnitGroupAsync("Basic", true, 10.0, RandomFixed(3.0, 9.0));
            }
            if ((gv_chapter_2.lv_mission11RefugeeWave == 3)) {
                gf_SpawnUnitGroupAsync("Tier 1", true, 10.0, RandomFixed(3.0, 9.0));
            }
            if ((ModI(gv_chapter_2.lv_mission11RefugeeWave, 3) == 0)) {
                gf_SpawnUnitGroupAsync("Cloaked Air", true, 10.0, RandomFixed(3.0, 9.0));
            }
            if ((ModI(gv_chapter_2.lv_mission11RefugeeWave, 4) == 0)) {
                gf_SpawnUnitGroupAsync("Vermin", true, 10.0, RandomFixed(3.0, 9.0));
            }
            if ((ModI(gv_chapter_2.lv_mission11RefugeeWave, 5) == 0)) {
                gf_SpawnUnitGroupAsync("Ranged", true, 10.0, RandomFixed(3.0, 9.0));
            }
        }
        else if (auto43270F8A_val == 3) {
            gf_SpawnUnitGroupAsync("Variety", true, 10.0, RandomFixed(3.0, 9.0));
            for (auto1C2112FC_i = 1; auto1C2112FC_i <= auto1C2112FC_n; auto1C2112FC_i += 1) {
                gf_SpawnUnitGroupAsync("Basic", true, 10.0, RandomFixed(3.0, 9.0));
            }
            if (((gv_chapter_2.lv_mission11RefugeeWave == 3) || (gv_chapter_2.lv_mission11RefugeeWave == 7))) {
                gf_SpawnUnitGroupAsync("Tier 1", true, 10.0, RandomFixed(3.0, 9.0));
            }
            if ((ModI(gv_chapter_2.lv_mission11RefugeeWave, 3) == 0)) {
                gf_SpawnUnitGroupAsync("Cloaked Air", true, 10.0, RandomFixed(3.0, 9.0));
            }
            if ((ModI(gv_chapter_2.lv_mission11RefugeeWave, 4) == 0)) {
                gf_SpawnUnitGroupAsync("Vermin", true, 10.0, RandomFixed(3.0, 9.0));
            }
            if ((ModI(gv_chapter_2.lv_mission11RefugeeWave, 5) == 0)) {
                gf_SpawnUnitGroupAsync("Ranged", true, 10.0, RandomFixed(3.0, 9.0));
            }
        }
        else {
        }
    }
    else if (auto1659FA7B_val == 12) {
    }
    else if (auto1659FA7B_val == 13) {
    }
    else if (auto1659FA7B_val == 14) {
        auto9483253F_val = lib90F7C81D_gf_GetSkillLevel();
        if (auto9483253F_val == 1) {
            for (auto206399B6_i = 1; auto206399B6_i <= auto206399B6_n; auto206399B6_i += 1) {
                gf_SpawnUnitGroupAsync("Assault Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
                gf_SpawnUnitGroupAsync("Assault Variety", true, 10.0, RandomFixed(3.0, 9.0));
            }
            gf_SpawnUnitGroupAsync("Ranged", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Ranged Air", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Special", true, 10.0, RandomFixed(3.0, 9.0));
        }
        else if (auto9483253F_val == 2) {
            for (auto99D4F465_i = 1; auto99D4F465_i <= auto99D4F465_n; auto99D4F465_i += 1) {
                gf_SpawnUnitGroupAsync("Assault Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
                gf_SpawnUnitGroupAsync("Assault Variety", true, 10.0, RandomFixed(3.0, 9.0));
                gf_SpawnUnitGroupAsync("Special", true, 10.0, RandomFixed(3.0, 9.0));
            }
            gf_SpawnUnitGroupAsync("Ranged", true, 10.0, RandomFixed(3.0, 9.0));
            gf_SpawnUnitGroupAsync("Ranged Air", true, 10.0, RandomFixed(3.0, 9.0));
            if ((RandomInt(0, 6) == 1)) {
                gf_SpawnUnitGroupAsync("Tier 1 Air", true, 10.0, RandomFixed(3.0, 9.0));
            }
            else {
                gf_SpawnUnitGroupAsync("Tier 1", true, 10.0, RandomFixed(3.0, 9.0));
            }
        }
        else if (auto9483253F_val == 3) {
            for (auto23283054_i = 1; auto23283054_i <= auto23283054_n; auto23283054_i += 1) {
                gf_SpawnUnitGroupAsync("Assault Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
                gf_SpawnUnitGroupAsync("Assault Variety", true, 10.0, RandomFixed(3.0, 9.0));
                gf_SpawnUnitGroupAsync("Special", true, 10.0, RandomFixed(3.0, 9.0));
            }
            for (auto4B783FE9_i = 1; auto4B783FE9_i <= auto4B783FE9_n; auto4B783FE9_i += 1) {
                gf_SpawnUnitGroupAsync("Ranged", true, 10.0, RandomFixed(3.0, 9.0));
                gf_SpawnUnitGroupAsync("Ranged Air", true, 10.0, RandomFixed(3.0, 9.0));
            }
            gf_SpawnUnitGroupAsync("Cloaked", true, 10.0, RandomFixed(3.0, 9.0));
            if ((RandomInt(0, 6) == 1)) {
                gf_SpawnUnitGroupAsync("Tier 1 Air", true, 10.0, RandomFixed(3.0, 9.0));
            }
            else {
                gf_SpawnUnitGroupAsync("Tier 1", true, 10.0, RandomFixed(3.0, 9.0));
            }
        }
        else {
        }
    }
    else if (auto1659FA7B_val == 15) {
        autoEB8A6FE7_val = lib90F7C81D_gf_GetSkillLevel();
        if (autoEB8A6FE7_val == 1) {
            for (auto8271D0D4_i = 1; auto8271D0D4_i <= auto8271D0D4_n; auto8271D0D4_i += 1) {
                gf_SpawnUnitGroupAsync("Basic", true, 10.0, RandomFixed(3.0, 9.0));
                gf_SpawnUnitGroupAsync("Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
            }
        }
        else if (autoEB8A6FE7_val == 2) {
            for (autoC5662C19_i = 1; autoC5662C19_i <= autoC5662C19_n; autoC5662C19_i += 1) {
                gf_SpawnUnitGroupAsync("Basic", true, 10.0, RandomFixed(3.0, 9.0));
                gf_SpawnUnitGroupAsync("Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
            }
            gf_SpawnUnitGroupAsync("Special", true, 10.0, RandomFixed(3.0, 9.0));
        }
        else if (autoEB8A6FE7_val == 3) {
            for (auto95C21454_i = 1; auto95C21454_i <= auto95C21454_n; auto95C21454_i += 1) {
                gf_SpawnUnitGroupAsync("Basic", true, 10.0, RandomFixed(3.0, 9.0));
                gf_SpawnUnitGroupAsync("Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
                gf_SpawnUnitGroupAsync("Special", true, 10.0, RandomFixed(3.0, 9.0));
            }
        }
        else {
        }
    }
    else if (auto1659FA7B_val == 17) {
    }
    else if (auto1659FA7B_val == 23) {
        gf_SpawnUnitGroupAsync("Assault Variety", true, 10.0, RandomFixed(3.0, 9.0));
        gf_SpawnUnitGroupAsync("Special", true, 15.0, RandomFixed(3.0, 9.0));
        gf_SpawnUnitGroupAsync("Cloaked", true, 20.0, RandomFixed(3.0, 9.0));
        gf_SpawnUnitGroupAsync("Vermin Assault", true, 30.0, RandomFixed(3.0, 9.0));
        gf_SpawnUnitGroupAsync("Ranged", true, 40.0, RandomFixed(3.0, 9.0));
        gf_SpawnUnitGroupAsync("T1", true, 50.0, RandomFixed(3.0, 9.0));
        if ((lib90F7C81D_gf_DifficultyisGOE(3) == true)) {
            gf_SpawnUnitGroupAsync("Cloaked Air", true, 20.0, RandomFixed(3.0, 9.0));
            gf_SendTimedBossSpawn(RandomFixed(15.0, 30.0), "Metasis", null);
        }
    }
    else {
    }
}

void gf_MissionMenuInit () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto456464D9_ae;
    const int auto456464D9_ai = 1;

    // Variable Initialization

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "$MissionSelection");
    gv_campaign_Missions.lv_missionPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeListBox, "$MissionSelection/ListContainer/MissionList");
    gv_campaign_Missions.lv_missionList = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_CampaignMissionSelector, c_playerAny, gv_campaign_Missions.lv_missionList, c_triggerControlEventTypeSelectionChanged);
    auto456464D9_ae = UserDataInstanceCount("CampaignMissions");
    lv_i = 1;
    for ( ; ( (auto456464D9_ai >= 0 && lv_i <= auto456464D9_ae) || (auto456464D9_ai < 0 && lv_i >= auto456464D9_ae) ) ; lv_i += auto456464D9_ai ) {
        DialogControlAddItem(gv_campaign_Missions.lv_missionList, PlayerGroupAll(), StringToText(UserDataGetString("CampaignMissions", UserDataInstance("CampaignMissions", lv_i), "Mission", 1)));
    }
    DialogControlHookupStandard(c_triggerControlTypeButton, "$MissionSelection/StartButton");
    gv_campaign_Missions.lv_missionButtonStart = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_CampaignMissionStart, c_playerAny, gv_campaign_Missions.lv_missionButtonStart, c_triggerControlEventTypeClick);
    DialogControlHookupStandard(c_triggerControlTypeCheckBox, "$MissionSelection/SingleMissionRun");
    gv_campaign_Missions.lv_missionCheckboxSingleRun = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_CampaignSingleMissionChecked, c_playerAny, gv_campaign_Missions.lv_missionCheckboxSingleRun, c_triggerControlEventTypeChecked);
    TriggerEnable(gt_CampaignMissionSelector, true);
    TriggerEnable(gt_CampaignMissionStart, true);
    TriggerEnable(gt_CampaignSingleMissionChecked, true);
    DialogControlSendAnimationEvent(gv_campaign_Missions.lv_missionPanel, PlayerGroupAll(), "Display");
    DialogControlSelectItem(gv_campaign_Missions.lv_missionList, PlayerGroupAll(), 1);
}

int gf_CampaignVictoryMultiplier (int lp_earnedXP) {
    // Variable Declarations
    fixed lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (1)) {
        lv_result = (1.5 * IntToFixed(lp_earnedXP));
    }
    else if (lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (2)) {
        lv_result = (2.0 * IntToFixed(lp_earnedXP));
    }
    else if (lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (3)) {
        lv_result = (2.5 * IntToFixed(lp_earnedXP));
    }
    else if (lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (4)) {
        lv_result = (3.0 * IntToFixed(lp_earnedXP));
    }
    else if (lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (5)) {
        lv_result = (5.0 * IntToFixed(lp_earnedXP));
    }
    return FixedToInt(lv_result);
}

void gf_ChapterTransition (int lp_chapter, bool lp_option) {
    // Automatic Variable Declarations
    playergroup auto67C20AB8_g;
    int auto67C20AB8_var;
    playergroup autoF730BD09_g;
    int autoF730BD09_var;

    // Implementation
    if ((lp_option == true)) {
        UnitPauseAll(true);
        auto67C20AB8_g = lib90F7C81D_gv_players;
        auto67C20AB8_var = -1;
        while (true) {
            auto67C20AB8_var = PlayerGroupNextPlayer(auto67C20AB8_g, auto67C20AB8_var);
            if (auto67C20AB8_var < 0) { break; }
            DialogControlSetAnimationState(lib90F7C81D_gv_commandCard.lv_selfCastFrame[auto67C20AB8_var], PlayerGroupSingle(auto67C20AB8_var), "State", "Off");
        }
        DialogControlSendAnimationEvent(lib90F7C81D_gv_backgroundMain, PlayerGroupAll(), "DisplayBlackMask");
        DialogControlSendAnimationEvent(lib90F7C81D_gv_backgroundMain, PlayerGroupAll(), "TransitionOn");
        Wait(2.0, c_timeGame);
        if ((lp_chapter == 2)) {
            UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/C81BBE46"), StringExternal("Param/Value/52F14859"), 0.0, SoundLink("UI_Nova_BriefingTextCallout_Open", -1), SoundLink("UI_TextPrintout", -1));
        }
        else if ((lp_chapter == 3)) {
            UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/6AB56E3E"), StringExternal("Param/Value/B67251A4"), 0.0, SoundLink("UI_Nova_BriefingTextCallout_Open", -1), SoundLink("UI_TextPrintout", -1));
        }
    }
    else {
        DialogControlSendAnimationEvent(lib90F7C81D_gv_backgroundMain, PlayerGroupAll(), "TransitionOff");
        UIHideTextCrawl(PlayerGroupAll());
        Wait(3.5, c_timeReal);
        DialogControlSendAnimationEvent(lib90F7C81D_gv_backgroundMain, PlayerGroupAll(), "HideBlackMask");
        UnitPauseAll(false);
        autoF730BD09_g = lib90F7C81D_gv_players;
        autoF730BD09_var = -1;
        while (true) {
            autoF730BD09_var = PlayerGroupNextPlayer(autoF730BD09_g, autoF730BD09_var);
            if (autoF730BD09_var < 0) { break; }
            DialogControlSetAnimationState(lib90F7C81D_gv_commandCard.lv_selfCastFrame[autoF730BD09_var], PlayerGroupSingle(autoF730BD09_var), "State", "On");
        }
    }
}

void gf_PolicePostInit () {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoF3198E99_ae;
    const int autoF3198E99_ai = 1;

    // Variable Initialization

    // Implementation
    autoF3198E99_ae = UnitGroupCount(UnitGroupFromId(2), c_unitCountAlive);
    lv_i = 1;
    for ( ; ( (autoF3198E99_ai >= 0 && lv_i <= autoF3198E99_ae) || (autoF3198E99_ai < 0 && lv_i >= autoF3198E99_ae) ) ; lv_i += autoF3198E99_ai ) {
        gv_police.lv_unit[lv_i] = UnitGroupUnit(UnitGroupFromId(2), lv_i);
        UnitBehaviorRemove(gv_police.lv_unit[lv_i], "DisableEvade", 1);
        gv_police.lv_point[lv_i] = UnitGetPosition(UnitGroupUnit(UnitGroupFromId(2), lv_i));
    }
    TriggerEnable(gt_ReturnPoliceToPost, true);
}

trigger auto_gf_SurvivalTimer_Trigger = null;

void gf_SurvivalTimer () {
    if (auto_gf_SurvivalTimer_Trigger == null) {
        auto_gf_SurvivalTimer_Trigger = TriggerCreate("auto_gf_SurvivalTimer_TriggerFunc");
    }

    TriggerExecute(auto_gf_SurvivalTimer_Trigger, false, false);
}

bool auto_gf_SurvivalTimer_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    fixed lv_t;

    // Automatic Variable Declarations
    const int autoFE3515E0_ae = 35;
    const int autoFE3515E0_ai = 3;

    // Variable Initialization
    lv_t = 180.0;

    // Implementation
    lv_i = 3;
    for ( ; ( (autoFE3515E0_ai >= 0 && lv_i <= autoFE3515E0_ae) || (autoFE3515E0_ai < 0 && lv_i >= autoFE3515E0_ae) ) ; lv_i += autoFE3515E0_ai ) {
        Wait(lv_t, c_timeGame);
        lib90F7C81D_gf_RunSurvivalEvent("_" + IntToString(lv_i) + "Min");
        if ((lv_i == 30)) {
            lv_i += 2;
            lv_t += 120.0;
        }
    }
    return true;
}

void gf_StartMissionSurvivalVariant (trigger t, string lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TriggerAddEventGeneric(t, ge_MissionSurvivalVariant_Ident(lp_event));
}

void gf_RunMissionSurvivalEvent (string lp_event) {
    // Automatic Variable Declarations
    // Implementation
    TriggerSendEvent(ge_MissionSurvivalVariant_Ident(lp_event));
}

void gf_CreateConvoy () {
    // Variable Declarations
    int lv_route;
    int lv_index3;
    int lv_index2;
    int lv_index;
    int lv_rallyPing;
    fixed lv_convoyETA;

    // Automatic Variable Declarations
    const int auto11835A76_ae = 4;
    const int auto11835A76_ai = 1;
    const int autoCA35EB63_ae = 9;
    const int autoCA35EB63_ai = 1;
    const int auto90AEAC0A_n = 2;
    int auto90AEAC0A_i;

    // Variable Initialization
    lv_route = gv_missionSurvivalVariant1.lv_currentRoute;
    lv_rallyPing = c_invalidPingId;

    // Implementation
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/062D419A"), gv_debug.lv_gameEvents);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(60)), ColorWithAlpha(0.00, 25.10, 0.00, 0.00), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/433653E5"));
    lv_rallyPing = PingLastCreated();
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/AEECCCFA"));
    ObjectiveSetName(lib90F7C81D_gv_secondObj, StringExternal("Param/Value/615ABA19"));
    ObjectiveSetDescription(lib90F7C81D_gv_secondObj, StringExternal("Param/Value/40F32B8E"));
    ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateActive);
    lv_convoyETA = RandomFixed(90.0, 120.0);
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ConsoleUIContainer/TriggerWindowPanel/TimerWindowTemplate/BackGroundImage");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/A2452781"), PlayerGroupAll());
    TimerStart(lib90F7C81D_gv_missiontimer, lv_convoyETA, false, c_timeGame);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), true);
    TriggerEnable(gt_ConvoyETATimer, true);
    Wait(lv_convoyETA, c_timeGame);
    if ((lv_route == 2)) {
        PingSetPosition(lv_rallyPing, RegionGetCenter(RegionFromId(50)));
    }
    else {
        PingSetPosition(lv_rallyPing, RegionGetCenter(RegionFromId(49)));
    }
    PingSetTooltip(lv_rallyPing, StringExternal("Param/Value/E2C1A763"));
    ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateCompleted);
    ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateHidden);
    ObjectiveShow(lib90F7C81D_gv_secondObj, PlayerGroupAll(), true);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/3C14EE73"));
    ObjectiveSetName(lib90F7C81D_gv_secondObj, StringExternal("Param/Value/AD5B4674"));
    ObjectiveSetDescription(lib90F7C81D_gv_secondObj, StringExternal("Param/Value/00D47296"));
    ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateActive);
    lv_index = 0;
    for ( ; ( (auto11835A76_ai >= 0 && lv_index <= auto11835A76_ae) || (auto11835A76_ai < 0 && lv_index >= auto11835A76_ae) ) ; lv_index += auto11835A76_ai ) {
        UnitCreate(1, "MATVConvoy", c_unitCreateIgnorePlacement, 13, RegionGetCenter(RegionFromId(60)), 90.0);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(0.00, 25.10, 0.00, 0.00), 0.0, 270.0);
        PingSetScale(PingLastCreated(), 0.65);
        PingSetUnit(PingLastCreated(), UnitLastCreated());
        gv_missionSurvivalVariant1.lv_convoyUnit[lv_index] = UnitLastCreated();
        if ((lv_index == 0)) {
            HookupBossBarUAD(gv_missionSurvivalVariant1.lv_convoyUnit[lv_index], StringExternal("Param/Value/86F2219E"));
        }
        lv_index2 = 0;
        for ( ; ( (autoCA35EB63_ai >= 0 && lv_index2 <= autoCA35EB63_ae) || (autoCA35EB63_ai < 0 && lv_index2 >= autoCA35EB63_ae) ) ; lv_index2 += autoCA35EB63_ai ) {
            UnitIssueOrder(gv_missionSurvivalVariant1.lv_convoyUnit[lv_index], OrderTargetingPoint(AbilityCommand("move", 0), gv_missionSurvivalVariant1.lv_convoyRoute[lv_index2]), c_orderQueueAddToEnd);
        }
        Wait(4.5, c_timeGame);
    }
    RegionSetCenter(RegionFromId(60), gv_missionSurvivalVariant1.lv_convoyRoute[9]);
    if (((lv_route == 1) || (lv_route == 3) || (lv_route == 4) || (lv_route == 5) || (lv_route == 6) || (lv_route == 7))) {
        RegionSetCenter(RegionFromId(51), RegionGetCenter(RegionFromId(49)));
    }
    else if (((lv_route == 2))) {
        RegionSetCenter(RegionFromId(51), RegionGetCenter(RegionFromId(50)));
    }
    gv_missionSurvivalVariant1.lv_saniesCurrentTarget = gv_missionSurvivalVariant1.lv_convoyUnit[0];
    lib90F7C81D_gf_ShowHidePathConvoy(true, 0);
    lib90F7C81D_gf_ShowHidePathConvoy(true, 1);
    TriggerEnable(gt_ConvoyMovement, true);
    TriggerEnable(gt_ConvoyDeath, true);
    TriggerEnable(gt_ConvoyExit, true);
    lib90F7C81D_gf_RunWeatherEvent("RandomWeather");
    if ((PlayerGroupCount(lib90F7C81D_gv_players) > 4)) {
        gf_ConvoyEncounters();
    }
    Wait(RandomInt(70, 85), c_timeGame);
    ObjectiveCreate(StringExternal("Param/Value/5ACA00BF"), StringExternal("Param/Value/CA3BE481"), c_objectiveStateActive, false);
    gv_missionSurvivalVariant1.lv_bruiserBrothersObjective = ObjectiveLastCreated();
    libNtve_gf_SetUpgradeLevelForPlayer(14, "BruiserBrothers", 1);
    TriggerEnable(gt_BruiserBrothers, true);
    TriggerEnable(gt_ConvoyUnstuck, true);
    lv_index = 0;
    for (auto90AEAC0A_i = 1; auto90AEAC0A_i <= auto90AEAC0A_n; auto90AEAC0A_i += 1) {
        lv_index += 1;
        TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/C9B38D0D"), gv_debug.lv_spawnMechanics);
        gf_SendT2AttackWave(true, "Vesania", 1, null, 0, null, 0);
        if ((lv_index == 1)) {
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById Vesania20ADiffuse");
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById Vesania20AEmissive");
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById Vesania20ASpecular");
        }
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "TextureSelectById Decal_Spray_0014_01");
        UnitGroupAdd(gv_missionSurvivalVariant1.lv_bruiserBrothersGroup, UnitLastCreated());
        TriggerAddEventUnitDied(gt_BruiserBrothers, UnitRefFromUnit(UnitLastCreated()));
        if ((PlayerGroupCount(lib90F7C81D_gv_players) < 6)) {
            break;
        }
    }
}

trigger auto_gf_ConvoyEncounters_Trigger = null;

void gf_ConvoyEncounters () {
    if (auto_gf_ConvoyEncounters_Trigger == null) {
        auto_gf_ConvoyEncounters_Trigger = TriggerCreate("auto_gf_ConvoyEncounters_TriggerFunc");
    }

    TriggerExecute(auto_gf_ConvoyEncounters_Trigger, false, false);
}

bool auto_gf_ConvoyEncounters_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_repeatFactor;
    int lv_rNG;
    int lv_range;

    // Automatic Variable Declarations
    int auto5E8DEF04_n;
    int auto5E8DEF04_i;
    int auto53608EEE_val;
    int auto29A23A10_n;
    int auto29A23A10_i;
    int autoB4C87F13_val;

    // Variable Initialization
    lv_range = RandomInt(0, 2);

    // Implementation
    Wait(RandomInt(15, 30), c_timeGame);
    auto5E8DEF04_n = (1 + CeilingI((PlayerGroupCount(lib90F7C81D_gv_players) / 4)));
    for (auto5E8DEF04_i = 1; auto5E8DEF04_i <= auto5E8DEF04_n; auto5E8DEF04_i += 1) {
        lv_rNG = RandomInt(0, 3);
        auto53608EEE_val = lv_rNG;
        if (auto53608EEE_val == 0) {
            TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/B0AB7569"), gv_debug.lv_spawnMechanics);
            gf_SendT2AttackWave(true, "Immussilus", 1, null, 0, null, 0);
        }
        else if (auto53608EEE_val == 1) {
            TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/5DD747E2"), gv_debug.lv_spawnMechanics);
            gf_SendT2AttackWave(true, "Baron", 1, null, 0, null, 0);
        }
        else {
            if ((RandomInt(0, 1) == 1)) {
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/78E6885A"), gv_debug.lv_spawnMechanics);
                gf_SendT2AttackWave(true, "Gourmand", 1, null, 0, null, 0);
            }
            else {
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/CAA6FE0D"), gv_debug.lv_spawnMechanics);
                gf_SendT2AttackWave(true, "Gargantuan", 1, null, 0, null, 0);
            }
        }
        Wait(3.0, c_timeGame);
    }
    Wait(RandomInt(100, 115), c_timeGame);
    if ((gv_missionSurvivalVariant1.lv_didBonus == true)) {
        lv_repeatFactor = 2;
    }
    else {
        lv_repeatFactor = 1;
    }
    auto29A23A10_n = lv_repeatFactor;
    for (auto29A23A10_i = 1; auto29A23A10_i <= auto29A23A10_n; auto29A23A10_i += 1) {
        lv_rNG = lv_range;
        Wait(15.0, c_timeGame);
        autoB4C87F13_val = lv_rNG;
        if (autoB4C87F13_val == 0) {
            TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/0217983D"), gv_debug.lv_spawnMechanics);
            gf_SendT2AttackWave(true, "Ares", 1, null, 0, null, 0);
            lv_range = RandomInt(1, 2);
        }
        else if (autoB4C87F13_val == 1) {
            TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/A8FE6730"), gv_debug.lv_spawnMechanics);
            gf_SendT2AttackWave(true, "Minerva", 1, null, 0, null, 0);
            lv_range = RandomInt(-1, 0);
        }
        else {
            TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/5DE2A6E4"), gv_debug.lv_spawnMechanics);
            gf_SendT2AttackWave(true, "Widower", 1, null, 0, null, 0);
            lv_range = RandomInt(0, 1);
        }
    }
    return true;
}

void gf_SetupConvoyRoutes (int lp_route) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto87BF8E23_val;
    int autoD46D98AD_ae;
    const int autoD46D98AD_ai = 1;
    int autoACAE69E8_ae;
    const int autoACAE69E8_ai = 1;
    int auto6BEE9FD3_ae;
    const int auto6BEE9FD3_ai = 1;
    int auto7A17F5AC_ae;
    const int auto7A17F5AC_ai = 1;
    int auto83837FEB_ae;
    const int auto83837FEB_ai = 1;
    int autoD0C1CC21_ae;
    const int autoD0C1CC21_ai = 1;
    int autoCA573293_ae;
    const int autoCA573293_ai = 1;
    const int autoF416D278_ae = 38;
    const int autoF416D278_ai = 1;
    int auto9E9416FE_ae;
    const int auto9E9416FE_ai = 1;

    // Variable Initialization

    // Implementation
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/3A463D75"), gv_debug.lv_gameEvents);
    gv_missionSurvivalVariant1.lv_convoyPoints[0] = 73;
    gv_missionSurvivalVariant1.lv_convoyPoints[1] = 49;
    gv_missionSurvivalVariant1.lv_convoyPoints[2] = 50;
    gv_missionSurvivalVariant1.lv_convoyPoints[3] = 54;
    gv_missionSurvivalVariant1.lv_convoyPoints[4] = 45;
    gv_missionSurvivalVariant1.lv_convoyPoints[5] = 46;
    gv_missionSurvivalVariant1.lv_convoyPoints[6] = 57;
    auto87BF8E23_val = lp_route;
    if (auto87BF8E23_val == 1) {
        autoD46D98AD_ae = gv_missionSurvivalVariant1.lv_convoyPoints[0];
        lv_index = 0;
        for ( ; ( (autoD46D98AD_ai >= 0 && lv_index <= autoD46D98AD_ae) || (autoD46D98AD_ai < 0 && lv_index >= autoD46D98AD_ae) ) ; lv_index += autoD46D98AD_ai ) {
            gv_missionSurvivalVariant1.lv_convoyRoute[lv_index] = PointFromName(("MSC1_" + IntToString(((gv_missionSurvivalVariant1.lv_convoyPoints[0] - lv_index) + 1))));
        }
    }
    else if (auto87BF8E23_val == 2) {
        autoACAE69E8_ae = gv_missionSurvivalVariant1.lv_convoyPoints[1];
        lv_index = 0;
        for ( ; ( (autoACAE69E8_ai >= 0 && lv_index <= autoACAE69E8_ae) || (autoACAE69E8_ai < 0 && lv_index >= autoACAE69E8_ae) ) ; lv_index += autoACAE69E8_ai ) {
            gv_missionSurvivalVariant1.lv_convoyRoute[lv_index] = PointFromName(("MSC2_" + IntToString(((gv_missionSurvivalVariant1.lv_convoyPoints[1] - lv_index) + 1))));
        }
    }
    else if (auto87BF8E23_val == 3) {
        auto6BEE9FD3_ae = gv_missionSurvivalVariant1.lv_convoyPoints[2];
        lv_index = 0;
        for ( ; ( (auto6BEE9FD3_ai >= 0 && lv_index <= auto6BEE9FD3_ae) || (auto6BEE9FD3_ai < 0 && lv_index >= auto6BEE9FD3_ae) ) ; lv_index += auto6BEE9FD3_ai ) {
            gv_missionSurvivalVariant1.lv_convoyRoute[lv_index] = PointFromName(("MSC3_" + IntToString(((gv_missionSurvivalVariant1.lv_convoyPoints[2] - lv_index) + 1))));
        }
    }
    else if (auto87BF8E23_val == 4) {
        auto7A17F5AC_ae = gv_missionSurvivalVariant1.lv_convoyPoints[3];
        lv_index = 0;
        for ( ; ( (auto7A17F5AC_ai >= 0 && lv_index <= auto7A17F5AC_ae) || (auto7A17F5AC_ai < 0 && lv_index >= auto7A17F5AC_ae) ) ; lv_index += auto7A17F5AC_ai ) {
            gv_missionSurvivalVariant1.lv_convoyRoute[lv_index] = PointFromName(("MSC4_" + IntToString(((gv_missionSurvivalVariant1.lv_convoyPoints[3] - lv_index) + 1))));
        }
    }
    else if (auto87BF8E23_val == 5) {
        auto83837FEB_ae = gv_missionSurvivalVariant1.lv_convoyPoints[4];
        lv_index = 0;
        for ( ; ( (auto83837FEB_ai >= 0 && lv_index <= auto83837FEB_ae) || (auto83837FEB_ai < 0 && lv_index >= auto83837FEB_ae) ) ; lv_index += auto83837FEB_ai ) {
            gv_missionSurvivalVariant1.lv_convoyRoute[lv_index] = PointFromName(("MSC5_" + IntToString(((gv_missionSurvivalVariant1.lv_convoyPoints[4] - lv_index) + 1))));
        }
    }
    else if (auto87BF8E23_val == 6) {
        autoD0C1CC21_ae = gv_missionSurvivalVariant1.lv_convoyPoints[5];
        lv_index = 0;
        for ( ; ( (autoD0C1CC21_ai >= 0 && lv_index <= autoD0C1CC21_ae) || (autoD0C1CC21_ai < 0 && lv_index >= autoD0C1CC21_ae) ) ; lv_index += autoD0C1CC21_ai ) {
            gv_missionSurvivalVariant1.lv_convoyRoute[lv_index] = PointFromName(("MSC6_" + IntToString(((gv_missionSurvivalVariant1.lv_convoyPoints[5] - lv_index) + 1))));
        }
    }
    else if (auto87BF8E23_val == 7) {
        autoCA573293_ae = gv_missionSurvivalVariant1.lv_convoyPoints[6];
        lv_index = 0;
        for ( ; ( (autoCA573293_ai >= 0 && lv_index <= autoCA573293_ae) || (autoCA573293_ai < 0 && lv_index >= autoCA573293_ae) ) ; lv_index += autoCA573293_ai ) {
            gv_missionSurvivalVariant1.lv_convoyRoute[lv_index] = PointFromName(("MSC7_" + IntToString(((gv_missionSurvivalVariant1.lv_convoyPoints[6] - lv_index) + 1))));
        }
    }
    else {
    }
    lib90F7C81D_gf_InitConvoyPathDisplay(gv_missionSurvivalVariant1.lv_convoyRoute[0], gv_missionSurvivalVariant1.lv_convoyRoute[38], 0, false);
    lv_index = 0;
    for ( ; ( (autoF416D278_ai >= 0 && lv_index <= autoF416D278_ae) || (autoF416D278_ai < 0 && lv_index >= autoF416D278_ae) ) ; lv_index += autoF416D278_ai ) {
        lib90F7C81D_gf_AddConvoyPathPoint(gv_missionSurvivalVariant1.lv_convoyRoute[lv_index], 0);
    }
    lib90F7C81D_gf_InitConvoyPathDisplay(gv_missionSurvivalVariant1.lv_convoyRoute[37], gv_missionSurvivalVariant1.lv_convoyRoute[gv_missionSurvivalVariant1.lv_convoyPoints[(lp_route - 1)]], 1, false);
    auto9E9416FE_ae = gv_missionSurvivalVariant1.lv_convoyPoints[(lp_route - 1)];
    lv_index = 37;
    for ( ; ( (auto9E9416FE_ai >= 0 && lv_index <= auto9E9416FE_ae) || (auto9E9416FE_ai < 0 && lv_index >= auto9E9416FE_ae) ) ; lv_index += auto9E9416FE_ai ) {
        lib90F7C81D_gf_AddConvoyPathPoint(gv_missionSurvivalVariant1.lv_convoyRoute[lv_index], 1);
    }
}

void gf_DropoffSatchelItem (point lp_location) {
    // Variable Declarations
    unit lv_droppod;
    actor lv_tempSatchelPing;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/B06803ED"), gv_debug.lv_gameEvents);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/147583F4") + StringToText(libNtve_gf_ConvertPointToString(lp_location))), gv_debug.lv_gameEvents);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/B7813E65"));
    libNtve_gf_CreateModelAtPoint("PingBonus", lp_location);
    lv_tempSatchelPing = libNtve_gf_ActorLastCreated();
    ActorSend(lv_tempSatchelPing, "SetScale 3.000000");
    ActorSend(lv_tempSatchelPing, "SetHeight 0.100000");
    Wait(RandomInt(10, 15), c_timeGame);
    libNtve_gf_KillModel(lv_tempSatchelPing);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", lp_location);
    gv_missionSurvivalVariant1.lv_satchelBeacon = libNtve_gf_ActorLastCreated();
    Wait(1.0, c_timeGame);
    UnitCreate(1, "TerranDropPod", c_unitCreateIgnorePlacement, 0, lp_location, 270.0);
    lv_droppod = UnitLastCreated();
    UnitSetScale(lv_droppod, 50.0, 50.0, 50.0);
    libNtve_gf_MakeUnitInvulnerable(lv_droppod, true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBonus", PointWithOffset(lp_location, 0.0, 0.0), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 8.0, 270.0);
    PingSetScale(PingLastCreated(), 1.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/5261E4E0"));
    Wait(2.0, c_timeGame);
    lib90F7C81D_gf_SpawnItemAtLocationNEW("SatchelCharge", 100, lp_location, 100, 1, 1);
    gv_missionSurvivalVariant1.lv_satchelItem = UnitLastCreated();
    UnitKill(lv_droppod);
    TriggerEnable(gt_SatchelBeacon, true);
    lib90F7C81D_gf_MissionItemPingAddItem(gv_missionSurvivalVariant1.lv_satchelItem);
}

void gf_SpawnSatchel (point lp_location, int lp_sector, int lp_target, bool lp_bonus) {
    // Variable Declarations
    int lv_randomAngle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_randomAngle = RandomInt(0, 360);

    // Implementation
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/717A9CC3"), gv_debug.lv_gameEvents);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/804789FB") + IntToText(lp_sector) + StringExternal("Param/Value/ED0016CB") + IntToText(lp_target) + libNtve_gf_ConvertBooleanToText(lp_bonus)), gv_debug.lv_gameEvents);
    gv_missionSurvivalVariant1.lv_currentSanie[0] = lp_sector;
    gv_missionSurvivalVariant1.lv_currentSanie[1] = lp_target;
    if ((gv_missionSurvivalVariant1.lv_currentSanie[0] == 3) && (gv_missionSurvivalVariant1.lv_currentSanie[1] == 8)) {
        gv_missionSurvivalVariant1.lv_saniesTimer += 75;
        if ((PlayerGroupCount(lib90F7C81D_gv_players) >= 6)) {
            gf_SendTimedBossSpawn(RandomFixed(60.0, 90.0), "Metasis", null);
            TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/EC9DA161"), gv_debug.lv_gameEvents);
        }
    }
    else {
        gv_missionSurvivalVariant1.lv_saniesTimer += 15;
    }
    if ((gv_missionSurvivalVariant1.lv_saniesKilled == 4)) {
        if ((PlayerGroupCount(lib90F7C81D_gv_players) >= 6)) {
            gf_SendTimedBossSpawn(RandomFixed(30.0, 45.0), "Arachnathid", null);
            TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/5987992C"), gv_debug.lv_gameEvents);
        }
    }

    gv_missionSurvivalVariant1.lv_satchelTimeRemaining = gv_missionSurvivalVariant1.lv_saniesTimer;
    lib90F7C81D_gf_MissionItemPingRemoveItem(gv_missionSurvivalVariant1.lv_satchelItem);
    libNtve_gf_KillModel(gv_missionSurvivalVariant1.lv_satchelBeacon);
    UnitKill(gv_missionSurvivalVariant1.lv_satchelItem);
    UnitInventoryRemove(gv_missionSurvivalVariant1.lv_satchelItem);
    gv_missionSurvivalVariant1.lv_satchelItem = null;
    UnitCreate(1, "M200SatchelCharge", c_unitCreateIgnorePlacement, 0, lp_location, lv_randomAngle);
    gv_missionSurvivalVariant1.lv_satchelUnit = UnitLastCreated();
    lib90F7C81D_gf_MissionItemPingAddItem(gv_missionSurvivalVariant1.lv_satchelUnit);
    HookupBossBarUAD(UnitLastCreated(), StringExternal("Param/Value/FC0A0967"));
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "TextBoxCountdown/Label", gv_missionSurvivalVariant1.lv_satchelUnit);
    gv_missionSurvivalVariant1.lv_satchelLabel = DialogControlLastCreated();
    if ((lp_bonus == true)) {
        gv_missionSurvivalVariant1.lv_saniesBonusAllowed[(lp_sector - 1)][(lp_target - 1)] = false;
        gv_missionSurvivalVariant1.lv_currentSanie[2] = 1;
    }
    else {
        gv_missionSurvivalVariant1.lv_saniesTargetAllowed[(lp_sector - 1)][(lp_target - 1)] = false;
        gv_missionSurvivalVariant1.lv_currentSanie[2] = 0;
        if ((TriggerIsEnabled(gt_SatchelDamaged) == true)) {
            gv_missionSurvivalVariant1.lv_satchelMO = true;
            UnitBehaviorAdd(gv_missionSurvivalVariant1.lv_satchelUnit, "SatchelDamageResponse", gv_missionSurvivalVariant1.lv_satchelUnit, 1);
        }
    }
    libNtve_gf_SetDialogItemText(gv_missionSurvivalVariant1.lv_satchelLabel, IntToText(gv_missionSurvivalVariant1.lv_satchelTimeRemaining), PlayerGroupAll());
    ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateActive);
    gv_missionSurvivalVariant1.lv_satchelDestroyed = false;
    TriggerEnable(gt_SatchelDeath, true);
    TriggerEnable(gt_SatchelTimer, true);
    Wait(RandomFixed(10.0, 20.0), c_timeGame);
    lib90F7C81D_gf_RunWeatherEvent("RandomWeather");
}

void gf_CreateDebris () {
    // Variable Declarations
    int lv_rng;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rng = RandomInt(1, 3);

    // Implementation
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/06B94ED5"), gv_debug.lv_gameEvents);
    UnitCreate(1, "DestructibleDebris6x6", 0, 0, PointFromId(1558149469), 270.0);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitStatusBarOverride(UnitLastCreated(), -1);
    UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
    UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
    UnitCreate(1, "DestructibleDebris6x6", 0, 0, PointFromId(1060420489), 270.0);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitStatusBarOverride(UnitLastCreated(), -1);
    UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
    UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
    UnitCreate(1, "DestructibleDebris6x6", 0, 0, PointFromId(1364785448), 270.0);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitStatusBarOverride(UnitLastCreated(), -1);
    UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
    UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
    UnitRemove(gv_missionSurvivalVariant1.lv_saniesTargetUnit[1][6]);
    UnitCreate(1, "DestructibleDebris6x6", 0, 0, PointFromId(1783141003), 270.0);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitStatusBarOverride(UnitLastCreated(), -1);
    UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
    UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
    gv_missionSurvivalVariant1.lv_saniesTargetUnit[1][6] = UnitLastCreated();
    if ((lv_rng == 1)) {
        PingDestroy(libHots_gf_PingStoredForUnit(gv_missionSurvivalVariant1.lv_saniesBonusUnit[2][3], 1));
        UnitRemove(gv_missionSurvivalVariant1.lv_saniesBonusUnit[2][3]);
        UnitCreate(1, "DestructibleDebris6x6", 0, 0, PointFromId(177748193), 270.0);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        UnitStatusBarOverride(UnitLastCreated(), -1);
        UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
        UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
        UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
        gv_missionSurvivalVariant1.lv_saniesBonusUnit[2][3] = UnitLastCreated();
        PingDestroy(libHots_gf_PingStoredForUnit(gv_missionSurvivalVariant1.lv_saniesBonusUnit[2][5], 1));
        UnitRemove(gv_missionSurvivalVariant1.lv_saniesBonusUnit[2][5]);
        UnitCreate(1, "DestructibleDebris6x6", 0, 0, PointFromId(462768056), 270.0);
        UnitSetScale(UnitLastCreated(), 150.0, 100.0, 100.0);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        UnitStatusBarOverride(UnitLastCreated(), -1);
        UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
        UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
        UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
        gv_missionSurvivalVariant1.lv_saniesBonusUnit[2][5] = UnitLastCreated();
    }
    else if ((lv_rng == 2)) {
        PingDestroy(libHots_gf_PingStoredForUnit(gv_missionSurvivalVariant1.lv_saniesBonusUnit[2][4], 1));
        UnitRemove(gv_missionSurvivalVariant1.lv_saniesBonusUnit[2][4]);
        UnitCreate(1, "DestructibleDebris6x6", 0, 0, PointFromId(493328075), 270.0);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        UnitStatusBarOverride(UnitLastCreated(), -1);
        UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
        UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
        UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
        gv_missionSurvivalVariant1.lv_saniesBonusUnit[2][4] = UnitLastCreated();
        PingDestroy(libHots_gf_PingStoredForUnit(gv_missionSurvivalVariant1.lv_saniesBonusUnit[2][3], 1));
        UnitRemove(gv_missionSurvivalVariant1.lv_saniesBonusUnit[2][3]);
        UnitCreate(1, "DestructibleDebris6x6", 0, 0, PointFromId(177748193), 270.0);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        UnitStatusBarOverride(UnitLastCreated(), -1);
        UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
        UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
        UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
        gv_missionSurvivalVariant1.lv_saniesBonusUnit[2][3] = UnitLastCreated();
    }
    else if ((lv_rng == 3)) {
        PingDestroy(libHots_gf_PingStoredForUnit(gv_missionSurvivalVariant1.lv_saniesBonusUnit[2][4], 1));
        UnitRemove(gv_missionSurvivalVariant1.lv_saniesBonusUnit[2][4]);
        UnitCreate(1, "DestructibleDebris6x6", 0, 0, PointFromId(493328075), 270.0);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        UnitStatusBarOverride(UnitLastCreated(), -1);
        UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
        UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
        UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
        gv_missionSurvivalVariant1.lv_saniesBonusUnit[2][4] = UnitLastCreated();
        PingDestroy(libHots_gf_PingStoredForUnit(gv_missionSurvivalVariant1.lv_saniesBonusUnit[2][5], 1));
        UnitRemove(gv_missionSurvivalVariant1.lv_saniesBonusUnit[2][5]);
        UnitCreate(1, "DestructibleDebris6x6", 0, 0, PointFromId(462768056), 270.0);
        UnitSetScale(UnitLastCreated(), 150.0, 100.0, 100.0);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        UnitStatusBarOverride(UnitLastCreated(), -1);
        UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
        UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
        UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
        gv_missionSurvivalVariant1.lv_saniesBonusUnit[2][5] = UnitLastCreated();
    }
    if ((lv_rng == 1)) {
        PingDestroy(libHots_gf_PingStoredForUnit(gv_missionSurvivalVariant1.lv_saniesBonusUnit[1][2], 1));
        UnitRemove(gv_missionSurvivalVariant1.lv_saniesBonusUnit[1][2]);
        UnitCreate(1, "DestructibleDebris6x6", 0, 0, PointFromId(1628468221), 270.0);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        UnitStatusBarOverride(UnitLastCreated(), -1);
        UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
        UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
        UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
        gv_missionSurvivalVariant1.lv_saniesBonusUnit[1][2] = UnitLastCreated();
    }
    else {
        PingDestroy(libHots_gf_PingStoredForUnit(gv_missionSurvivalVariant1.lv_saniesBonusUnit[1][3], 1));
        UnitRemove(gv_missionSurvivalVariant1.lv_saniesBonusUnit[1][3]);
        UnitCreate(1, "DestructibleDebris6x6", 0, 0, PointFromId(1843216438), 270.0);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        UnitStatusBarOverride(UnitLastCreated(), -1);
        UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
        UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
        UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
        gv_missionSurvivalVariant1.lv_saniesBonusUnit[1][3] = UnitLastCreated();
    }
    if ((lv_rng == 1)) {
        PingDestroy(libHots_gf_PingStoredForUnit(gv_missionSurvivalVariant1.lv_saniesBonusUnit[0][1], 1));
        UnitRemove(gv_missionSurvivalVariant1.lv_saniesBonusUnit[0][1]);
        UnitCreate(1, "DestructibleDebris6x6", 0, 0, PointFromId(1313030090), 270.0);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        UnitStatusBarOverride(UnitLastCreated(), -1);
        UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
        UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
        UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
        gv_missionSurvivalVariant1.lv_saniesBonusUnit[0][1] = UnitLastCreated();
    }
    else {
        PingDestroy(libHots_gf_PingStoredForUnit(gv_missionSurvivalVariant1.lv_saniesBonusUnit[0][2], 1));
        UnitRemove(gv_missionSurvivalVariant1.lv_saniesBonusUnit[0][2]);
        UnitCreate(1, "DestructibleDebris6x6", 0, 0, PointFromId(1195597571), 270.0);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        UnitStatusBarOverride(UnitLastCreated(), -1);
        UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
        UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
        UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
        gv_missionSurvivalVariant1.lv_saniesBonusUnit[0][2] = UnitLastCreated();
    }
}

void gf_SpawnSanies (string lp_location) {
    // Variable Declarations
    int lv_randomAngle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_randomAngle = RandomInt(0, 360);

    // Implementation
    UnitCreate(1, "Sanies", c_unitCreateIgnorePlacement, 14, PointFromName(lp_location), lv_randomAngle);
    UnitGroupAdd(gv_missionSurvivalVariant1.lv_saniesGroup, UnitLastCreated());
    gv_missionSurvivalVariant1.lv_saniesAlive += 1;
    if ((StringWord(lp_location, 4) == "Target")) {
        gv_missionSurvivalVariant1.lv_saniesTargetUnit[(StringToInt(StringWord(lp_location, 2)) - 1)][(StringToInt(StringWord(lp_location, 5)) - 1)] = UnitLastCreated();
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_missionSurvivalVariant1.lv_saniesTargetUnit[(StringToInt(StringWord(lp_location, 2)) - 1)][(StringToInt(StringWord(lp_location, 5)) - 1)]), ColorWithAlpha(25.10, 0.00, 0.00, 49.80), 0.0, 270.0);
        libHots_gf_StorePingForUnit(gv_missionSurvivalVariant1.lv_saniesTargetUnit[(StringToInt(StringWord(lp_location, 2)) - 1)][(StringToInt(StringWord(lp_location, 5)) - 1)], 1, PingLastCreated());
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/B34AE130"));
        PingSetVisible(libHots_gf_PingStoredForUnit(gv_missionSurvivalVariant1.lv_saniesTargetUnit[(StringToInt(StringWord(lp_location, 2)) - 1)][(StringToInt(StringWord(lp_location, 5)) - 1)], 1), false);
    }
    else if ((StringWord(lp_location, 4) == "Bonus")) {
        gv_missionSurvivalVariant1.lv_saniesBonusUnit[(StringToInt(StringWord(lp_location, 2)) - 1)][(StringToInt(StringWord(lp_location, 5)) - 1)] = UnitLastCreated();
        libNtve_gf_AttachModelToUnit(UnitLastCreated(), "BeaconAttack", "Ref_Head");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 1.250000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor 0,64,128");
        GAx3_ActorShowAsyn(PlayerGroupAll(), libNtve_gf_ActorLastCreated(), false);
        libHots_gf_StoreActorForUnit(gv_missionSurvivalVariant1.lv_saniesBonusUnit[(StringToInt(StringWord(lp_location, 2)) - 1)][(StringToInt(StringWord(lp_location, 5)) - 1)], 2, libNtve_gf_ActorLastCreated());
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_missionSurvivalVariant1.lv_saniesBonusUnit[(StringToInt(StringWord(lp_location, 2)) - 1)][(StringToInt(StringWord(lp_location, 5)) - 1)]), Color(0.00, 0.00, 50.20), 0.0, 270.0);
        PingSetScale(PingLastCreated(), 0.5);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/862D09C6"));
        PingSetVisible(PingLastCreated(), false);
        libHots_gf_StorePingForUnit(gv_missionSurvivalVariant1.lv_saniesBonusUnit[(StringToInt(StringWord(lp_location, 2)) - 1)][(StringToInt(StringWord(lp_location, 5)) - 1)], 1, PingLastCreated());
    }
}

void gf_BonusCheck (int lp_sector, int lp_bonus) {
    // Automatic Variable Declarations
    // Implementation
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/DBCF1DAC"), gv_debug.lv_gameEvents);
    if ((((lp_sector == 1) && (lp_bonus == 2)) || ((lp_sector == 1) && (lp_bonus == 3)))) {
        gf_BonusReward(0);
    }
    else if (((lp_sector == 1) && (lp_bonus == 1))) {
        gf_BonusReward(1);
    }
    else if (((lp_sector == 2) && (lp_bonus == 1))) {
        gf_BonusReward(2);
    }
    else if ((((lp_sector == 2) && (lp_bonus == 3)) || ((lp_sector == 2) && (lp_bonus == 4)))) {
        gf_BonusReward(3);
    }
    else if (((lp_sector == 3) && (lp_bonus == 1))) {
        gf_BonusReward(4);
    }
    else if (((lp_sector == 3) && (lp_bonus == 3))) {
        gf_BonusReward(5);
    }
    else if (((lp_sector == 3) && (lp_bonus == 2))) {
        gf_BonusReward(6);
    }
    else if ((((lp_sector == 3) && (lp_bonus == 4)) || ((lp_sector == 3) && (lp_bonus == 5)) || ((lp_sector == 3) && (lp_bonus == 6)))) {
        gf_BonusReward(7);
    }
    else if (((lp_sector == 1) && (lp_bonus == 4))) {
        gf_BonusReward(8);
    }
    else if (((lp_sector == 2) && (lp_bonus == 2))) {
        gf_BonusReward(9);
    }
}

void gf_SelectRandomBonus () {
    // Variable Declarations
    int lv_randomBonus;
    int lv_randomSection;
    int lv_bonusAllowed;
    int lv_bonusi;

    // Automatic Variable Declarations
    int autoC4663EC7_val;
    int autoA30455C3_val;

    // Variable Initialization
    lv_bonusAllowed = 4;

    // Implementation
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/7C7FDE3B"), gv_debug.lv_gameEvents);
    while ((lv_bonusi < lv_bonusAllowed)) {
        lv_randomSection = RandomInt(0, 2);
        autoC4663EC7_val = lv_randomSection;
        if (autoC4663EC7_val == 0) {
            lv_randomBonus = RandomInt(0, 3);
        }
        else if (autoC4663EC7_val == 1) {
            lv_randomBonus = RandomInt(0, 3);
        }
        else if (autoC4663EC7_val == 2) {
            lv_randomBonus = RandomInt(0, 5);
        }
        else {
        }
        while ((gv_missionSurvivalVariant1.lv_saniesBonusAllowed[lv_randomSection][lv_randomBonus] == false)) {
            lv_randomSection = RandomInt(0, 2);
            autoA30455C3_val = lv_randomSection;
            if (autoA30455C3_val == 0) {
                lv_randomBonus = RandomInt(0, 3);
            }
            else if (autoA30455C3_val == 1) {
                lv_randomBonus = RandomInt(0, 3);
            }
            else if (autoA30455C3_val == 2) {
                lv_randomBonus = RandomInt(0, 5);
            }
            else {
                lv_randomBonus = RandomInt(0, 3);
            }
            if ((UnitGetType(gv_missionSurvivalVariant1.lv_saniesBonusUnit[lv_randomSection][lv_randomBonus]) == "Sanies") && (gv_missionSurvivalVariant1.lv_saniesBonusAllowed[lv_randomSection][lv_randomBonus] == false)) {
                TextExpressionSetToken("Param/Expression/530EBEE8", "A", IntToText(lv_randomSection));
                TextExpressionSetToken("Param/Expression/530EBEE8", "B", IntToText(lv_randomBonus));
                TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/530EBEE8"), gv_debug.lv_gameEvents);
                gv_missionSurvivalVariant1.lv_saniesBonusAllowed[lv_randomSection][lv_randomBonus] = true;
                libNtve_gf_AttachModelToUnit(gv_missionSurvivalVariant1.lv_saniesBonusUnit[lv_randomSection][lv_randomBonus], "BeaconAttack", "Ref_Head");
                ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 1.250000");
                ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor 0,64,128");
                GAx3_ActorShowAsyn(PlayerGroupAll(), libHots_gf_ActorForUnit(gv_missionSurvivalVariant1.lv_saniesBonusUnit[lv_randomSection][lv_randomBonus], 2), true);
                PingSetVisible(libHots_gf_PingStoredForUnit(gv_missionSurvivalVariant1.lv_saniesBonusUnit[lv_randomSection][lv_randomBonus], 1), true);
                lv_bonusi += 1;
            }

        }
    }
}

void gf_BonusReward (int lp_bonus) {
    // Variable Declarations
    int lv_rng;
    region lv_currentregion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rng = RandomInt(1, 2);
    lv_currentregion = gv_missionSurvivalVariant1.lv_bonusRewardRegions[lp_bonus];

    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "BeaconClaimPing", RegionGetCenter(lv_currentregion), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 6.0, 270.0);
    PingSetScale(PingLastCreated(), 0.55);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/E91C5F04"));
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/1DA88464"), gv_debug.lv_gameEvents);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/D0548CA6") + IntToText(lp_bonus)), gv_debug.lv_gameEvents);
    if ((lv_rng == 1)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/64D5B7FF"), gv_debug.lv_gameEvents);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("AmmoCase", 100, RegionRandomPoint(lv_currentregion), 100, 1, 2);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("AmmoCase", 50, RegionRandomPoint(lv_currentregion), 100, 1, 2);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("Magazines", 100, RegionRandomPoint(lv_currentregion), 100, 1, 4);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("Magazines", 50, RegionRandomPoint(lv_currentregion), 100, 1, 5);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("QuikClot", 100, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("QuikClot", 50, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("AdvancedQuikClot", 25, RegionRandomPoint(lv_currentregion), 100, 1, 2);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("FragGrenade", 100, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("FragGrenade", 50, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("SmokeGrenadeItem", 100, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("SmokeGrenadeItem", 50, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("FlareGun", 100, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("FlareGun", 50, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("GroundFlareItem", 100, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("GroundFlareItem", 50, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("Flashlight", 25, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("Binoculars", 25, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("FirstAidKit", 100, RegionRandomPoint(lv_currentregion), 100, 1, 2);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("AdvancedFirstAidKit", 25, RegionRandomPoint(lv_currentregion), 100, 1, 2);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("AntiVeninShot", 100, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("AdvancedAntiVeninShot", 25, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("ClaymoreItem", 17, RegionRandomPoint(lv_currentregion), 100, 1, 2);
    }
    else {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/A07494F3"), gv_debug.lv_gameEvents);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("AmmoCase", 100, RegionRandomPoint(lv_currentregion), 100, 1, 2);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("AmmoCase", 50, RegionRandomPoint(lv_currentregion), 100, 1, 2);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("Magazines", 100, RegionRandomPoint(lv_currentregion), 100, 1, 4);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("Magazines", 50, RegionRandomPoint(lv_currentregion), 100, 1, 5);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("QuikClot", 100, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("QuikClot", 50, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("AdvancedQuikClot", 25, RegionRandomPoint(lv_currentregion), 100, 1, 2);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("FragGrenade", 100, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("FragGrenade", 50, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("SmokeGrenadeItem", 100, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("SmokeGrenadeItem", 50, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("FlareGun", 100, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("FlareGun", 50, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("GroundFlareItem", 50, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("GroundFlareItem", 100, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("Flashlight", 25, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("Binoculars", 25, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("FirstAidKit", 100, RegionRandomPoint(lv_currentregion), 100, 1, 2);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("AdvancedFirstAidKit", 25, RegionRandomPoint(lv_currentregion), 100, 1, 2);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("AntiVeninShot", 100, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("AdvancedAntiVeninShot", 25, RegionRandomPoint(lv_currentregion), 100, 1, 1);
        lib90F7C81D_gf_SpawnItemAtLocationNEW("ClaymoreItem", 17, RegionRandomPoint(lv_currentregion), 100, 1, 2);
    }
}

void gf_SpawnCivilians (string lp_sector, int lp_rangeStart, int lp_rangeEnd) {
    // Variable Declarations
    point lv_p;
    point lv_target;

    // Automatic Variable Declarations
    int autoA5391F1C_n;
    int autoA5391F1C_i;

    // Variable Initialization
    lv_target = PointFromId(400589107);

    // Implementation
    autoA5391F1C_n = gf_CivilianScale(lp_sector);
    for (autoA5391F1C_i = 1; autoA5391F1C_i <= autoA5391F1C_n; autoA5391F1C_i += 1) {
        TextExpressionSetToken("Param/Expression/F8E6B516", "A", StringToText(lp_sector));
        TextExpressionSetToken("Param/Expression/F8E6B516", "B", IntToText(RandomInt(lp_rangeStart, lp_rangeEnd)));
        TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/F8E6B516"), gv_debug.lv_gameEvents);
        lv_p = PointFromName(("MSV2_" + lp_sector + "_" + IntToString(RandomInt(lp_rangeStart, lp_rangeEnd))));
        if ((RandomInt(0, 1) == 0)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CivilianFemale", 0, 0, lv_p);
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CivilianFemale", 0, 0, lv_p);
        }
        Wait(2.0, c_timeGame);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_target), c_orderQueueReplace);
    }
}

void gf_CreateConvoyEscort (int lp_length) {
    // Variable Declarations
    int lv_convoyChunkSize;
    int lv_i;
    int lv_pstart;
    int lv_pend;
    region lv_startRegion;

    // Automatic Variable Declarations
    int auto24F4B615_ae;
    const int auto24F4B615_ai = 1;
    int auto07B106AE_ae;
    const int auto07B106AE_ai = 1;

    // Variable Initialization
    lv_convoyChunkSize = 3;
    lv_pend = 12;
    lv_startRegion = RegionFromId(261);

    // Implementation
    auto24F4B615_ae = ((lp_length * lv_convoyChunkSize) - 1);
    lv_i = 0;
    for ( ; ( (auto24F4B615_ai >= 0 && lv_i <= auto24F4B615_ae) || (auto24F4B615_ai < 0 && lv_i >= auto24F4B615_ae) ) ; lv_i += auto24F4B615_ai ) {
        TextExpressionSetToken("Param/Expression/11C2D4FC", "A", IntToText(lv_i));
        TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/11C2D4FC"), gv_debug.lv_gameEvents);
        gv_missionSurvivalVariant2.lv_convoyLength += 1;
        if (((lv_i == 0) || (lv_i == 3))) {
            UnitCreate(1, "MATVConvoy", c_unitCreateIgnorePlacement, 13, RegionGetCenter(lv_startRegion), 90.0);
            gv_missionSurvivalVariant2.lv_convoy[lv_i] = UnitLastCreated();
            TextExpressionSetToken("Param/Expression/117AF8EA", "A", IntToText(lv_i));
            TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/117AF8EA"), gv_debug.lv_gameEvents);
            if ((lv_i == 0)) {
                HookupBossBarUAD(gv_missionSurvivalVariant2.lv_convoy[lv_i], StringExternal("Param/Value/8D9E4509"));
                TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/D856051A"), gv_debug.lv_gameEvents);
            }
        }
        else {
            UnitCreate(1, "CargoTruckUnitTrailer", c_unitCreateIgnorePlacement, 13, RegionGetCenter(lv_startRegion), 90.0);
            gv_missionSurvivalVariant2.lv_convoy[lv_i] = UnitLastCreated();
            TextExpressionSetToken("Param/Expression/DF6CE6EB", "A", IntToText(lv_i));
            TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/DF6CE6EB"), gv_debug.lv_gameEvents);
        }
        Wait(1.0, c_timeGame);
        auto07B106AE_ae = lv_pend;
        lv_pstart = 1;
        for ( ; ( (auto07B106AE_ai >= 0 && lv_pstart <= auto07B106AE_ae) || (auto07B106AE_ai < 0 && lv_pstart >= auto07B106AE_ae) ) ; lv_pstart += auto07B106AE_ai ) {
            TextExpressionSetToken("Param/Expression/87BB9021", "A", IntToText(lv_i));
            TextExpressionSetToken("Param/Expression/87BB9021", "B", IntToText(lv_pstart));
            TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/87BB9021"), gv_debug.lv_gameEvents);
            UnitIssueOrder(gv_missionSurvivalVariant2.lv_convoy[lv_i], OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("MSV2_M_" + IntToString(lv_pstart)))), c_orderQueueAddToEnd);
        }
        lv_pend -= 1;
        TextExpressionSetToken("Param/Expression/1575A70E", "A", IntToText(lv_pend));
        TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/1575A70E"), gv_debug.lv_gameEvents);
    }
}

void gf_MoveConvoyEscort (int lp_start, int lp_end) {
    // Variable Declarations
    int lv_iend;
    int lv_c;
    int lv_i;

    // Automatic Variable Declarations
    int auto79A799E2_ae;
    const int auto79A799E2_ai = 1;
    int auto09F7FBCD_ae;
    const int auto09F7FBCD_ai = 1;

    // Variable Initialization
    lv_iend = lp_end;

    // Implementation
    auto79A799E2_ae = (gv_missionSurvivalVariant2.lv_convoyLength - 1);
    lv_c = 0;
    for ( ; ( (auto79A799E2_ai >= 0 && lv_c <= auto79A799E2_ae) || (auto79A799E2_ai < 0 && lv_c >= auto79A799E2_ae) ) ; lv_c += auto79A799E2_ai ) {
        auto09F7FBCD_ae = lv_iend;
        lv_i = lp_start;
        for ( ; ( (auto09F7FBCD_ai >= 0 && lv_i <= auto09F7FBCD_ae) || (auto09F7FBCD_ai < 0 && lv_i >= auto09F7FBCD_ae) ) ; lv_i += auto09F7FBCD_ai ) {
            TextExpressionSetToken("Param/Expression/C54C4274", "A", IntToText(lv_c));
            TextExpressionSetToken("Param/Expression/C54C4274", "B", IntToText(lv_i));
            TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/C54C4274"), gv_debug.lv_gameEvents);
            UnitIssueOrder(gv_missionSurvivalVariant2.lv_convoy[lv_c], OrderTargetingPoint(AbilityCommand("move", 0), PointFromName(("MSV2_M_" + IntToString(lv_i)))), c_orderQueueAddToEnd);
        }
        lv_iend -= 1;
    }
}

int gf_CivilianScale (string lp_section) {
    // Automatic Variable Declarations
    string auto75DBAA52_val;

    // Implementation
    auto75DBAA52_val = StringCase(lp_section, true);
    if (auto75DBAA52_val == "A") {
        if ((PlayerGroupCount(lib90F7C81D_gv_players) > 6)) {
            return 45;
        }
        else {
            return 30;
        }
    }
    else if (auto75DBAA52_val == "B") {
        if ((PlayerGroupCount(lib90F7C81D_gv_players) > 6)) {
            return 30;
        }
        else {
            return 15;
        }
    }
    else if (auto75DBAA52_val == "C") {
        if ((PlayerGroupCount(lib90F7C81D_gv_players) > 6)) {
            return 45;
        }
        else {
            return 30;
        }
    }
    else if (auto75DBAA52_val == "D") {
        if ((PlayerGroupCount(lib90F7C81D_gv_players) > 6)) {
            return 30;
        }
        else {
            return 15;
        }
    }
    else if (auto75DBAA52_val == "E") {
        if ((PlayerGroupCount(lib90F7C81D_gv_players) > 6)) {
            return 45;
        }
        else {
            return 30;
        }
    }
    else {
        if ((PlayerGroupCount(lib90F7C81D_gv_players) > 6)) {
            return 45;
        }
        else {
            return 30;
        }
    }
}

void gf_RushBoss () {
    // Variable Declarations
    int lv_randomInt;
    int lv_spawnCount;
    unit lv_randomCave;

    // Automatic Variable Declarations
    int autoD6986A49_n;
    int autoD6986A49_i;

    // Variable Initialization
    lv_randomInt = RandomInt(0, 11);
    lv_randomCave = UnitGroupClosestToPoint(gv_bossRush.lv_spawnerUnitGroups, RegionGetCenter(gf_GetRushRegion()));

    // Implementation
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/3D408477"), gv_debug.lv_gameEvents);
    while ((gf_CheckRushBoss(gv_bossRush.lv_bossTypes[lv_randomInt]) == false)) {
        lv_randomInt = RandomInt(0, 11);
    }
    lv_spawnCount = gf_GetBossCount(gv_bossRush.lv_bossTypes[lv_randomInt]);
    ObjectiveDestroy(lib90F7C81D_gv_mainObj);
    TextExpressionSetToken("Param/Expression/9ACC3DC5", "A", UnitTypeGetName(gv_bossRush.lv_bossTypes[lv_randomInt]));
    TextExpressionSetToken("Param/Expression/9ACC3DC5", "B", IntToText(lv_spawnCount));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/9ACC3DC5"), StringToText(""), c_objectiveStateActive, true);
    lib90F7C81D_gv_mainObj = ObjectiveLastCreated();
    TimerStart(lib90F7C81D_gv_missiontimer, 120.0, false, c_timeGame);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), true);
    TriggerEnable(gt_RushBossTimer, true);
    TextExpressionSetToken("Param/Expression/854930D4", "A", UnitTypeGetName(gv_bossRush.lv_bossTypes[lv_randomInt]));
    TextExpressionSetToken("Param/Expression/854930D4", "B", IntToText(lv_spawnCount));
    TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/854930D4"), gv_debug.lv_gameEvents);
    autoD6986A49_n = lv_spawnCount;
    for (autoD6986A49_i = 1; autoD6986A49_i <= autoD6986A49_n; autoD6986A49_i += 1) {
        UnitCreate(1, gv_bossRush.lv_bossTypes[lv_randomInt], c_unitCreateIgnorePlacement, 14, UnitGetPosition(lv_randomCave), 270.0);
        UnitGroupAdd(gv_bossRush.lv_bossGroup, UnitLastCreated());
        TriggerAddEventUnitDied(gt_TimedRushBossDeath, UnitRefFromUnit(UnitLastCreated()));
        UnitGroupAdd(lib90F7C81D_gv_undeadGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(lib90F7C81D_gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
        PingSetScale(PingLastCreated(), 0.5);
        PingSetTooltip(PingLastCreated(), UnitGetName(UnitLastCreated()));
        PingSetUnit(PingLastCreated(), UnitLastCreated());
        libHots_gf_StorePingForUnit(UnitLastCreated(), 1, PingLastCreated());
        Wait(1.0, c_timeGame);
    }
    TriggerEnable(gt_TimedRushBossDeath, true);
    Wait(RandomFixed(5.0, 15.0), c_timeGame);
    if ((PlayerGroupCount(lib90F7C81D_gv_players) > 8)) {
        UnitCreate(3, "T2Reaper", 0, 14, UnitGetPosition(lv_randomCave), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(lib90F7C81D_gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        UnitGroupAdd(lib90F7C81D_gv_undeadGroup, UnitLastCreated());
        UnitCreate(3, "Krill", 0, 14, UnitGetPosition(lv_randomCave), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(lib90F7C81D_gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        UnitGroupAdd(lib90F7C81D_gv_undeadGroup, UnitLastCreated());
    }
    else if ((PlayerGroupCount(lib90F7C81D_gv_players) > 4)) {
        UnitCreate(1, "T2Reaper", 0, 14, UnitGetPosition(lv_randomCave), 270.0);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(lib90F7C81D_gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        UnitGroupAdd(lib90F7C81D_gv_undeadGroup, UnitLastCreated());
    }
}

void gf_CreateSpawnRegion () {
    // Variable Declarations
    region lv_positiveregion;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gv_bossRush.lv_currentSpawnRegion = RegionEmpty();
    lv_positiveregion = RegionCircle(RegionGetCenter(gf_GetRushRegion()), ((gf_GetRushRadius() / 2.0) * 3.0));
    RegionAddCircle(lv_positiveregion, false, RegionGetCenter(gf_GetRushRegion()), ((gf_GetRushRadius() / 2.0) * 2.0));
    gv_bossRush.lv_currentSpawnRegion = lv_positiveregion;
}

void gf_SelectRandomZone () {
    // Variable Declarations
    fixed lv_distance;
    int lv_instanceCount;
    int lv_currentInstance;
    int lv_newInstance;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_instanceCount = UserDataInstanceCount("BossRushZones");
    lv_currentInstance = gv_bossRush.lv_currentInstanceNumber;

    // Implementation
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/44967ED6"), gv_debug.lv_gameEvents);
    lv_newInstance = RandomInt(1, lv_instanceCount);
    while ((lv_currentInstance == lv_newInstance)) {
        lv_newInstance = RandomInt(1, lv_instanceCount);
    }
    gv_bossRush.lv_currentInstanceNumber = lv_newInstance;
    gv_bossRush.lv_currentInstance = UserDataInstance("BossRushZones", lv_newInstance);
    TextExpressionSetToken("Param/Expression/C1654842", "A", StringToText(UserDataGetString("BossRushZones", gv_bossRush.lv_currentInstance, "Region", 1)));
    TextExpressionSetToken("Param/Expression/C1654842", "B", IntToText(gf_GetRushTime()));
    TextExpressionSetToken("Param/Expression/C1654842", "C", IntToText(gf_GetRushTimeScaled()));
    TextExpressionSetToken("Param/Expression/C1654842", "D", gf_GetRushName());
    TextExpressionSetToken("Param/Expression/C1654842", "E", IntToText(gf_GetRushRadius()));
    TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/C1654842"), gv_debug.lv_gameEvents);
    gf_CreateSpawnRegion();
    RegionSetCenter(RegionFromId(62), RegionGetCenter(gf_GetRushRegion()));
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/B6572516"), gv_debug.lv_gameEvents);
    ActorSend(gv_bossRush.lv_currentZoneHighlight, "Destroy");
    PingDestroy(gv_bossRush.lv_currentPingActor);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/224DF208"), gv_debug.lv_gameEvents);
    libNtve_gf_CreateModelAtPoint("RegionHighlight", RegionGetCenter(gf_GetRushRegion()));
    TextExpressionSetToken("Param/Expression/0961F5B7", "A", FixedToText(((IntToFixed(gf_GetRushRadius()) / 2.0) * 0.167), c_fixedPrecisionAny));
    ActorSendAsText(libNtve_gf_ActorLastCreated(), TextExpressionAssemble("Param/Expression/0961F5B7"));
    gv_bossRush.lv_currentZoneHighlight = libNtve_gf_ActorLastCreated();
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/B79EED42"), gv_debug.lv_gameEvents);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "BeaconDefendPing", RegionGetCenter(gf_GetRushRegion()), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 0.0, 270.0);
    gv_bossRush.lv_currentPingActor = PingLastCreated();
    ObjectiveDestroy(lib90F7C81D_gv_mainObj);
    TextExpressionSetToken("Param/Expression/BDF8DE03", "B", gf_GetRushName());
    TextExpressionSetToken("Param/Expression/BDF8DE03", "A", IntToText(gv_bossRush.lv_currentRound));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/BDF8DE03"), StringToText(""), c_objectiveStateActive, true);
    lib90F7C81D_gv_mainObj = ObjectiveLastCreated();
    lv_distance = ((DistanceBetweenPoints(RegionGetCenter(gf_GetRushRegion()), RegionGetCenter(gv_bossRush.lv_lastRegion)) / 2.5) + 20.0);
    gv_bossRush.lv_lastRegion = gf_GetRushRegion();
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/C84605F3"), gv_debug.lv_gameEvents);
    TimerStart(lib90F7C81D_gv_missiontimer, FixedToInt(lv_distance), false, c_timeGame);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), true);
    lib90F7C81D_gv_missiontimer = TimerLastStarted();
    TriggerEnable(gt_RushPointAToBTimer, true);
}

region gf_GetRushRegion () {
    // Automatic Variable Declarations
    // Implementation
    return RegionFromName(UserDataGetString("BossRushZones", gv_bossRush.lv_currentInstance, "Region", 1));
}

int gf_GetRushTime () {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("BossRushZones", gv_bossRush.lv_currentInstance, "Time", 1);
}

text gf_GetRushName () {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetText("BossRushZones", gv_bossRush.lv_currentInstance, "Name", 1);
}

int gf_GetRushRadius () {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("BossRushZones", gv_bossRush.lv_currentInstance, "Radius", 1);
}

int gf_GetRushTimeScaled () {
    // Variable Declarations
    int lv_temptime;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_temptime = (gf_GetRushTime() + (gv_bossRush.lv_currentRound * 5));

    // Implementation
    if ((lv_temptime >= 180)) {
        return 180;
    }
    else {
        return lv_temptime;
    }
}

bool gf_CheckRushBoss (string lp_boss) {
    // Automatic Variable Declarations
    string auto681CFE3D_val;

    // Implementation
    auto681CFE3D_val = lp_boss;
    if (auto681CFE3D_val == "Arachnathid") {
        if ((gv_currentPlayerLevel >= 5.0)) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto681CFE3D_val == "Ares") {
        if ((gv_currentPlayerLevel >= 8.0)) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto681CFE3D_val == "Baron") {
        if ((gv_currentPlayerLevel >= 5.0)) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto681CFE3D_val == "Dilophosaur") {
        if ((gv_currentPlayerLevel >= 1.0)) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto681CFE3D_val == "Gargantuan") {
        if ((gv_currentPlayerLevel >= 2.0)) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto681CFE3D_val == "Gourmand") {
        if ((gv_currentPlayerLevel >= 0.0)) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto681CFE3D_val == "Immussilus") {
        if ((gv_currentPlayerLevel >= 3.0)) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto681CFE3D_val == "Metasis") {
        if ((gv_currentPlayerLevel >= 8.0)) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto681CFE3D_val == "Minerva") {
        if ((gv_currentPlayerLevel >= 7.0)) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto681CFE3D_val == "Raisuli") {
        if ((gv_currentPlayerLevel >= 0.0)) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto681CFE3D_val == "Scorpio") {
        if ((gv_currentPlayerLevel >= 3.0)) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto681CFE3D_val == "Widower") {
        if ((gv_currentPlayerLevel >= 9.0)) {
            return true;
        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
}

int gf_GetBossCount (string lp_boss) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_boss == "Metasis") || (lp_boss == "Minerva") || (lp_boss == "Ares") || (lp_boss == "Arachnathid") || (lp_boss == "Widower"))) {
        if ((PlayerGroupCount(lib90F7C81D_gv_players) > 6)) {
            return (1 + FloorI((gv_currentPlayerLevel / 11.0)));
        }
        else {
            return 1;
        }
    }
    else if (((lp_boss == "Baron") || (lp_boss == "Immussilus"))) {
        if ((PlayerGroupCount(lib90F7C81D_gv_players) > 6)) {
            return (1 + FloorI((gv_currentPlayerLevel / 5.0)));
        }
        else {
            return (1 + FloorI((gv_currentPlayerLevel / 11.0)));
        }
    }
    else if (((lp_boss == "Scorpio") || (lp_boss == "Dilophosaur") || (lp_boss == "Raisuli"))) {
        if ((PlayerGroupCount(lib90F7C81D_gv_players) > 6)) {
            return (1 + FloorI((gv_currentPlayerLevel / 4.0)));
        }
        else {
            return (1 + FloorI((gv_currentPlayerLevel / 7.0)));
        }
    }
    else if (((lp_boss == "Gourmand") || (lp_boss == "Gargantuan"))) {
        if ((PlayerGroupCount(lib90F7C81D_gv_players) > 6)) {
            return (1 + FloorI((gv_currentPlayerLevel / 4.0)));
        }
        else {
            return (1 + FloorI((gv_currentPlayerLevel / 7.0)));
        }
    }
    return 1;
}

bool gf_CheckPathability (point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    return PointPathingIsConnected(lp_point, RegionRandomPoint(gf_GetRushRegion()));
}

void gf_ProgressRound () {
    // Automatic Variable Declarations
    // Implementation
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/F29EE67C"), gv_debug.lv_gameEvents);
    TextExpressionSetToken("Param/Expression/9D8891B1", "A", IntToText(gv_bossRush.lv_currentRound));
    TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/9D8891B1"), gv_debug.lv_gameEvents);
    gv_bossRush.lv_currentRound += 1;
    if ((gv_bossRush.lv_currentRound == 51)) {
        lib90F7C81D_gf_GameVictory();
        gf_FirstWinCheck();
        gf_XPGainGlobal(50, StringExternal("Param/Value/5B4FF456"));
        Wait(2.5, c_timeGame);
        gf_XPGainGlobal(lib90F7C81D_gv_xPGained, StringExternal("Param/Value/2FC489A4"));
        Wait(2.5, c_timeGame);
    }
    if ((ModI(gv_bossRush.lv_currentRound, 2) == 0)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/90F81150"), gv_debug.lv_gameEvents);
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/7ED04B8E"), gv_debug.lv_gameEvents);
        gf_SendItemsBossRush();
        ActorSend(gv_bossRush.lv_currentZoneHighlight, "Destroy");
        PingDestroy(gv_bossRush.lv_currentPingActor);
        Wait(7.0, c_timeGame);
        gf_RushBoss();
    }
    else {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/3082E80D"), gv_debug.lv_gameEvents);
        gf_SelectRandomZone();
    }
}

void gf_SendItemsBossRush () {
    // Variable Declarations
    region lv_region;

    // Automatic Variable Declarations
    int autoCCA1557D_n;
    int autoCCA1557D_i;
    int auto5103582A_n;
    int auto5103582A_i;
    int auto7D59185A_n;
    int auto7D59185A_i;
    unitgroup autoCE374E68_g;
    int autoCE374E68_u;
    unit autoCE374E68_var;
    int autoC82071E8_val;
    int auto11C0F205_val;
    int auto0A3B707F_val;
    int autoE088872B_val;
    int auto6FA53CC5_val;
    int auto8955DB00_val;

    // Variable Initialization
    lv_region = gf_GetRushRegion();

    // Implementation
    autoCCA1557D_n = (1 + CeilingI((IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)) / IntToFixed(2))));
    for (autoCCA1557D_i = 1; autoCCA1557D_i <= autoCCA1557D_n; autoCCA1557D_i += 1) {
        lib90F7C81D_gf_AirDropItemToRegion("Magazines", lv_region, 3);
        Wait(0.0625, c_timeGame);
    }
    auto5103582A_n = (1 + CeilingI((IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)) / IntToFixed(4))));
    for (auto5103582A_i = 1; auto5103582A_i <= auto5103582A_n; auto5103582A_i += 1) {
        lib90F7C81D_gf_AirDropItemToRegionNEW("QuikClot", lv_region, 25, 100, 1, 1);
        lib90F7C81D_gf_AirDropItemToRegionNEW("FirstAidKit", lv_region, 25, 100, 1, 1);
        Wait(0.0625, c_timeGame);
    }
    auto7D59185A_n = (1 + CeilingI((IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)) / IntToFixed(6))));
    for (auto7D59185A_i = 1; auto7D59185A_i <= auto7D59185A_n; auto7D59185A_i += 1) {
        lib90F7C81D_gf_AirDropItemToRegionNEW("AntiVeninShot", lv_region, 25, 100, 1, 1);
        lib90F7C81D_gf_AirDropItemToRegionNEW("FragGrenade", lv_region, 25, 100, 1, 1);
        lib90F7C81D_gf_AirDropItemToRegionNEW("EnergyCell", lv_region, 25, 100, 1, 1);
        lib90F7C81D_gf_AirDropItemToRegionNEW("SmokeGrenadeItem", lv_region, 25, 100, 1, 1);
        lib90F7C81D_gf_AirDropItemToRegionNEW("AmmoCase", lv_region, 33, 100, 1, 1);
        Wait(0.0625, c_timeGame);
    }
    lib90F7C81D_gf_AirDropItemToRegionNEW("AdvancedQuikClot", lv_region, 20, 100, 1, 1);
    lib90F7C81D_gf_AirDropItemToRegionNEW("AdvancedFirstAidKit", lv_region, 20, 100, 1, 1);
    lib90F7C81D_gf_AirDropItemToRegionNEW("AdvancedAntiVeninShot", lv_region, 20, 100, 1, 1);
    lib90F7C81D_gf_AirDropItemToRegionNEW("Binoculars", lv_region, 20, 100, 1, 1);
    lib90F7C81D_gf_AirDropItemToRegionNEW("Flashlight", lv_region, 13, 100, 1, 1);
    lib90F7C81D_gf_AirDropItemToRegionNEW("GroundFlareItem", lv_region, 25, 100, 1, 1);
    lib90F7C81D_gf_AirDropItemToRegionNEW("FlareGun", lv_region, 33, 100, 1, 1);
    lib90F7C81D_gf_AirDropItemToRegionNEW("MGL", lv_region, 25, 100, 1, 1);
    lib90F7C81D_gf_AirDropItemToRegionNEW("40mmGrenadeItem", lv_region, 100, 100, 1, 1);
    lib90F7C81D_gf_AirDropItemToRegionNEW("MRLRocket2", lv_region, 25, 100, 1, 1);
    lib90F7C81D_gf_AirDropItemToRegionNEW("StingerMissileItem", lv_region, 25, 100, 1, 1);
    lib90F7C81D_gf_AirDropItemToRegionNEW("KevlarBodyArmor", lv_region, 25, 100, 1, 1);
    lib90F7C81D_gf_AirDropItemToRegionNEW("SPCS", lv_region, 14, 100, 1, 1);
    lib90F7C81D_gf_AirDropItemToRegionNEW("MRL", lv_region, 25, 100, 1, 1);
    lib90F7C81D_gf_AirDropItemToRegionNEW("StingerMissileLauncher", lv_region, 33, 100, 1, 1);
    if ((gv_bossRush.lv_currentRound == 40)) {
        autoCE374E68_g = lib90F7C81D_gv_heroesGroup;
        autoCE374E68_u = UnitGroupCount(autoCE374E68_g, c_unitCountAll);
        for (;; autoCE374E68_u -= 1) {
            autoCE374E68_var = UnitGroupUnitFromEnd(autoCE374E68_g, autoCE374E68_u);
            if (autoCE374E68_var == null) { break; }
            if (((UnitGetType(autoCE374E68_var) == "NewRifleman") || (UnitGetType(autoCE374E68_var) == "CombatMedic") || (UnitGetType(autoCE374E68_var) == "CavalryScout") || (UnitGetType(autoCE374E68_var) == "PlatoonLeader") || (UnitGetType(autoCE374E68_var) == "JavelinGunner"))) {
                autoC82071E8_val = RandomInt(0, 10);
                if (autoC82071E8_val == 1) {
                    lib90F7C81D_gf_AirDropItemToRegionNEW("HK42", lv_region, 1, 1, 1, 1);
                }
                else if (autoC82071E8_val == 2) {
                    lib90F7C81D_gf_AirDropItemToRegionNEW("M5MAR", lv_region, 1, 1, 1, 1);
                }
                else if (autoC82071E8_val == 3) {
                    lib90F7C81D_gf_AirDropItemToRegionNEW("USMCR", lv_region, 1, 1, 1, 1);
                }
                else if (autoC82071E8_val == 4) {
                    lib90F7C81D_gf_AirDropItemToRegionNEW("SOFAR", lv_region, 1, 1, 1, 1);
                }
                else {
                    lib90F7C81D_gf_AirDropItemToRegionNEW("StynerBR2", lv_region, 1, 1, 1, 1);
                }
            }
            else if (((UnitGetType(autoCE374E68_var) == "AutomaticRifleman"))) {
                auto11C0F205_val = RandomInt(0, 2);
                if (auto11C0F205_val == 1) {
                    lib90F7C81D_gf_AirDropItemToRegionNEW("M41SAW", lv_region, 1, 1, 1, 1);
                }
                else {
                    lib90F7C81D_gf_AirDropItemToRegionNEW("M241MMG", lv_region, 1, 1, 1, 1);
                }
            }
            else if (((UnitGetType(autoCE374E68_var) == "CombatEngineer") || (UnitGetType(autoCE374E68_var) == "SFAAT"))) {
                auto0A3B707F_val = RandomInt(0, 2);
                if (auto0A3B707F_val == 1) {
                    lib90F7C81D_gf_AirDropItemToRegionNEW("M1014", lv_region, 1, 1, 1, 1);
                }
                else {
                    lib90F7C81D_gf_AirDropItemToRegionNEW("W1200", lv_region, 1, 1, 1, 1);
                }
            }
            else if (((UnitGetType(autoCE374E68_var) == "SquadDesignatedMarksman"))) {
                autoE088872B_val = RandomInt(0, 2);
                if (autoE088872B_val == 1) {
                    lib90F7C81D_gf_AirDropItemToRegionNEW("M92Torrent", lv_region, 1, 1, 1, 1);
                }
                else {
                    lib90F7C81D_gf_AirDropItemToRegionNEW("Mk14", lv_region, 1, 1, 1, 1);
                }
            }
            else if (((UnitGetType(autoCE374E68_var) == "Flamethrower"))) {
                lib90F7C81D_gf_AirDropItemToRegionNEW("M9Flamethrower", lv_region, 1, 1, 1, 1);
            }
            else if (((UnitGetType(autoCE374E68_var) == "GhostMOS"))) {
                auto6FA53CC5_val = RandomInt(0, 2);
                if (auto6FA53CC5_val == 1) {
                    lib90F7C81D_gf_AirDropItemToRegionNEW("XR42", lv_region, 1, 1, 1, 1);
                }
                else {
                    lib90F7C81D_gf_AirDropItemToRegionNEW("IPR", lv_region, 1, 1, 1, 1);
                }
            }
            else if (((UnitGetType(autoCE374E68_var) == "Cyborg"))) {
                auto8955DB00_val = RandomInt(0, 2);
                if (auto8955DB00_val == 1) {
                    lib90F7C81D_gf_AirDropItemToRegionNEW("DeathMachine", lv_region, 1, 1, 1, 1);
                }
                else {
                    lib90F7C81D_gf_AirDropItemToRegionNEW("M935Minigun", lv_region, 1, 1, 1, 1);
                }
            }
        }
    }
}

void gf_UpdateCursor (int lp_index, int lp_player, int lp_listType) {
    // Variable Declarations
    string lv_gameLink;
    string lv_model;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_index == 0)) {
        return ;
    }
    else {
        DialogControlSetAnimationState(gv_sandbox.lv_itemListContainer, PlayerGroupSingle(lp_player), "Reset", "False");
        if ((lp_listType == ge_ListType_Item)) {
            lv_model = "Item";
            lv_gameLink = UserDataGetGameLink("SandBoxItemList", UserDataInstance("SandBoxItemList", lp_index), "Item", 1);
        }
        else if ((lp_listType == ge_ListType_Unit)) {
            if ((lp_index <= UserDataInstanceCount("MOSSetup"))) {
                lv_model = "Marine";
            }
            else {
                lv_model = UserDataGetGameLink("SandBoxUnitList", UserDataInstance("SandBoxUnitList", lp_index), "Model", 1);
            }
            lv_gameLink = UserDataGetGameLink("SandBoxUnitList", UserDataInstance("SandBoxUnitList", lp_index), "MOS Unit", 1);
        }
        else if ((lp_listType == ge_ListType_Target)) {
            lv_model = "Korhal_FlagTattered";
            lv_gameLink = null;
        }
        gf_CreateCursorModel(lv_model, lv_gameLink, lp_player);
        lv_gameLink = null;
        lv_model = null;
    }
}

void gf_CreateCursorModel (string lp_model, string lp_gameLink, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_sandbox.lv_cursor[lp_player] != null)) {
        ActorSend(gv_sandbox.lv_cursor[lp_player], "Destroy");
        gv_sandbox.lv_cursor[lp_player] = null;
    }
    ActorCreate(null, ("TriggerModelCursor" + IntToString(lp_player)), lp_model, null, null);
    gv_sandbox.lv_cursor[lp_player] = libNtve_gf_ActorLastCreated();
    gv_sandbox.lv_unit[lp_player] = lp_gameLink;
}

void gf_DestroyCursorModel (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetAnimationState(gv_sandbox.lv_itemListContainer, PlayerGroupSingle(lp_player), "Reset", "True");
    ActorSend(gv_sandbox.lv_cursor[lp_player], "Destroy");
    gv_sandbox.lv_cursor[lp_player] = null;
    gv_sandbox.lv_unit[lp_player] = null;
    gv_sandbox.lv_list[0][lp_player] = false;
    gv_sandbox.lv_list[1][lp_player] = false;
    if ((gv_sandbox.lv_enemyGroupPointEnabled[lp_player] == true)) {
        gv_sandbox.lv_enemyGroupPointEnabled[lp_player] = false;
        DialogControlSendAnimationEvent(gv_sandbox.lv_enemyGroupTargetPointButton, PlayerGroupSingle(lp_player), "Reset");
    }
}

trigger auto_gf_RemoveUpgrades_Trigger = null;
int auto_gf_RemoveUpgrades_lp_player;
point auto_gf_RemoveUpgrades_lp_point;

void gf_RemoveUpgrades (int lp_player, point lp_point) {
    auto_gf_RemoveUpgrades_lp_player = lp_player;
    auto_gf_RemoveUpgrades_lp_point = lp_point;

    if (auto_gf_RemoveUpgrades_Trigger == null) {
        auto_gf_RemoveUpgrades_Trigger = TriggerCreate("auto_gf_RemoveUpgrades_TriggerFunc");
    }

    TriggerExecute(auto_gf_RemoveUpgrades_Trigger, false, false);
}

bool auto_gf_RemoveUpgrades_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_RemoveUpgrades_lp_player;
    point lp_point = auto_gf_RemoveUpgrades_lp_point;

    // Variable Declarations
    int lv_index;
    string lv_mOSCreated;

    // Automatic Variable Declarations
    int auto5A5F8C0A_ae;
    const int auto5A5F8C0A_ai = 1;
    int autoA9C07AF0_ae;
    const int autoA9C07AF0_ai = 1;
    const int auto6BDB057D_ae = 6;
    const int auto6BDB057D_ai = 1;

    // Variable Initialization
    lv_mOSCreated = UserDataInstance("MOSSetup", gv_sandbox.lv_unitMOSSelectedIndex[lp_player]);

    // Implementation
    lib90F7C81D_gv_heroPanel.lv_iDSet[lp_player] = false;
    PlayerModifyPropertyInt(lp_player, c_playerPropCustom, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(lp_player, c_playerPropTerrazine, c_playerPropOperSetTo, 0);
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_inventory.lv_inventoryType, StringToText(""), PlayerGroupSingle(lp_player));
    if ((UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]) == "CombatMedic")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "MedicRevivesSupaFastBiatch", -1);
    }
    else if ((UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]) == "SFAAT")) {
        DialogControlSetAnimationState(gv_menu.lv_infoPaneGroup, PlayerGroupSingle(lp_player), "InfoPaneGroup", "Reset");
    }
    else if (((UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]) == "Flamethrower") || (UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]) == "GhostMOS"))) {
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_commandCard.lv_unitIndexLabel, StringExternal("Param/Value/90DFF277"), PlayerGroupSingle(lp_player));
        gf_DefaultMOSUI(lp_player);
    }
    if ((gv_sandbox.lv_upgradeCount[lp_player] > 0)) {
        auto5A5F8C0A_ae = gv_sandbox.lv_upgradeCount[lp_player];
        lv_index = 1;
        for ( ; ( (auto5A5F8C0A_ai >= 0 && lv_index <= auto5A5F8C0A_ae) || (auto5A5F8C0A_ai < 0 && lv_index >= auto5A5F8C0A_ae) ) ; lv_index += auto5A5F8C0A_ai ) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, (DataTableGetString(true, (IntToString(lp_player) + IntToString(lv_index)))), -1);
            DataTableValueRemove(true, (IntToString(lp_player) + IntToString(lv_index)));
        }
        gv_sandbox.lv_upgradeCount[lp_player] = 0;
        autoA9C07AF0_ae = lib90F7C81D_gv_upgrade[lp_player];
        lv_index = 1;
        for ( ; ( (autoA9C07AF0_ai >= 0 && lv_index <= autoA9C07AF0_ae) || (autoA9C07AF0_ai < 0 && lv_index >= autoA9C07AF0_ae) ) ; lv_index += autoA9C07AF0_ai ) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_player, (DataTableGetString(true, ("Upgrade" + IntToString(lp_player) + IntToString(lv_index)))), -1);
            DataTableValueRemove(true, ("Upgrade" + IntToString(lp_player) + IntToString(lv_index)));
        }
        lib90F7C81D_gv_upgrade[lp_player] = 0;
    }
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SoldierSkillsBonus1", -1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SoldierSkillsBonus2", -1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SoldierSkillsBonus3", -1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SoldierSkillsBonus4", -1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "SoldierSkillsBonus5", -1);
    if ((UnitInventoryCount(lib90F7C81D_gv_playerHeroes[lp_player], c_unitInventoryCountCarried) > 0)) {
        lib90F7C81D_gf_DropAllItems(lib90F7C81D_gv_playerHeroes[lp_player], 1.5);
    }
    lib90F7C81D_gv_inventory.lv_inventorySlotMax[lp_player] = 8;
    DialogControlSetAnimationState(lib90F7C81D_gv_commandCard.lv_selfCastFrame[lp_player], PlayerGroupAll(), "State", "Off");
    UnitRemove(lib90F7C81D_gv_commandCard.lv_selfCastUnit[lp_player]);
    lib90F7C81D_gv_commandCard.lv_selfCastUnit[lp_player] = null;
    UnitRemove(lib90F7C81D_gv_inventory.lv_hotkey_unit[lp_player]);
    lib90F7C81D_gv_inventory.lv_hotkey_unit[lp_player] = null;
    UnitRemove(lib90F7C81D_gv_playerHeroes[lp_player]);
    UnitGroupRemove(lib90F7C81D_gv_heroesGroup, lib90F7C81D_gv_playerHeroes[lp_player]);
    UnitGroupRemove(lib90F7C81D_gv_undeadTargetGroup, lib90F7C81D_gv_playerHeroes[lp_player]);
    lib90F7C81D_gv_playerHeroes[lp_player] = null;
    UnitCreate(1, UserDataGetGameLink("MOSSetup", lv_mOSCreated, "MOS Unit", 1), 0, lp_player, lp_point, libNtve_gf_RandomAngle());
    lib90F7C81D_gv_playerHeroes[lp_player] = UnitLastCreated();
    gv_sDFrameIndex[lp_player] = gv_sandbox.lv_unitMOSSelectedIndex[lp_player];
    lib90F7C81D_gf_RegisterMOSToEvents(lib90F7C81D_gv_playerHeroes[lp_player]);
    UnitGroupAdd(lib90F7C81D_gv_heroesGroup, lib90F7C81D_gv_playerHeroes[lp_player]);
    UnitGroupAdd(lib90F7C81D_gv_undeadTargetGroup, lib90F7C81D_gv_playerHeroes[lp_player]);
    UnitControlGroupAddUnit(lp_player, 1, lib90F7C81D_gv_playerHeroes[lp_player]);
    UnitSelect(lib90F7C81D_gv_playerHeroes[lp_player], lp_player, true);
    lib90F7C81D_gv_playerHeroImage[lp_player] = UserDataGetImagePath("MOSSetup", lv_mOSCreated, "MOS Image", 1);
    lib90F7C81D_gv_playerEncumberance[lp_player] = UserDataGetInt("MOSSetup", lv_mOSCreated, "MOS Encumberance", 1);
    lib90F7C81D_gv_reloadbasetime[lp_player] = UserDataGetFixed("MOSSetup", lv_mOSCreated, "Reload Time", 1);
    lib90F7C81D_gv_magsize[lp_player] = UserDataGetInt("MOSSetup", lv_mOSCreated, "Ammo Rounds (Base Weapon)", 1);
    lib90F7C81D_gv_veterancyType[lp_player] = UserDataGetGameLink("MOSSetup", lv_mOSCreated, "Veterancy Type", 1);
    lib90F7C81D_gv_inventory.lv_inventorySlotMax[lp_player] = 8;
    gf_HookSelfCast(lp_player);
    lib90F7C81D_gf_UpdateReloadDurationLabel(lib90F7C81D_gv_playerHeroes[lp_player]);
    PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSetTo, UserDataGetInt("MOSSetup", lv_mOSCreated, "Ammo Rounds (Base Weapon)", 1));
    PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, UserDataGetInt("MOSSetup", lv_mOSCreated, "Starting Magazines", 1));
    PlayerModifyPropertyInt(lp_player, c_playerPropSuppliesUsed, c_playerPropOperSetTo, 15);
    PlayerModifyPropertyInt(lp_player, c_playerPropCustom, c_playerPropOperSetTo, 1);
    if ((gv_skillUpgradeBonus[gv_sandbox.lv_unitMOSSelectedIndex[lp_player]][lp_player] == 1)) {
        PlayerModifyPropertyInt(lp_player, c_playerPropTerrazine, c_playerPropOperAdd, 1);
    }
    else if ((gv_skillUpgradeBonus[gv_sandbox.lv_unitMOSSelectedIndex[lp_player]][lp_player] == 2)) {
        PlayerModifyPropertyInt(lp_player, c_playerPropTerrazine, c_playerPropOperAdd, 2);
    }
    else if ((gv_skillUpgradeBonus[gv_sandbox.lv_unitMOSSelectedIndex[lp_player]][lp_player] >= 3)) {
        PlayerModifyPropertyInt(lp_player, c_playerPropTerrazine, c_playerPropOperAdd, 3);
    }
    if ((gv_sandbox.lv_maxSUOn[lp_player] == true)) {
        PlayerModifyPropertyInt(lp_player, c_playerPropTerrazine, c_playerPropOperAdd, 10);
    }
    DialogControlSendAnimationEvent(lib90F7C81D_gv_sDPlayerFrame[lp_player], PlayerGroupAll(), "Out");
    lib90F7C81D_gf_HookUIToHero(lp_player);
    lib90F7C81D_gf_SetUIState();
    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_skinsPanel, PlayerGroupSingle(lp_player), "MOSIndex", (IntToString(gv_sandbox.lv_unitMOSSelectedIndex[lp_player])));
    lib90F7C81D_gv_achievementPanel.lv_modelIndex[lp_player] = gv_sandbox.lv_unitMOSSelectedIndex[lp_player];
    lib90F7C81D_gf_UpdateMOSTextureFromIndex(UserDataInstance("Decals", lib90F7C81D_gv_bankData.lv_decalSelected[lp_player]), lib90F7C81D_ge_TextureType_Decal, lp_player);
    lib90F7C81D_gf_UpdateMOSTextureFromIndex(UserDataInstance("Camos", lib90F7C81D_gv_bankData.lv_camoSelected[lp_player]), lib90F7C81D_ge_TextureType_Camo, lp_player);
    gf_UpdateSDFrameTooltip(lp_player);
    if ((UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]) == "SFAAT")) {
        DialogControlSetAnimationState(gv_menu.lv_infoPaneGroup, PlayerGroupSingle(lp_player), "InfoPaneGroup", "SFAAT");
    }
    else if ((UnitGetType(lib90F7C81D_gv_playerHeroes[lp_player]) == "CavalryScout")) {
        lib90F7C81D_gv_inventory.lv_inventorySlotMax[lp_player] += 6;
        libNtve_gf_SetDialogItemText(lib90F7C81D_gv_inventory.lv_inventoryType, StringExternal("Param/Value/5549DD91"), PlayerGroupSingle(lp_player));
        lv_index = 1;
        for ( ; ( (auto6BDB057D_ai >= 0 && lv_index <= auto6BDB057D_ae) || (auto6BDB057D_ai < 0 && lv_index >= auto6BDB057D_ae) ) ; lv_index += auto6BDB057D_ai ) {
            UnitInventoryCreate(lib90F7C81D_gv_playerHeroes[lp_player], "BandolierSlot" + (IntToString(lv_index)));
            DialogControlSendAnimationEvent(lib90F7C81D_gv_inventory.lv_bandolierSlots[(lv_index - 1)], PlayerGroupSingle(lp_player), "Locked");
        }
    }
    DialogControlSetAnimationState(lib90F7C81D_gv_commandCard.lv_selfCastFrame[lp_player], PlayerGroupSingle(lp_player), "State", "On");
    Wait(0.5, c_timeGame);
    DialogControlSetAnimationState(gv_sandbox.lv_unitListContainer, PlayerGroupSingle(EventPlayer()), "Enabled", "True");
    return true;
}

void gf_SpawnEnemyType (int lp_player) {
    // Variable Declarations
    int lv_selectedIndex;
    int lv_count;
    string lv_undeadUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_selectedIndex = gv_sandbox.lv_enemySelectedIndex[lp_player];
    lv_count = gv_sandbox.lv_enemySpawnCount[lp_player];
    lv_undeadUnit = UserDataGetGameLink("SandBoxEnemyList", UserDataInstance("SandBoxEnemyList", lv_selectedIndex), "Unit", 1);

    // Implementation
    if ((UserDataGetString("SandBoxEnemyList", UserDataInstance("SandBoxEnemyList", lv_selectedIndex), "Type", 1) == "T3 - Ground")) {
        gf_SendT3AttackWave(true, lv_undeadUnit, lv_count, null, 0, null, 0);
    }
    else if (((UserDataGetString("SandBoxEnemyList", UserDataInstance("SandBoxEnemyList", lv_selectedIndex), "Type", 1) == "T3 - Flyer") || (UserDataGetString("SandBoxEnemyList", UserDataInstance("SandBoxEnemyList", lv_selectedIndex), "Type", 1) == "T2 - Flyer"))) {
        gf_SendAirAttackWave(lv_undeadUnit, lv_count, null, 0, null, 0);
    }
    else if (((UserDataGetString("SandBoxEnemyList", UserDataInstance("SandBoxEnemyList", lv_selectedIndex), "Type", 1) == "T2 - Ground") || (UserDataGetString("SandBoxEnemyList", UserDataInstance("SandBoxEnemyList", lv_selectedIndex), "Type", 1) == "T1 - Ground") || (UserDataGetString("SandBoxEnemyList", UserDataInstance("SandBoxEnemyList", lv_selectedIndex), "Type", 1) == "T1 - Flyer"))) {
        gf_SendT2AttackWave(true, lv_undeadUnit, lv_count, null, 0, null, 0);
    }
}

void gf_SpawnUndeadGroup (int lp_player) {
    // Variable Declarations
    int lv_selectedIndex;
    string lv_instance;
    int lv_totalWeight;
    int lv_dataFieldMax;
    int lv_unitsMax;
    int lv_index;
    int lv_randWeight;
    int lv_weight;
    int lv_amount;
    string lv_unitType;

    // Automatic Variable Declarations
    int auto21FAEC0E_ae;
    const int auto21FAEC0E_ai = 1;

    // Variable Initialization
    lv_selectedIndex = (10 + gv_sandbox.lv_enemyGroupSelectedIndex[lp_player]);
    lv_instance = UserDataInstance("UndeadUnits", lv_selectedIndex);
    lv_totalWeight = UserDataGetInt("UndeadUnits", lv_instance, "Weight Max", 1);
    lv_dataFieldMax = UserDataGetInt("UndeadUnits", lv_instance, "Index Max", 1);
    lv_unitsMax = lv_dataFieldMax;

    // Implementation
    auto21FAEC0E_ae = lv_unitsMax;
    lv_index = 1;
    for ( ; ( (auto21FAEC0E_ai >= 0 && lv_index <= auto21FAEC0E_ae) || (auto21FAEC0E_ai < 0 && lv_index >= auto21FAEC0E_ae) ) ; lv_index += auto21FAEC0E_ai ) {
        lv_randWeight = RandomInt(1, lv_totalWeight);
        lv_weight = (lv_randWeight - UserDataGetInt("UndeadUnits", lv_instance, "Weight", lv_index));
        if ((lv_weight <= 0)) {
            break;
        }
        else {
            lv_totalWeight -= UserDataGetInt("UndeadUnits", lv_instance, "Weight", lv_index);
        }
    }
    lv_amount = RandomInt(UserDataGetInt("UndeadUnits", lv_instance, "Min Spawn Amount", lv_index), UserDataGetInt("UndeadUnits", lv_instance, "Max Spawn Amount", lv_index));
    lv_unitType = UserDataGetUnit("UndeadUnits", lv_instance, "Unit Name", lv_index);
    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, (StringExternal("Param/Value/192EA344") + UnitTypeGetName(lv_unitType) + StringExternal("Param/Value/13E17AB5") + IntToText(lv_amount)));
    UnitCreate(lv_amount, lv_unitType, c_unitCreateIgnoreBirth, 14, gf_SpawnPoint(lp_player), 270.0);
    UnitGroupAddUnitGroup(lib90F7C81D_gv_undeadGroup, UnitLastCreatedGroup());
    if ((UnitGroupCount(lib90F7C81D_gv_heroesGroup, c_unitCountAlive) >= 1)) {
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(lib90F7C81D_gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    }
}

void gf_SpawnPMCSquad (int lp_player) {
    // Variable Declarations
    int lv_index;
    int lv_squadSize;
    string lv_pMCUnit;
    unitgroup lv_pMCGroup;
    unit lv_squadLeader;

    // Automatic Variable Declarations
    int auto572FC89F_ae;
    const int auto572FC89F_ai = 1;

    // Variable Initialization
    lv_squadSize = RandomInt(4, 8);
    lv_pMCGroup = UnitGroupEmpty();

    // Implementation
    auto572FC89F_ae = lv_squadSize;
    lv_index = 1;
    for ( ; ( (auto572FC89F_ai >= 0 && lv_index <= auto572FC89F_ae) || (auto572FC89F_ai < 0 && lv_index >= auto572FC89F_ae) ) ; lv_index += auto572FC89F_ai ) {
        lv_pMCUnit = lib90F7C81D_gf_RandomPMC();
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, (StringExternal("Param/Value/630F9908") + UnitTypeGetName(lv_pMCUnit)));
        UnitCreate(1, lv_pMCUnit, c_unitCreateIgnoreBirth, 15, gf_SpawnPoint(lp_player), 270.0);
        UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/4B5F8B71"), StringToText(""), StringToText(""));
        UnitGroupAdd(lv_pMCGroup, UnitLastCreated());
    }
    lv_squadLeader = UnitGroupUnit(lv_pMCGroup, 1);
    UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, (UnitGetName(lv_squadLeader) + StringExternal("Param/Value/D46CFAD7")));
    UnitBehaviorAddPlayer(lv_squadLeader, "RASquadLeader", 15, 1);
    UnitSetInfoText(UnitGroupUnit(lv_pMCGroup, 1), StringExternal("Param/Value/4D5730C0"), StringExternal("Param/Value/0DA08906"), StringToText(""));
    lib90F7C81D_gf_ResetPMCPool();
    UnitGroupIssueOrder(lv_pMCGroup, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(lib90F7C81D_gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    UnitGroupAddUnitGroup(lib90F7C81D_gv_rAGroup, lv_pMCGroup);
    RefreshUnitGroup(lv_pMCGroup);
}

void gf_DevelopmentMode () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TopNavigator/ModeContainer/MenuButtonsContainer/Button04");
    DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "DevelopmentMode", "On");
    DialogControlSetAnimationState(gv_menu.lv_mOSButtonsContainer, PlayerGroupAll(), "DevelopementMode", "ON");
    GameCheatAllow(c_gameCheatAny, true);
}

void gf_DefaultMOSUI (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueSet(c_gameCatalogButton, "Reload", "Icon", lp_player, ("Assets\\Custom Icons\\Reload.dds"));
    CatalogFieldValueSet(c_gameCatalogButton, "Reload", "Tooltip", lp_player, "Reloads your weapon. Discards current rounds.");
    CatalogFieldValueSet(c_gameCatalogButton, "Reload3", "Icon", lp_player, ("Assets\\Custom Icons\\Reload.dds"));
    CatalogFieldValueSet(c_gameCatalogButton, "Reload3", "Tooltip", lp_player, "Reloads your weapon. Discards current rounds.<n/><n/><c val=\"FF0000\">Disabling autocast will remove auto reload.</c>");
    CatalogFieldValueSet(c_gameCatalogButton, "DropMagazine", "Name", lp_player, "Drop Magazine");
    CatalogFieldValueSet(c_gameCatalogButton, "DropMagazine", "Icon", lp_player, ("BTNDropMagazine.dds"));
    CatalogFieldValueSet(c_gameCatalogButton, "DropMagazine", "Tooltip", lp_player, "Drops magazines into your inventory.");
    CatalogFieldValueSet(c_gameCatalogButton, "Magazines", "Icon", lp_player, ("Assets\\Custom Icons\\icon-mags.dds"));
    CatalogFieldValueSet(c_gameCatalogButton, "Magazines", "Name", lp_player, "Magazines");
    CatalogFieldValueSet(c_gameCatalogButton, "Magazines", "Tooltip", lp_player, "Adds 3 magazines when used.<n/><c val=\"FF8000\">Will become encumbered if over 15 fuel tanks are readied.</c>");
    CatalogFieldValueSet(c_gameCatalogButton, "AmmoCase", "Icon", lp_player, ("BTNAmmoCase.dds"));
    CatalogFieldValueSet(c_gameCatalogButton, "AmmoCase", "Name", lp_player, "Ammo Case");
    CatalogFieldValueSet(c_gameCatalogButton, "AmmoCase", "Tooltip", lp_player, "Holds up to 10 magazines. Adds magazines when used.<n/><c val=\"FF8000\">Will become encumbered if over 15 magazines are readied.</c>");
}

point gf_SpawnPoint (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_sandbox.lv_enemyGroupSpawnPoint[lp_player] == null)) {
        return RegionGetCenter(RegionFromId(30));
    }
    return gv_sandbox.lv_enemyGroupSpawnPoint[lp_player];
}

void gf_EnableDeathmatch () {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TopNavigator/ModeContainer/MenuButtonsContainer/Button05");
    DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "DeathmatchMode", "On");
}

void gf_Phantom () {
    // Variable Declarations
    unit lv_drone;
    unit lv_phantom;

    // Automatic Variable Declarations
    unitgroup auto0E2F6624_g;
    int auto0E2F6624_u;
    unit auto0E2F6624_var;

    // Variable Initialization

    // Implementation
    if ((GameIsTestMap(false) == false) && lib90F7C81D_gf_GetGameMode(1)) {
        TriggerEnable(gt_PrologueVoteInit, true);
        TriggerExecute(gt_PrologueVoteInit, true, false);
    }
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/10E50751"));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PointDefenseDrone", 0, 0, PointFromId(613826773));
    lv_drone = UnitLastCreated();
    UnitSetScale(UnitLastCreated(), 75.0, 75.0, 75.0);
    UnitSetHeight(UnitLastCreated(), 0.0, 0.0);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    libNtve_gf_UnitCreateFacingPoint(1, "ColonistShipFlying", 0, 13, PointFromId(705303440), PointFromId(1254458203));
    lv_phantom = UnitLastCreated();
    UnitSetTeamColorIndex(lv_phantom, 14);
    UnitIssueOrder(lv_phantom, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), PointFromId(1254458203)), c_orderQueueReplace);
    UnitSetHeight(lv_phantom, 3.0, 3.0);
    libNtve_gf_ShowHideUnit(lv_phantom, false);
    Wait(0.5, c_timeGame);
    libNtve_gf_ShowHideUnit(lv_phantom, true);
    Wait(12.0, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_phantom), c_animNameDefault, "Stand Ready Cover Start", 0, c_animTimeDefault);
    Wait(0.1, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimSetPausedAll");
    libNtve_gf_ShowHideUnit(lv_drone, true);
    UnitSetHeight(lv_drone, 30.0, 6.5);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/C1960153"));
    Wait(2.0, c_timeGame);
    lib90F7C81D_gf_RunGameMode();
    Wait(1.0, c_timeGame);
    TriggerDebugOutput(1, StringExternal("Param/Value/5A1F0F76"), true);
    gf_SpawnSoldiers();
    Wait(1.5, c_timeGame);
    DialogControlSendAnimationEvent(lib90F7C81D_gv_sDFrame, PlayerGroupAll(), "Show");
    TriggerEnable(lib90F7C81D_gt_SDPingPlayer, true);
    Wait(0.5, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "AnimSetPausedAll 0");
    UnitRemove(lv_drone);
    lv_drone = null;
    Wait(3.5, c_timeGame);
    UnitIssueOrder(lv_phantom, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_phantom), "Fly", "Land Forward", 0, c_animTimeDefault);
    UnitIssueOrder(lv_phantom, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(12))), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    UnitRemove(lv_phantom);
    lv_phantom = null;
    GameSetPauseable(true);
    lib90F7C81D_gv_levelActorOn = true;
    if ((lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (1) == true)) {
        auto0E2F6624_g = lib90F7C81D_gv_heroesGroup;
        auto0E2F6624_u = UnitGroupCount(auto0E2F6624_g, c_unitCountAll);
        for (;; auto0E2F6624_u -= 1) {
            auto0E2F6624_var = UnitGroupUnitFromEnd(auto0E2F6624_g, auto0E2F6624_u);
            if (auto0E2F6624_var == null) { break; }
            TriggerDebugOutput(1, StringExternal("Param/Value/6A2FE59A"), true);
            UnitBehaviorAddPlayer(auto0E2F6624_var, "RecruitBuff", 0, 1);
        }
        libNtve_gf_SetUpgradeLevelForPlayer(0, "TrainingLevel1Dummy", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(0, "Training2", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(0, "Training3", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(0, "Training4", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(13, "TrainingLevel1Dummy", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(13, "TrainingLevel2Dummy", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(13, "TrainingLevel3Dummy", 1);
        libNtve_gf_SetUpgradeLevelForPlayer(13, "TrainingLevel4Dummy", 1);
        TechTreeUpgradeAddLevel(0, "ArchitectLevel1Dummy", 1);
        TechTreeUpgradeAddLevel(0, "ArchitectLevel2Dummy", 1);
        TechTreeUpgradeAddLevel(0, "ArchitectLevel3Dummy", 1);
        TechTreeUpgradeAddLevel(0, "ArchitectLevel4Dummy", 1);
        TechTreeUpgradeAddLevel(13, "ArchitectLevel1Dummy", 1);
        TechTreeUpgradeAddLevel(13, "ArchitectLevel2Dummy", 1);
        TechTreeUpgradeAddLevel(13, "ArchitectLevel3Dummy", 1);
        TechTreeUpgradeAddLevel(13, "ArchitectLevel4Dummy", 1);
    }
}

void gf_SpawnCustomLocation () {
    // Automatic Variable Declarations
    // Implementation
    lib90F7C81D_gf_RunGameMode();
    Wait(1.0, c_timeGame);
    gf_SpawnSoldiers();
    Wait(1.5, c_timeGame);
    DialogControlSendAnimationEvent(lib90F7C81D_gv_sDFrame, PlayerGroupAll(), "Show");
    TriggerEnable(lib90F7C81D_gt_SDPingPlayer, true);
    GameSetPauseable(true);
    lib90F7C81D_gv_levelActorOn = true;
}

trigger auto_gf_LoadBank_Trigger = null;
int auto_gf_LoadBank_lp_player;

void gf_LoadBank (int lp_player) {
    auto_gf_LoadBank_lp_player = lp_player;

    if (auto_gf_LoadBank_Trigger == null) {
        auto_gf_LoadBank_Trigger = TriggerCreate("auto_gf_LoadBank_TriggerFunc");
    }

    TriggerExecute(auto_gf_LoadBank_Trigger, false, false);
}

bool auto_gf_LoadBank_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_LoadBank_lp_player;

    // Variable Declarations
    bool lv_bool;
    int lv_bankValue;
    int lv_index;
    int lv_key;
    string lv_string;

    // Automatic Variable Declarations
    int auto35B8DFB1_ae;
    const int auto35B8DFB1_ai = 1;

    // Variable Initialization
    lv_string = "";

    // Implementation
    lib90F7C81D_gv_bankData.lv_key1 = (GameAttributeGameValue("1"));
    lib90F7C81D_gv_bankData.lv_key2 = (GameAttributeGameValue("5"));
    lv_bool = PlayerBankLoad(lp_player);
    gv_mosAmount[lp_player] = UserDataInstanceCount("MOSSetup");
    if ((lv_bool == true)) {
        if (((BankVerify(gv_stR[lp_player]) == true) || (lib90F7C81D_gv_bankData.lv_regionAccountValidated[lp_player] == true))) {
            auto35B8DFB1_ae = UserDataInstanceCount("MOSSetup");
            lv_index = 1;
            for ( ; ( (auto35B8DFB1_ai >= 0 && lv_index <= auto35B8DFB1_ae) || (auto35B8DFB1_ai < 0 && lv_index >= auto35B8DFB1_ae) ) ; lv_index += auto35B8DFB1_ai ) {
                lv_bankValue = BankValueGetAsInt(gv_stR[lp_player], "X", gf_BankKey(lv_index));
                lib90F7C81D_gv_bankData.lv_mOSXP[lv_index][lp_player] = lv_bankValue;
            }
            libNtve_gf_SetDialogItemText(gv_xPLabels[0], StringExternal("Param/Value/547C2765"), PlayerGroupSingle(lp_player));
            if ((GameIsTestMap(false) == true)) {
                libNtve_gf_SetDialogItemText(gv_xPLabels[1], (StringExternal("Param/Value/6E7F1956") + StringToText(BankValueGetAsString(lib90F7C81D_gv_bankData.lv_banks[lp_player], "IBH", "ID"))), PlayerGroupSingle(lp_player));
            }
            else {
                libNtve_gf_SetDialogItemText(gv_xPLabels[1], (StringExternal("Param/Value/36C33B04") + StringToText(PlayerHandle(lp_player))), PlayerGroupSingle(lp_player));
            }
            libNtve_gf_SetDialogItemText(gv_xPLabels[2], (StringExternal("Param/Value/730EF4CA") + FormatNumber(lib90F7C81D_gv_bankData.lv_xP[lp_player])), PlayerGroupSingle(lp_player));
            gv_menu.lv_mOSSelected[lp_player] = lib90F7C81D_gv_iIIIIIlllllll[1][lp_player];
            if ((gv_menu.lv_mOSSelected[lp_player] > UserDataInstanceCount("MOSSetup"))) {
                lib90F7C81D_gv_iIIIIIlllllll[1][lp_player] = 0;
                gv_menu.lv_mOSSelected[lp_player] = lib90F7C81D_gv_iIIIIIlllllll[1][lp_player];
                DialogControlSetAnimationState(gv_menu.lv_charScreen, PlayerGroupSingle(lp_player), "Index", "0");
            }
            else {
                DialogControlSetAnimationState(gv_menu.lv_charScreen, PlayerGroupSingle(lp_player), "Index", IntToString(lib90F7C81D_gv_iIIIIIlllllll[1][lp_player]));
            }
            if ((BankKeyExists(gv_stR[lp_player], "X", "KEY") == true)) {
                BankKeyRemove(gv_stR[lp_player], "X", "KEY");
                BankValueSetFromString(gv_stR[lp_player], "X", "ID", gf_GenerateHash(lp_player));
            }
            else {
                if ((gf_BankValidated(lp_player) == false) && (lib90F7C81D_gv_bankData.lv_bankValidationEnabled == true)) {
                    UIDisplayMessage(gv_devGroup, c_messageAreaDebug, (StringExternal("Param/Value/43BB8E38") + IntToText(lp_player) + StringExternal("Param/Value/79C6BB3D")));
                    DialogControlSetAnimationState(lib90F7C81D_gv_commandCard.lv_aCH, PlayerGroupSingle(lp_player), "Button", "OFF");
                    gv_mosAmount[lp_player] = 2;
                    gf_BankSavingPlayer(false, lp_player);
                }
            }
            if ((BankKeyExists(gv_stR[lp_player], "X", "COORD") == true)) {
                lv_string = BankValueGetAsString(gv_stR[lp_player], "X", "COORD");
                if ((lv_string != "0 || 0")) {
                    DialogControlSetPosition(lib90F7C81D_gv_commandCard.lv_selfCastFrame[lp_player], PlayerGroupSingle(lp_player), c_anchorTopLeft, StringToInt(StringWord(lv_string, 1)), StringToInt(StringWord(lv_string, 3)));
                }
            }
            if ((BankKeyExists(gv_stR[lp_player], "X", "Flag") == true)) {
                lv_string = libNtve_gf_ConvertBooleanToString(BankValueGetAsFlag(gv_stR[lp_player], "X", "Flag"));
                lib90F7C81D_gv_commandCard.lv_classicCard[lp_player] = libNtve_gf_ConvertStringToBoolean(lv_string);
            }
            if ((BankKeyExists(gv_stR[lp_player], "X", "TipLoc") == true)) {
                lib90F7C81D_gv_tipPanel.lv_tipLoc[lp_player] = BankValueGetAsString(gv_stR[lp_player], "X", "TipLoc");
                if ((lib90F7C81D_gv_tipPanel.lv_tipLoc[lp_player] != "")) {
                    DialogControlSetPosition(lib90F7C81D_gv_tipPanel.lv_tipDragPanel, PlayerGroupSingle(lp_player), c_anchorTopLeft, StringToInt(StringWord(lib90F7C81D_gv_tipPanel.lv_tipLoc[lp_player], 1)), StringToInt(StringWord(lib90F7C81D_gv_tipPanel.lv_tipLoc[lp_player], 2)));
                }
            }
            lib90F7C81D_gf_ModifierCompleted(lp_player);
        }
        else {
            gv_mosAmount[lp_player] = 2;
            DialogControlSetAnimationState(lib90F7C81D_gv_commandCard.lv_aCH, PlayerGroupSingle(lp_player), "Button", "OFF");
            gf_BankSavingPlayer(false, lp_player);
        }
    }
    else {
        libNtve_gf_SetDialogItemText(gv_xPLabels[0], StringExternal("Param/Value/80C4373D"), PlayerGroupSingle(lp_player));
        PlayerBankNew(lp_player);
        Wait(0.25, c_timeGame);
        if ((BankExists("UAD3", lp_player) == true)) {
            BankSectionRemove(gv_stR[lp_player], "X");
        }
        lib90F7C81D_gv_iIIIIIlllllll[3][lp_player] = RandomInt(1, 100000);
        BankValueSetFromString(gv_stR[lp_player], "X", "ID", gf_GenerateHash(lp_player));
        BankSave(gv_stR[lp_player]);
        PlayerBankSave(lp_player);
        libNtve_gf_SetDialogItemText(gv_xPLabels[1], (StringExternal("Param/Value/B1406570") + StringToText(BankValueGetAsString(lib90F7C81D_gv_bankData.lv_banks[lp_player], "IBH", "ID"))), PlayerGroupSingle(lp_player));
        libNtve_gf_SetDialogItemText(gv_xPLabels[2], StringExternal("Param/Value/BF43E874"), PlayerGroupSingle(lp_player));
        Wait(0.25, c_timeGame);
        libNtve_gf_SetDialogItemText(gv_xPLabels[0], StringExternal("Param/Value/8F62B2F0"), PlayerGroupSingle(lp_player));
    }
    return true;
}

string gf_BankKey (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetString("MOSSetup", UserDataInstance("MOSSetup", lp_index), "Bank Key", 1);
}

bool gf_BankValidated (int lp_player) {
    // Variable Declarations
    string lv_a;
    string lv_b;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_a = gf_GenerateHash(lp_player);
    lv_b = BankValueGetAsString(gv_stR[lp_player], "X", "ID");

    // Implementation
    if ((lv_a == lv_b)) {
        return true;
    }
    return false;
}

string gf_GenerateHash (int lp_player) {
    // Variable Declarations
    int lv_sUMXP;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_sUMXP = gf_SumXP(lp_player);

    // Implementation
    return PlayerBankImportConverterSignature(("1-S2-1-1371409" + BankValueGetAsString(lib90F7C81D_gv_bankData.lv_banks[lp_player], "IBH", "ID") + IntToString(lib90F7C81D_gv_iIIIIIlllllll[3][lp_player]) + IntToString(lv_sUMXP) + ((GameAttributeGameValue("1")) + (GameAttributeGameValue("4")) + IntToString(StringToInt((GameAttributeGameValue("5")))))));
}

int gf_SumXP (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_xp;
    int lv_sum;

    // Automatic Variable Declarations
    const int auto7A7B68D2_ae = gv_mOSMax;
    const int auto7A7B68D2_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto7A7B68D2_ai >= 0 && lv_i <= auto7A7B68D2_ae) || (auto7A7B68D2_ai < 0 && lv_i >= auto7A7B68D2_ae) ) ; lv_i += auto7A7B68D2_ai ) {
        lv_xp = lib90F7C81D_gv_bankData.lv_mOSXP[lv_i][lp_player];
        lv_sum += lv_xp;
    }
    return lv_sum;
}

void gf_BankSavingPlayer (bool lp_state, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_state == true)) {
        gv_allowPlayerSave[lp_player] = true;
    }
    else {
        gv_allowPlayerSave[lp_player] = false;
    }
}

void gf_BankSavingGlobal (bool lp_state) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_state == false)) {
        gv_allowGlobalSave = false;
    }
    else {
        gv_allowGlobalSave = true;
    }
}

void gf_SaveGameStats () {
    // Automatic Variable Declarations
    playergroup autoF3CD3BDA_g;
    int autoF3CD3BDA_var;

    // Implementation
    if ((gv_allowGlobalSave == true)) {
        autoF3CD3BDA_g = lib90F7C81D_gv_players;
        autoF3CD3BDA_var = -1;
        while (true) {
            autoF3CD3BDA_var = PlayerGroupNextPlayer(autoF3CD3BDA_g, autoF3CD3BDA_var);
            if (autoF3CD3BDA_var < 0) { break; }
            if ((gv_allowPlayerSave[autoF3CD3BDA_var] == true)) {
                lib90F7C81D_gf_UpdateStats(autoF3CD3BDA_var);
                lib90F7C81D_gv_iIIIIIlllllll[3][autoF3CD3BDA_var] = RandomInt(1, 100000);
                BankValueSetFromInt(gv_stR[autoF3CD3BDA_var], "X", gf_BankKey(gv_menu.lv_mOSSelected[autoF3CD3BDA_var]), lib90F7C81D_gv_bankData.lv_mOSXP[gv_menu.lv_mOSSelected[autoF3CD3BDA_var]][autoF3CD3BDA_var]);
                BankValueSetFromString(gv_stR[autoF3CD3BDA_var], "X", "ID", gf_GenerateHash(autoF3CD3BDA_var));
                BankValueSetFromString(gv_stR[autoF3CD3BDA_var], "X", "TipLoc", lib90F7C81D_gv_tipPanel.lv_tipLoc[autoF3CD3BDA_var]);
                lib90F7C81D_gf_SaveMOSAchievementStats(autoF3CD3BDA_var, gv_stR[autoF3CD3BDA_var]);
                BankSave(gv_stR[autoF3CD3BDA_var]);
                PlayerBankSave(autoF3CD3BDA_var);
            }

        }
    }
}

void gf_CreatePing (point lp_startPoint, point lp_endPoint, int lp_seperation, int lp_scale) {
    // Variable Declarations
    fixed lv_distance;
    fixed lv_start_y;
    fixed lv_end_x;
    fixed lv_angle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_distance = DistanceBetweenPoints(lp_startPoint, lp_endPoint);
    lv_start_y = PointGetY(lp_startPoint);
    lv_end_x = PointGetY(lp_endPoint);
    lv_angle = Sin(((lv_end_x + lv_start_y) / lv_distance));

}

text gf_MOSLevelUnlocked (int lp_mOS, int lp_player) {
    // Variable Declarations
    int lv_index;
    text lv_text;

    // Automatic Variable Declarations
    int auto3DA22128_ae;
    const int auto3DA22128_ai = 1;

    // Variable Initialization
    lv_text = StringExternal("Param/Value/765B30D6");

    // Implementation
    auto3DA22128_ae = UserDataInstanceCount("MOSXP");
    lv_index = 1;
    for ( ; ( (auto3DA22128_ai >= 0 && lv_index <= auto3DA22128_ae) || (auto3DA22128_ai < 0 && lv_index >= auto3DA22128_ae) ) ; lv_index += auto3DA22128_ai ) {
        if ((lib90F7C81D_gv_bankData.lv_mOSXP[lp_mOS][lp_player] >= UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "XP", 1)) && (lib90F7C81D_gv_bankData.lv_mOSXP[lp_mOS][lp_player] < UserDataGetInt("MOSXP", UserDataInstance("MOSXP", (lv_index + 1)), "XP", 1))) {
            lv_text = UserDataGetText("MOSXP", UserDataInstance("MOSXP", lv_index), "Level Name", 1);
            gv_skillUpgradeBonus[lp_mOS][lp_player] = lv_index;
            break;
        }
        else {
            if ((lv_index == 10) && (lib90F7C81D_gv_bankData.lv_mOSXP[lp_mOS][lp_player] >= UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "XP", 1))) {
                lv_text = UserDataGetText("MOSXP", UserDataInstance("MOSXP", lv_index), "Level Name", 1);
                gv_skillUpgradeBonus[lp_mOS][lp_player] = lv_index;
            }
        }
    }
    return lv_text;
}

text gf_MOSLevelName (int lp_mOS, int lp_player) {
    // Variable Declarations
    int lv_index;
    text lv_text;

    // Automatic Variable Declarations
    int autoE0F84542_ae;
    const int autoE0F84542_ai = 1;

    // Variable Initialization
    lv_text = StringExternal("Param/Value/096C6339");

    // Implementation
    autoE0F84542_ae = UserDataInstanceCount("MOSXP");
    lv_index = 1;
    for ( ; ( (autoE0F84542_ai >= 0 && lv_index <= autoE0F84542_ae) || (autoE0F84542_ai < 0 && lv_index >= autoE0F84542_ae) ) ; lv_index += autoE0F84542_ai ) {
        if ((lib90F7C81D_gv_bankData.lv_mOSXP[lp_mOS][lp_player] <= UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "XP", 1))) {
            lv_text = UserDataGetText("MOSXP", UserDataInstance("MOSXP", lv_index), "Level Name", 1);
            break;
        }
        else {
            if ((lv_index == 10) && (lib90F7C81D_gv_bankData.lv_mOSXP[lp_mOS][lp_player] >= UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "XP", 1))) {
                lv_text = UserDataGetText("MOSXP", UserDataInstance("MOSXP", lv_index), "Level Name", 1);
            }
        }
    }
    return lv_text;
}

text gf_MOSLevelNameSDTooltip (int lp_mOS, int lp_player) {
    // Variable Declarations
    int lv_index;
    text lv_text;

    // Automatic Variable Declarations
    int auto798704AB_ae;
    const int auto798704AB_ai = 1;

    // Variable Initialization
    lv_text = StringExternal("Param/Value/A8D739AB");

    // Implementation
    auto798704AB_ae = UserDataInstanceCount("MOSXP");
    lv_index = 1;
    for ( ; ( (auto798704AB_ai >= 0 && lv_index <= auto798704AB_ae) || (auto798704AB_ai < 0 && lv_index >= auto798704AB_ae) ) ; lv_index += auto798704AB_ai ) {
        if ((lib90F7C81D_gv_bankData.lv_mOSXP[lp_mOS][lp_player] < 3000)) {
            DialogControlSetAnimationState(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Border[lp_player], PlayerGroupAll(), "Level", "0");
            DialogControlSetAnimationState(lib90F7C81D_gv_sDPlayerFrameBorder[lp_player], PlayerGroupAll(), "Level", "0");
            break;
        }
        else {
            if ((lib90F7C81D_gv_bankData.lv_mOSXP[lp_mOS][lp_player] >= UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "XP", 1)) && (lib90F7C81D_gv_bankData.lv_mOSXP[lp_mOS][lp_player] < UserDataGetInt("MOSXP", UserDataInstance("MOSXP", (lv_index + 1)), "XP", 1))) {
                lv_text = UserDataGetText("MOSXP", UserDataInstance("MOSXP", lv_index), "Level Name", 1);
                DialogControlSetAnimationState(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Border[lp_player], PlayerGroupAll(), "Level", IntToString(UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "Level", 1)));
                DialogControlSetAnimationState(lib90F7C81D_gv_sDPlayerFrameBorder[lp_player], PlayerGroupAll(), "Level", IntToString(UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "Level", 1)));
                break;
            }
            else {
                if ((lv_index == 10) && (lib90F7C81D_gv_bankData.lv_mOSXP[lp_mOS][lp_player] >= UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "XP", 1))) {
                    lv_text = UserDataGetText("MOSXP", UserDataInstance("MOSXP", lv_index), "Level Name", 1);
                    DialogControlSetAnimationState(lib90F7C81D_gv_sTATS.lv_hUD_Player_Frame_Border[lp_player], PlayerGroupAll(), "Level", IntToString(UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "Level", 1)));
                    DialogControlSetAnimationState(lib90F7C81D_gv_sDPlayerFrameBorder[lp_player], PlayerGroupAll(), "Level", IntToString(UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "Level", 1)));
                }
            }
        }
    }
    return lv_text;
}

int gf_MOSLevelCurrent (int lp_xP) {
    // Variable Declarations
    int lv_index;
    int lv_max;

    // Automatic Variable Declarations
    int auto9188E2CD_ae;
    const int auto9188E2CD_ai = 1;

    // Variable Initialization

    // Implementation
    auto9188E2CD_ae = UserDataInstanceCount("MOSXP");
    lv_index = 1;
    for ( ; ( (auto9188E2CD_ai >= 0 && lv_index <= auto9188E2CD_ae) || (auto9188E2CD_ai < 0 && lv_index >= auto9188E2CD_ae) ) ; lv_index += auto9188E2CD_ai ) {
        if ((lp_xP >= UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "XP", 1)) && (lp_xP < UserDataGetInt("MOSXP", UserDataInstance("MOSXP", (lv_index + 1)), "XP", 1))) {
            lv_max = UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "Level", 1);
            break;
        }
        else {
            if ((lv_index == 10) && (lp_xP >= UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "XP", 1))) {
                lv_max = UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "Level", 1);
            }
        }
    }
    return lv_max;
}

int gf_MOSLevelNextXP (int lp_mOS, int lp_player) {
    // Variable Declarations
    int lv_index;
    int lv_max;

    // Automatic Variable Declarations
    int autoC9DE3865_ae;
    const int autoC9DE3865_ai = 1;

    // Variable Initialization

    // Implementation
    autoC9DE3865_ae = UserDataInstanceCount("MOSXP");
    lv_index = 1;
    for ( ; ( (autoC9DE3865_ai >= 0 && lv_index <= autoC9DE3865_ae) || (autoC9DE3865_ai < 0 && lv_index >= autoC9DE3865_ae) ) ; lv_index += autoC9DE3865_ai ) {
        if ((lib90F7C81D_gv_bankData.lv_mOSXP[lp_mOS][lp_player] <= UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "XP", 1))) {
            lv_max = UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "XP", 1);
            break;
        }
        else {
            if ((lv_index == 10) && (lib90F7C81D_gv_bankData.lv_mOSXP[lp_mOS][lp_player] >= UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "XP", 1))) {
                lv_max = UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "XP", 1);
            }
        }
    }
    return lv_max;
}

fixed gf_MOSLevelProgressBarCurrentValue (int lp_mOS, int lp_player) {
    // Variable Declarations
    int lv_index;
    fixed lv_xP;

    // Automatic Variable Declarations
    int auto4E4E11C6_ae;
    const int auto4E4E11C6_ai = 1;

    // Variable Initialization

    // Implementation
    auto4E4E11C6_ae = UserDataInstanceCount("MOSXP");
    lv_index = 1;
    for ( ; ( (auto4E4E11C6_ai >= 0 && lv_index <= auto4E4E11C6_ae) || (auto4E4E11C6_ai < 0 && lv_index >= auto4E4E11C6_ae) ) ; lv_index += auto4E4E11C6_ai ) {
        if ((lv_index == 1) && (lib90F7C81D_gv_bankData.lv_mOSXP[lp_mOS][lp_player] < UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "XP", 1))) {
            lv_xP = IntToFixed(lib90F7C81D_gv_bankData.lv_mOSXP[lp_mOS][lp_player]);
            break;
        }
        else {
            if ((lib90F7C81D_gv_bankData.lv_mOSXP[lp_mOS][lp_player] >= UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "XP", 1)) && (lib90F7C81D_gv_bankData.lv_mOSXP[lp_mOS][lp_player] < UserDataGetInt("MOSXP", UserDataInstance("MOSXP", (lv_index + 1)), "XP", 1))) {
                lv_xP = (IntToFixed(lib90F7C81D_gv_bankData.lv_mOSXP[lp_mOS][lp_player]) - IntToFixed(UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "XP", 1)));
                break;
            }
            else {
                if ((lv_index == 10) && (lib90F7C81D_gv_bankData.lv_mOSXP[lp_mOS][lp_player] >= UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "XP", 1))) {
                    lv_xP = (IntToFixed(lib90F7C81D_gv_bankData.lv_mOSXP[lp_mOS][lp_player]) - IntToFixed(UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "XP", 1)));
                }
            }
        }
    }
    return lv_xP;
}

fixed gf_MOSLevelProgressBarMax (int lp_mOS, int lp_player) {
    // Variable Declarations
    int lv_index;
    fixed lv_max;

    // Automatic Variable Declarations
    int auto416C1EE0_ae;
    const int auto416C1EE0_ai = 1;

    // Variable Initialization

    // Implementation
    auto416C1EE0_ae = UserDataInstanceCount("MOSXP");
    lv_index = 1;
    for ( ; ( (auto416C1EE0_ai >= 0 && lv_index <= auto416C1EE0_ae) || (auto416C1EE0_ai < 0 && lv_index >= auto416C1EE0_ae) ) ; lv_index += auto416C1EE0_ai ) {
        if ((lib90F7C81D_gv_bankData.lv_mOSXP[lp_mOS][lp_player] <= UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "XP", 1))) {
            lv_max = UserDataGetFixed("MOSXP", UserDataInstance("MOSXP", lv_index), "Next Level XP", 1);
            break;
        }
        else {
            if ((lv_index == 10) && (lib90F7C81D_gv_bankData.lv_mOSXP[lp_mOS][lp_player] >= UserDataGetInt("MOSXP", UserDataInstance("MOSXP", lv_index), "XP", 1))) {
                lv_max = UserDataGetFixed("MOSXP", UserDataInstance("MOSXP", lv_index), "Next Level XP", 1);
            }
        }
    }
    return lv_max;
}

text gf_MOSRankRequirement (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return (UserDataGetText("RankXP", UserDataInstance("RankXP", lp_index), "Rank Abbr", 1) + StringToText(""));
}

int gf_MOSRankXPRequirement (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return UserDataGetInt("RankXP", UserDataInstance("RankXP", lp_index), "XP", 1);
}

bool gf_PlayersMOSUnlocked (int lp_player, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib90F7C81D_gv_bankData.lv_xP[lp_player] >= UserDataGetInt("RankXP", UserDataInstance("RankXP", lp_index), "XP", 1))) {
        return true;
    }

    return false;
}

text gf_PlayersCurrentRankAbbr (int lp_player) {
    // Variable Declarations
    int lv_index;
    text lv_text;

    // Automatic Variable Declarations
    int auto5210155A_ae;
    const int auto5210155A_ai = 1;

    // Variable Initialization
    lv_text = StringExternal("Param/Value/17670913");

    // Implementation
    auto5210155A_ae = UserDataInstanceCount("RankXP");
    lv_index = 1;
    for ( ; ( (auto5210155A_ai >= 0 && lv_index <= auto5210155A_ae) || (auto5210155A_ai < 0 && lv_index >= auto5210155A_ae) ) ; lv_index += auto5210155A_ai ) {
        if ((lib90F7C81D_gv_bankData.lv_xP[lp_player] >= UserDataGetInt("RankXP", UserDataInstance("RankXP", lv_index), "XP", 1)) && (lib90F7C81D_gv_bankData.lv_xP[lp_player] < UserDataGetInt("RankXP", UserDataInstance("RankXP", (lv_index + 1)), "XP", 1))) {
            lv_text = UserDataGetText("RankXP", UserDataInstance("RankXP", lv_index), "Rank Abbr", 1);
            break;
        }
        else {
            if ((lv_index == 28) && (lib90F7C81D_gv_bankData.lv_xP[lp_player] >= UserDataGetInt("RankXP", UserDataInstance("RankXP", lv_index), "XP", 1))) {
                lv_text = UserDataGetText("RankXP", UserDataInstance("RankXP", lv_index), "Rank Abbr", 1);
            }
        }
    }
    return lv_text;
}

text gf_PlayersCurrentRank (int lp_player) {
    // Variable Declarations
    int lv_index;
    text lv_text;

    // Automatic Variable Declarations
    int auto7E66C365_ae;
    const int auto7E66C365_ai = 1;

    // Variable Initialization
    lv_text = StringExternal("Param/Value/231FD39A");

    // Implementation
    auto7E66C365_ae = UserDataInstanceCount("RankXP");
    lv_index = 1;
    for ( ; ( (auto7E66C365_ai >= 0 && lv_index <= auto7E66C365_ae) || (auto7E66C365_ai < 0 && lv_index >= auto7E66C365_ae) ) ; lv_index += auto7E66C365_ai ) {
        if ((lib90F7C81D_gv_bankData.lv_xP[lp_player] >= UserDataGetInt("RankXP", UserDataInstance("RankXP", lv_index), "XP", 1)) && (lib90F7C81D_gv_bankData.lv_xP[lp_player] < UserDataGetInt("RankXP", UserDataInstance("RankXP", (lv_index + 1)), "XP", 1))) {
            lv_text = UserDataGetText("RankXP", UserDataInstance("RankXP", lv_index), "Rank Name", 1);
            break;
        }
        else {
            if ((lv_index == 28) && (lib90F7C81D_gv_bankData.lv_xP[lp_player] >= UserDataGetInt("RankXP", UserDataInstance("RankXP", lv_index), "XP", 1))) {
                lv_text = UserDataGetText("RankXP", UserDataInstance("RankXP", lv_index), "Rank Name", 1);
            }
        }
    }
    return lv_text;
}

text gf_PlayersNextRank (int lp_player) {
    // Variable Declarations
    int lv_index;
    text lv_text;

    // Automatic Variable Declarations
    int auto604CF7F4_ae;
    const int auto604CF7F4_ai = 1;

    // Variable Initialization
    lv_text = StringExternal("Param/Value/2EC5DDFC");

    // Implementation
    auto604CF7F4_ae = UserDataInstanceCount("RankXP");
    lv_index = 1;
    for ( ; ( (auto604CF7F4_ai >= 0 && lv_index <= auto604CF7F4_ae) || (auto604CF7F4_ai < 0 && lv_index >= auto604CF7F4_ae) ) ; lv_index += auto604CF7F4_ai ) {
        if ((lib90F7C81D_gv_bankData.lv_xP[lp_player] >= UserDataGetInt("RankXP", UserDataInstance("RankXP", lv_index), "XP", 1)) && (lib90F7C81D_gv_bankData.lv_xP[lp_player] < UserDataGetInt("RankXP", UserDataInstance("RankXP", (lv_index + 1)), "XP", 1))) {
            lv_text = UserDataGetText("RankXP", UserDataInstance("RankXP", (lv_index + 1)), "Rank Name", 1);
            break;
        }
        else {
            if ((lv_index == 28) && (lib90F7C81D_gv_bankData.lv_xP[lp_player] >= UserDataGetInt("RankXP", UserDataInstance("RankXP", lv_index), "XP", 1))) {
                lv_text = UserDataGetText("RankXP", UserDataInstance("RankXP", (lv_index + 1)), "Rank Name", 1);
            }
        }
    }
    return lv_text;
}

int gf_PlayersCurrentRankLevel (int lp_xP) {
    // Variable Declarations
    int lv_index;
    int lv_level;

    // Automatic Variable Declarations
    int auto5F360342_ae;
    const int auto5F360342_ai = 1;

    // Variable Initialization

    // Implementation
    auto5F360342_ae = UserDataInstanceCount("RankXP");
    lv_index = 1;
    for ( ; ( (auto5F360342_ai >= 0 && lv_index <= auto5F360342_ae) || (auto5F360342_ai < 0 && lv_index >= auto5F360342_ae) ) ; lv_index += auto5F360342_ai ) {
        if ((lp_xP >= UserDataGetInt("RankXP", UserDataInstance("RankXP", lv_index), "XP", 1)) && (lp_xP < UserDataGetInt("RankXP", UserDataInstance("RankXP", (lv_index + 1)), "XP", 1))) {
            lv_level = UserDataGetInt("RankXP", UserDataInstance("RankXP", lv_index), "Level", 1);
            break;
        }
        else {
            if ((lv_index == 28) && (lp_xP >= UserDataGetInt("RankXP", UserDataInstance("RankXP", lv_index), "XP", 1))) {
                lv_level = UserDataGetInt("RankXP", UserDataInstance("RankXP", lv_index), "Level", 1);
            }
        }
    }
    return lv_level;
}

string gf_PlayersCurrentRankImage (int lp_player) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_index = gf_PlayersCurrentRankLevel(lib90F7C81D_gv_bankData.lv_xP[lp_player]);

    // Implementation
    return UserDataGetImagePath("RankXP", UserDataInstance("RankXP", lv_index), "Rank Icon", 1);
}

void gf_XPGainGlobal (int lp_xP, text lp_mission) {
    // Variable Declarations
    int lv_xPmod;
    int lv_oldXP;
    int lv_newXP;
    int lv_currentRank;
    int lv_newRank;
    int lv_oldMosXP;
    int lv_newMosXP;
    int lv_currentLevel;
    int lv_newLevel;
    string lv_string;

    // Automatic Variable Declarations
    playergroup auto8E642CD5_g;
    int auto8E642CD5_var;

    // Variable Initialization
    lv_xPmod = FixedToInt((IntToFixed(lp_xP) * gv_xPMOD));
    lv_string = "";

    // Implementation
    if (((lib90F7C81D_gv_gameOver == true) || (gv_allowGlobalSave == false))) {
        return ;
    }

    lib90F7C81D_gv_xPGained += lv_xPmod;
    if ((lp_xP > 0)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/A57E8C55") + lp_mission + StringExternal("Param/Value/A54C39A6") + IntToText(lv_xPmod) + StringExternal("Param/Value/52977307")));
    }
    auto8E642CD5_g = lib90F7C81D_gv_players;
    auto8E642CD5_var = -1;
    while (true) {
        auto8E642CD5_var = PlayerGroupNextPlayer(auto8E642CD5_g, auto8E642CD5_var);
        if (auto8E642CD5_var < 0) { break; }
        if ((gv_allowPlayerSave[auto8E642CD5_var] == true)) {
            lib90F7C81D_gf_UpdateStats(auto8E642CD5_var);
            lv_oldXP = lib90F7C81D_gv_bankData.lv_xP[auto8E642CD5_var];
            lib90F7C81D_gv_bankData.lv_xP[auto8E642CD5_var] += lv_xPmod;
            lv_newXP = lib90F7C81D_gv_bankData.lv_xP[auto8E642CD5_var];
            lv_oldMosXP = lib90F7C81D_gv_bankData.lv_mOSXP[gv_menu.lv_mOSSelected[auto8E642CD5_var]][auto8E642CD5_var];
            lib90F7C81D_gv_bankData.lv_mOSXP[gv_menu.lv_mOSSelected[auto8E642CD5_var]][auto8E642CD5_var] += lv_xPmod;
            lv_newMosXP = lib90F7C81D_gv_bankData.lv_mOSXP[gv_menu.lv_mOSSelected[auto8E642CD5_var]][auto8E642CD5_var];
            lib90F7C81D_gv_iIIIIIlllllll[3][auto8E642CD5_var] = RandomInt(1, 100000);
            lib90F7C81D_gf_UpdateCPCoordinates(lib90F7C81D_gv_commandCard.lv_selfCastFrame[auto8E642CD5_var], auto8E642CD5_var);
            lv_string = (FixedToString(lib90F7C81D_gv_commandCard.lv_xCoord[auto8E642CD5_var], c_fixedPrecisionAny) + " || " + FixedToString(lib90F7C81D_gv_commandCard.lv_yCoord[auto8E642CD5_var], c_fixedPrecisionAny));
            BankValueSetFromInt(gv_stR[auto8E642CD5_var], "X", gf_BankKey(gv_menu.lv_mOSSelected[auto8E642CD5_var]), lib90F7C81D_gv_bankData.lv_mOSXP[gv_menu.lv_mOSSelected[auto8E642CD5_var]][auto8E642CD5_var]);
            BankValueSetFromString(gv_stR[auto8E642CD5_var], "X", "COORD", lv_string);
            BankValueSetFromString(gv_stR[auto8E642CD5_var], "X", "ID", gf_GenerateHash(auto8E642CD5_var));
            BankValueSetFromString(gv_stR[auto8E642CD5_var], "X", "TipLoc", lib90F7C81D_gv_tipPanel.lv_tipLoc[auto8E642CD5_var]);
            lib90F7C81D_gf_SaveMOSAchievementStats(auto8E642CD5_var, gv_stR[auto8E642CD5_var]);
            BankSave(gv_stR[auto8E642CD5_var]);
            PlayerBankSave(auto8E642CD5_var);
            lv_currentRank = gf_PlayersCurrentRankLevel(lv_oldXP);
            lv_newRank = gf_PlayersCurrentRankLevel(lv_newXP);
            lv_currentLevel = gf_MOSLevelCurrent(lv_oldMosXP);
            lv_newLevel = gf_MOSLevelCurrent(lv_newMosXP);
            if ((lv_newRank > lv_currentRank)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (TextWithColor(PlayerName(auto8E642CD5_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto8E642CD5_var, false))) + StringExternal("Param/Value/9871951A") + gf_PlayersCurrentRank(auto8E642CD5_var)));
                lib90F7C81D_gf_FlashAchievementBadge(UserDataInstance("AchievementBadge", (9 + lv_newRank)), auto8E642CD5_var);
                if ((lib90F7C81D_gv_bankData.lv_decalSelected[auto8E642CD5_var] == 1) && (lib90F7C81D_gv_playersHeroisDead[auto8E642CD5_var] == false)) {
                    lib90F7C81D_gv_mOSTexture.lv_decal[auto8E642CD5_var] = UserDataGetGameLink("RankXP", UserDataInstance("RankXP", lv_newRank), "Rank Decal", 1);
                    libNtve_gf_SendActorMessageToUnit(lib90F7C81D_gv_playerHeroes[auto8E642CD5_var], libNtve_gf_TextureSelectByID(lib90F7C81D_gv_mOSTexture.lv_decal[auto8E642CD5_var]));
                }
                if ((lib90F7C81D_gv_gameOver == false)) {
                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][(31 + lv_newRank)], PlayerGroupSingle(auto8E642CD5_var), "AchievementBadge", "Earned");
                }
            }
            if ((lv_newLevel > lv_currentLevel)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (TextWithColor(PlayerName(auto8E642CD5_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto8E642CD5_var, false))) + StringExternal("Param/Value/215C8591") + UnitGetName(lib90F7C81D_gv_playerHeroes[auto8E642CD5_var]) + StringExternal("Param/Value/E51C3E0B") + gf_MOSLevelUnlocked(gv_menu.lv_mOSSelected[auto8E642CD5_var], auto8E642CD5_var)));
                lib90F7C81D_gf_FlashAchievementBadge(UserDataInstance("AchievementBadge", lv_newLevel), auto8E642CD5_var);
                if ((lib90F7C81D_gv_gameOver == false)) {
                    DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(gv_menu.lv_mOSSelected[auto8E642CD5_var] - 1)][(lv_newLevel + 3)], PlayerGroupSingle(auto8E642CD5_var), "AchievementBadge", "Earned");
                }
                if ((lib90F7C81D_gv_gameOver == false) && (lv_newLevel <= 3)) {
                    PlayerModifyPropertyInt(auto8E642CD5_var, c_playerPropTerrazine, c_playerPropOperAdd, 1);
                    UIDisplayMessage(PlayerGroupSingle(auto8E642CD5_var), c_messageAreaSubtitle, StringExternal("Param/Value/EEECC31F"));
                }
                if ((lv_newLevel == 4)) {
                    UIDisplayMessage(PlayerGroupSingle(auto8E642CD5_var), c_messageAreaChat, (StringExternal("Param/Value/D94A1BF3") + StringToText(UserDataGetString("Camos", UserDataInstance("Camos", (gv_menu.lv_mOSSelected[auto8E642CD5_var] + 1)), "Camo Name", 1)) + StringExternal("Param/Value/E2695F6A")));
                    if ((lib90F7C81D_gv_gameOver == false)) {
                        lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Camo, UserDataInstance("Camos", (gv_menu.lv_mOSSelected[auto8E642CD5_var] + 1)), "Rank Insignia", auto8E642CD5_var, false);
                    }
                }
                if ((lv_newLevel == 5)) {
                    UIDisplayMessage(PlayerGroupSingle(auto8E642CD5_var), c_messageAreaChat, (StringExternal("Param/Value/F943C4A5") + StringToText(UserDataGetString("Decals", UserDataInstance("Decals", (gv_menu.lv_mOSSelected[auto8E642CD5_var] + 2)), "Decal Name", 1)) + StringExternal("Param/Value/BA502845")));
                    if ((lib90F7C81D_gv_gameOver == false)) {
                        lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Decal, "Default", UserDataInstance("Decals", (gv_menu.lv_mOSSelected[auto8E642CD5_var] + 2)), auto8E642CD5_var, false);
                        if ((lib90F7C81D_gv_achievementPanel.lv_prestigeLevel[auto8E642CD5_var] < 5)) {
                            lib90F7C81D_gf_FlashAchievementBadge(UserDataInstance("AchievementBadge", (73 + lib90F7C81D_gv_achievementPanel.lv_prestigeLevel[auto8E642CD5_var])), auto8E642CD5_var);
                            lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Decal, "Default", UserDataInstance("Decals", (32 + lib90F7C81D_gv_achievementPanel.lv_prestigeLevel[auto8E642CD5_var])), auto8E642CD5_var, false);
                        }
                    }
                }
            }
            gf_UpdateSDFrameTooltip(auto8E642CD5_var);
        }

    }
    lv_string = "";
}

void gf_XPGainPlayer (int lp_xP, text lp_mission, int lp_player) {
    // Variable Declarations
    int lv_oldXP;
    int lv_newXP;
    int lv_currentRank;
    int lv_newRank;
    int lv_oldMosXP;
    int lv_newMosXP;
    int lv_currentLevel;
    int lv_newLevel;
    string lv_string;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_string = "";

    // Implementation
    if ((lib90F7C81D_gv_gameOver == true) && (gv_allowGlobalSave == false) && (gv_allowPlayerSave[lp_player] == false)) {
        return ;
    }

    if ((lp_xP > 0)) {
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaChat, (StringExternal("Param/Value/9F527ABA") + lp_mission + StringExternal("Param/Value/8F342F70") + IntToText(lp_xP) + StringExternal("Param/Value/51B18E9F")));
    }
    lib90F7C81D_gf_UpdateStats(lp_player);
    lv_oldXP = lib90F7C81D_gv_bankData.lv_xP[lp_player];
    lib90F7C81D_gv_bankData.lv_xP[lp_player] += lp_xP;
    lv_newXP = lib90F7C81D_gv_bankData.lv_xP[lp_player];
    lv_oldMosXP = lib90F7C81D_gv_bankData.lv_mOSXP[gv_menu.lv_mOSSelected[lp_player]][lp_player];
    lib90F7C81D_gv_bankData.lv_mOSXP[gv_menu.lv_mOSSelected[lp_player]][lp_player] += lp_xP;
    lv_newMosXP = lib90F7C81D_gv_bankData.lv_mOSXP[gv_menu.lv_mOSSelected[lp_player]][lp_player];
    lib90F7C81D_gv_iIIIIIlllllll[3][lp_player] = RandomInt(1, 100000);
    lib90F7C81D_gf_UpdateCPCoordinates(lib90F7C81D_gv_commandCard.lv_selfCastFrame[lp_player], lp_player);
    lv_string = (FixedToString(lib90F7C81D_gv_commandCard.lv_xCoord[lp_player], c_fixedPrecisionAny) + " || " + FixedToString(lib90F7C81D_gv_commandCard.lv_yCoord[lp_player], c_fixedPrecisionAny));
    BankValueSetFromInt(gv_stR[lp_player], "X", gf_BankKey(gv_menu.lv_mOSSelected[lp_player]), lib90F7C81D_gv_bankData.lv_mOSXP[gv_menu.lv_mOSSelected[lp_player]][lp_player]);
    BankValueSetFromString(gv_stR[lp_player], "X", "COORD", lv_string);
    BankValueSetFromString(gv_stR[lp_player], "X", "ID", gf_GenerateHash(lp_player));
    BankValueSetFromString(gv_stR[lp_player], "X", "TipLoc", lib90F7C81D_gv_tipPanel.lv_tipLoc[lp_player]);
    lib90F7C81D_gf_SaveMOSAchievementStats(lp_player, gv_stR[lp_player]);
    BankSave(gv_stR[lp_player]);
    PlayerBankSave(lp_player);
    lv_currentRank = gf_PlayersCurrentRankLevel(lv_oldXP);
    lv_newRank = gf_PlayersCurrentRankLevel(lv_newXP);
    lv_currentLevel = gf_MOSLevelCurrent(lv_oldMosXP);
    lv_newLevel = gf_MOSLevelCurrent(lv_newMosXP);
    if ((lv_newRank > lv_currentRank)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (TextWithColor(PlayerName(lp_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))) + StringExternal("Param/Value/FD008601") + gf_PlayersCurrentRank(lp_player)));
        lib90F7C81D_gf_FlashAchievementBadge(UserDataInstance("AchievementBadge", (9 + lv_newRank)), lp_player);
        if ((lib90F7C81D_gv_bankData.lv_decalSelected[lp_player] == 1) && (lib90F7C81D_gv_playersHeroisDead[lp_player] == false)) {
            lib90F7C81D_gv_mOSTexture.lv_decal[lp_player] = UserDataGetGameLink("RankXP", UserDataInstance("RankXP", lv_newRank), "Rank Decal", 1);
            libNtve_gf_SendActorMessageToUnit(lib90F7C81D_gv_playerHeroes[lp_player], libNtve_gf_TextureSelectByID(lib90F7C81D_gv_mOSTexture.lv_decal[lp_player]));
        }
        if ((lib90F7C81D_gv_gameOver == false)) {
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][(31 + lv_newRank)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
        }
    }
    if ((lv_newLevel > lv_currentLevel)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (TextWithColor(PlayerName(lp_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))) + StringExternal("Param/Value/4B3946E2") + UnitGetName(lib90F7C81D_gv_playerHeroes[lp_player]) + StringExternal("Param/Value/DD6B8F65") + gf_MOSLevelUnlocked(gv_menu.lv_mOSSelected[lp_player], lp_player)));
        lib90F7C81D_gf_FlashAchievementBadge(UserDataInstance("AchievementBadge", lv_newLevel), lp_player);
        if ((lib90F7C81D_gv_gameOver == false)) {
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_mOSAchievements[(gv_menu.lv_mOSSelected[lp_player] - 1)][(lv_newLevel + 3)], PlayerGroupSingle(lp_player), "AchievementBadge", "Earned");
        }
        if ((lib90F7C81D_gv_gameOver == false) && (lv_newLevel <= 3)) {
            PlayerModifyPropertyInt(lp_player, c_playerPropTerrazine, c_playerPropOperAdd, 1);
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaSubtitle, StringExternal("Param/Value/3A7DDD02"));
        }
        if ((lv_newLevel == 4)) {
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaChat, (StringExternal("Param/Value/0297C6D6") + StringToText(UserDataGetString("Camos", UserDataInstance("Camos", (gv_menu.lv_mOSSelected[lp_player] + 1)), "Camo Name", 1)) + StringExternal("Param/Value/43203683")));
            if ((lib90F7C81D_gv_gameOver == false)) {
                lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Camo, UserDataInstance("Camos", (gv_menu.lv_mOSSelected[lp_player] + 1)), "Rank Insignia", lp_player, false);
            }
        }
        if ((lv_newLevel == 5)) {
            UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaChat, (StringExternal("Param/Value/7CFD206A") + StringToText(UserDataGetString("Decals", UserDataInstance("Decals", (gv_menu.lv_mOSSelected[lp_player] + 2)), "Decal Name", 1)) + StringExternal("Param/Value/35491CC3")));
            if ((lib90F7C81D_gv_gameOver == false)) {
                lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Decal, "Default", UserDataInstance("Decals", (gv_menu.lv_mOSSelected[lp_player] + 2)), lp_player, false);
                if ((lib90F7C81D_gv_achievementPanel.lv_prestigeLevel[lp_player] < 5)) {
                    lib90F7C81D_gf_FlashAchievementBadge(UserDataInstance("AchievementBadge", (73 + lib90F7C81D_gv_achievementPanel.lv_prestigeLevel[lp_player])), lp_player);
                    lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Decal, "Default", UserDataInstance("Decals", (32 + lib90F7C81D_gv_achievementPanel.lv_prestigeLevel[lp_player])), lp_player, false);
                }
            }
        }
    }
    gf_UpdateSDFrameTooltip(lp_player);
    lv_string = "";
}

void gf_XPMultiplier (fixed lp_multiplier) {
    // Automatic Variable Declarations
    // Implementation
    gv_xPMOD = lp_multiplier;
}

void gf_UpdateSDFrameTooltip (int lp_player) {
    // Variable Declarations
    text lv_tooltipText;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tooltipText = StringToText("");

    // Implementation
    if ((lib90F7C81D_gf_GetGameMode(10) || lib90F7C81D_gf_GetGameMode(11))) {
        lv_tooltipText = (StringExternal("Param/Value/600C852D") + gf_PlayersCurrentRank(lp_player) + StringExternal("Param/Value/37547C42") + StringExternal("Param/Value/60B1A128") + FormatNumber(lib90F7C81D_gv_bankData.lv_xP[lp_player]) + StringExternal("Param/Value/58E29F54") + StringExternal("Param/Value/32463C94") + gf_MOSLevelNameSDTooltip(gv_sDFrameIndex[lp_player], lp_player) + StringExternal("Param/Value/5BD68853") + StringExternal("Param/Value/CABF4FF0") + FormatNumber(lib90F7C81D_gv_bankData.lv_mOSXP[gv_sDFrameIndex[lp_player]][lp_player]) + StringExternal("Param/Value/62C343D1") + StringExternal("Param/Value/A4A4FF4C") + IntToText(lib90F7C81D_gv_bankData.lv_gamesPlayed[lp_player]) + StringExternal("Param/Value/BEB3B814") + StringExternal("Param/Value/33078BF6"));
    }
    else {
        lv_tooltipText = (StringExternal("Param/Value/6E7EA797") + gf_PlayersCurrentRank(lp_player) + StringExternal("Param/Value/DA4CC2BA") + StringExternal("Param/Value/83FD6A39") + FormatNumber(lib90F7C81D_gv_bankData.lv_xP[lp_player]) + StringExternal("Param/Value/7196DBF8") + StringExternal("Param/Value/F082B5E6") + gf_MOSLevelNameSDTooltip(gv_sDFrameIndex[lp_player], lp_player) + StringExternal("Param/Value/D1437CA5") + StringExternal("Param/Value/7E16CE81") + FormatNumber(lib90F7C81D_gv_bankData.lv_mOSXP[gv_sDFrameIndex[lp_player]][lp_player]) + StringExternal("Param/Value/C9D5DC4C") + StringExternal("Param/Value/8AF68B37") + IntToText(lib90F7C81D_gv_bankData.lv_gamesPlayed[lp_player]) + StringExternal("Param/Value/09B3794F") + StringToText(UserDataGetString("GameModes", UserDataInstance("GameModes", lib90F7C81D_gf_GameMode()), "Game Mode", 1)) + StringExternal("Param/Value/ECFD6766") + FormatNumber(lib90F7C81D_gv_bankData.lv_gamesWon[lib90F7C81D_gf_GameMode()][lp_player]) + StringExternal("Param/Value/65AF646D") + StringExternal("Param/Value/3EF6520E"));
    }
    libNtve_gf_SetDialogItemTooltip(lib90F7C81D_gv_sDPingPlayerButton[lp_player], lv_tooltipText, PlayerGroupAll());
}

trigger auto_gf_HideXPFrame_Trigger = null;
string auto_gf_HideXPFrame_lp_key;

void gf_HideXPFrame (string lp_key) {
    auto_gf_HideXPFrame_lp_key = lp_key;

    if (auto_gf_HideXPFrame_Trigger == null) {
        auto_gf_HideXPFrame_Trigger = TriggerCreate("auto_gf_HideXPFrame_TriggerFunc");
    }

    TriggerExecute(auto_gf_HideXPFrame_Trigger, false, false);
}

bool auto_gf_HideXPFrame_TriggerFunc (bool testConds, bool runActions) {
    string lp_key = auto_gf_HideXPFrame_lp_key;

    // Automatic Variable Declarations
    // Implementation
    if ((lp_key == "Close")) {
        Wait(4.5, c_timeGame);
    }
    else {
        Wait(2.0, c_timeGame);
    }
    DialogControlSendAnimationEvent(gv_xPFrame, PlayerGroupAll(), lp_key);
    return true;
}

bool gf_FirstWinBonus (int lp_player) {
    // Variable Declarations
    int lv_index;
    string lv_string;
    string lv_sig;
    bool lv_bonus;
    int lv_bool;

    // Automatic Variable Declarations
    const int auto7288FBFE_ae = 6;
    const int auto7288FBFE_ai = 1;

    // Variable Initialization
    lv_string = "";
    lv_sig = "";

    // Implementation
    lv_index = 0;
    for ( ; ( (auto7288FBFE_ai >= 0 && lv_index <= auto7288FBFE_ae) || (auto7288FBFE_ai < 0 && lv_index >= auto7288FBFE_ae) ) ; lv_index += auto7288FBFE_ai ) {
        if ((gv_xPEvents.lv_dayBonus[lv_index][lp_player] == false)) {
            lv_bool = BoolToInt(false);
            if ((GetDateTimeWeekday(InitialDateTimeGet()) == lv_index)) {
                lv_bonus = true;
                lv_bool = BoolToInt(true);
                gv_xPEvents.lv_dayBonus[lv_index][lp_player] = true;
                lib90F7C81D_gv_achievementPanel.lv_winBonusStreak[lp_player] += 1;
            }
        }
        else {
            lv_bool = BoolToInt(true);
        }
        lv_string = (lv_string + IntToString(lv_bool));
    }
    if ((lv_bonus == true)) {
        BankValueSetFromString(gv_stR[lp_player], "Time", "Day", lv_string);
        lv_sig = PlayerBankImportConverterSignature((BankValueGetAsString(gv_stR[lp_player], "Time", "UNIXEPOCHSD") + BankValueGetAsString(gv_stR[lp_player], "Time", "UNIXEPOCHLP") + lv_string + ((GameAttributeGameValue("1")) + (GameAttributeGameValue("4")) + IntToString(StringToInt((GameAttributeGameValue("5")))))));
        BankValueSetFromString(gv_stR[lp_player], "Time", "Signature", lv_sig);
        return true;
    }
    return false;
}

trigger auto_gf_SetupDayBonus_Trigger = null;
int auto_gf_SetupDayBonus_lp_player;

void gf_SetupDayBonus (int lp_player) {
    auto_gf_SetupDayBonus_lp_player = lp_player;

    if (auto_gf_SetupDayBonus_Trigger == null) {
        auto_gf_SetupDayBonus_Trigger = TriggerCreate("auto_gf_SetupDayBonus_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetupDayBonus_Trigger, false, false);
}

bool auto_gf_SetupDayBonus_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_SetupDayBonus_lp_player;

    // Variable Declarations
    int lv_index;
    int lv_intSD;
    int lv_intLP;
    int lv_initialDate;
    string lv_stringSD;
    string lv_stringLP;
    string lv_dayBool;
    string lv_sig;

    // Automatic Variable Declarations
    const int auto949EF68C_ae = 7;
    const int auto949EF68C_ai = 1;
    const int auto29F0CD63_ae = 6;
    const int auto29F0CD63_ai = 1;
    const int autoCA02A27B_ae = 7;
    const int autoCA02A27B_ai = 1;
    const int autoA5485679_ae = 6;
    const int autoA5485679_ai = 1;
    const int autoF9FC37EC_ae = 6;
    const int autoF9FC37EC_ai = 1;

    // Variable Initialization
    lv_stringSD = "";
    lv_stringLP = "";
    lv_dayBool = "";
    lv_sig = "";

    // Implementation
    if ((BankSectionExists(gv_stR[lp_player], "Time") == false)) {
        lv_intSD = DateTimeToInt(InitialDateTimeGet());
        lv_stringSD = libNtve_gf_FormatDateTimeasString(IntToDateTime(lv_intSD));
        lv_intLP = DateTimeToInt(CurrentDateTimeGet());
        lv_stringLP = libNtve_gf_FormatDateTimeasString(IntToDateTime(lv_intLP));
        BankValueSetFromString(gv_stR[lp_player], "Time", "StartDate", lv_stringSD);
        BankValueSetFromString(gv_stR[lp_player], "Time", "UNIXEPOCHSD", IntToString(lv_intSD));
        BankValueSetFromString(gv_stR[lp_player], "Time", "LastPlayed", lv_stringLP);
        BankValueSetFromString(gv_stR[lp_player], "Time", "UNIXEPOCHLP", IntToString(lv_intLP));
        lv_index = 0;
        for ( ; ( (autoF9FC37EC_ai >= 0 && lv_index <= autoF9FC37EC_ae) || (autoF9FC37EC_ai < 0 && lv_index >= autoF9FC37EC_ae) ) ; lv_index += autoF9FC37EC_ai ) {
            gv_xPEvents.lv_dayBonus[lv_index][lp_player] = false;
        }
        lv_dayBool = "0000000";
        BankValueSetFromString(gv_stR[lp_player], "Time", "Day", lv_dayBool);
        lv_sig = PlayerBankImportConverterSignature((IntToString(lv_intSD) + IntToString(lv_intLP) + lv_dayBool + ((GameAttributeGameValue("1")) + (GameAttributeGameValue("4")) + IntToString(StringToInt((GameAttributeGameValue("5")))))));
        BankValueSetFromString(gv_stR[lp_player], "Time", "Signature", lv_sig);
        DialogControlSendAnimationEvent(gv_menu.lv_firstWinBonusFrame, PlayerGroupSingle(lp_player), "FirstWinEnabled");
    }
    else {
        lv_sig = PlayerBankImportConverterSignature((BankValueGetAsString(gv_stR[lp_player], "Time", "UNIXEPOCHSD") + BankValueGetAsString(gv_stR[lp_player], "Time", "UNIXEPOCHLP") + BankValueGetAsString(gv_stR[lp_player], "Time", "Day") + ((GameAttributeGameValue("1")) + (GameAttributeGameValue("4")) + IntToString(StringToInt((GameAttributeGameValue("5")))))));
        if ((BankValueGetAsString(gv_stR[lp_player], "Time", "Signature") == lv_sig)) {
            lv_stringSD = BankValueGetAsString(gv_stR[lp_player], "Time", "UNIXEPOCHSD");
            lv_intSD = StringToInt(lv_stringSD);
            lv_intLP = DateTimeToInt(CurrentDateTimeGet());
            lv_stringLP = libNtve_gf_FormatDateTimeasString(IntToDateTime(lv_intLP));
            lv_initialDate = (lv_intLP - lv_intSD);
            gv_xPEvents.lv_day[lp_player] = BankValueGetAsString(gv_stR[lp_player], "Time", "Day");
            lv_dayBool = gv_xPEvents.lv_day[lp_player];
            if ((lv_initialDate >= 604800)) {
                lv_index = 1;
                for ( ; ( (auto949EF68C_ai >= 0 && lv_index <= auto949EF68C_ae) || (auto949EF68C_ai < 0 && lv_index >= auto949EF68C_ae) ) ; lv_index += auto949EF68C_ai ) {
                    if ((StringSub(lv_dayBool, lv_index, lv_index) == "1")) {
                        gv_xPEvents.lv_dayBonus[(lv_index - 1)][lp_player] = true;
                        lib90F7C81D_gv_achievementPanel.lv_winBonusStreak[lp_player] += 1;
                    }
                }
                if ((lib90F7C81D_gv_achievementPanel.lv_winBonusStreak[lp_player] == 6) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[34][lp_player] == false) && (lv_initialDate < 648000)) {
                    gv_xPEvents.lv_hotStreakACH[lp_player] = true;
                }
                lv_index = 0;
                for ( ; ( (auto29F0CD63_ai >= 0 && lv_index <= auto29F0CD63_ae) || (auto29F0CD63_ai < 0 && lv_index >= auto29F0CD63_ae) ) ; lv_index += auto29F0CD63_ai ) {
                    gv_xPEvents.lv_dayBonus[lv_index][lp_player] = false;
                    lv_dayBool = "0000000";
                }
                gv_xPEvents.lv_day[lp_player] = lv_dayBool;
                lib90F7C81D_gv_achievementPanel.lv_winBonusStreak[lp_player] = 0;
                BankValueSetFromString(gv_stR[lp_player], "Time", "Day", lv_dayBool);
                lv_intSD = DateTimeToInt(InitialDateTimeGet());
                lv_stringSD = libNtve_gf_FormatDateTimeasString(IntToDateTime(lv_intSD));
                BankValueSetFromString(gv_stR[lp_player], "Time", "StartDate", lv_stringSD);
                BankValueSetFromString(gv_stR[lp_player], "Time", "UNIXEPOCHSD", IntToString(lv_intSD));
                BankValueSetFromString(gv_stR[lp_player], "Time", "LastPlayed", lv_stringLP);
                BankValueSetFromString(gv_stR[lp_player], "Time", "UNIXEPOCHLP", IntToString(lv_intLP));
                lv_sig = PlayerBankImportConverterSignature((IntToString(lv_intSD) + IntToString(lv_intLP) + lv_dayBool + ((GameAttributeGameValue("1")) + (GameAttributeGameValue("4")) + IntToString(StringToInt((GameAttributeGameValue("5")))))));
                BankValueSetFromString(gv_stR[lp_player], "Time", "Signature", lv_sig);
                DialogControlSendAnimationEvent(gv_menu.lv_firstWinBonusFrame, PlayerGroupSingle(lp_player), "FirstWinEnabled");
            }
            else {
                lv_index = 1;
                for ( ; ( (autoCA02A27B_ai >= 0 && lv_index <= autoCA02A27B_ae) || (autoCA02A27B_ai < 0 && lv_index >= autoCA02A27B_ae) ) ; lv_index += autoCA02A27B_ai ) {
                    if ((StringSub(lv_dayBool, lv_index, lv_index) == "1")) {
                        gv_xPEvents.lv_dayBonus[(lv_index - 1)][lp_player] = true;
                        lib90F7C81D_gv_achievementPanel.lv_winBonusStreak[lp_player] += 1;
                    }
                }
                BankValueSetFromString(gv_stR[lp_player], "Time", "LastPlayed", lv_stringLP);
                BankValueSetFromString(gv_stR[lp_player], "Time", "UNIXEPOCHLP", IntToString(lv_intLP));
                lv_sig = PlayerBankImportConverterSignature((BankValueGetAsString(gv_stR[lp_player], "Time", "UNIXEPOCHSD") + IntToString(lv_intLP) + BankValueGetAsString(gv_stR[lp_player], "Time", "Day") + ((GameAttributeGameValue("1")) + (GameAttributeGameValue("4")) + IntToString(StringToInt((GameAttributeGameValue("5")))))));
                BankValueSetFromString(gv_stR[lp_player], "Time", "Signature", lv_sig);
                lv_index = 0;
                for ( ; ( (autoA5485679_ai >= 0 && lv_index <= autoA5485679_ae) || (autoA5485679_ai < 0 && lv_index >= autoA5485679_ae) ) ; lv_index += autoA5485679_ai ) {
                    if ((GetDateTimeWeekday(InitialDateTimeGet()) == lv_index) && (gv_xPEvents.lv_dayBonus[lv_index][lp_player] == false)) {
                        DialogControlSendAnimationEvent(gv_menu.lv_firstWinBonusFrame, PlayerGroupSingle(lp_player), "FirstWinEnabled");
                        break;
                    }
                }
            }
        }
    }
    return true;
}

void gf_FirstWinCheck () {
    // Automatic Variable Declarations
    playergroup autoF1337855_g;
    int autoF1337855_var;

    // Implementation
    autoF1337855_g = lib90F7C81D_gv_players;
    autoF1337855_var = -1;
    while (true) {
        autoF1337855_var = PlayerGroupNextPlayer(autoF1337855_g, autoF1337855_var);
        if (autoF1337855_var < 0) { break; }
        if ((gf_FirstWinBonus(autoF1337855_var) == true)) {
            gv_xPEvents.lv_bonusXp[autoF1337855_var] = true;
            if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[34][autoF1337855_var] == false) && ((lib90F7C81D_gv_achievementPanel.lv_winBonusStreak[autoF1337855_var] == 7) || (gv_xPEvents.lv_hotStreakACH[autoF1337855_var] == true))) {
                lib90F7C81D_gv_bankData.lv_achievementsUnlocked[34][autoF1337855_var] = true;
                lib90F7C81D_gf_FlashAchievementBadge("Hot Streak", autoF1337855_var);
            }
            lib90F7C81D_gf_FlashAchievementBadge("First Win Of The Day", autoF1337855_var);
            gf_XPGainPlayer(FixedToInt(lib90F7C81D_gf_GetModeXP("bonus.First Win")), lib90F7C81D_gf_GetModeText("bonus.First Win"), autoF1337855_var);
        }
    }
}

void gf_XPEvents () {
    // Variable Declarations
    bool lv_allowBonus;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((libNtve_gf_DateTimeisBetween(InitialDateTimeGet(), IntToDateTime(1703289600), IntToDateTime(1706659200)) == true)) {
        lv_allowBonus = true;
    }
    if ((lv_allowBonus == true)) {
        gf_XPMultiplier(1.2);
    }
}

trigger auto_gf_AddHeroLevels_Trigger = null;
int auto_gf_AddHeroLevels_lp_levels;

void gf_AddHeroLevels (int lp_levels) {
    auto_gf_AddHeroLevels_lp_levels = lp_levels;

    if (auto_gf_AddHeroLevels_Trigger == null) {
        auto_gf_AddHeroLevels_Trigger = TriggerCreate("auto_gf_AddHeroLevels_TriggerFunc");
    }

    TriggerExecute(auto_gf_AddHeroLevels_Trigger, false, false);
}

bool auto_gf_AddHeroLevels_TriggerFunc (bool testConds, bool runActions) {
    int lp_levels = auto_gf_AddHeroLevels_lp_levels;

    // Automatic Variable Declarations
    int auto7D1CBA35_n;
    int auto7D1CBA35_i;
    playergroup auto48C49DFF_g;
    int auto48C49DFF_var;

    // Implementation
    auto7D1CBA35_n = lp_levels;
    for (auto7D1CBA35_i = 1; auto7D1CBA35_i <= auto7D1CBA35_n; auto7D1CBA35_i += 1) {
        Wait(0.0625, c_timeGame);
        auto48C49DFF_g = lib90F7C81D_gv_players;
        auto48C49DFF_var = -1;
        while (true) {
            auto48C49DFF_var = PlayerGroupNextPlayer(auto48C49DFF_g, auto48C49DFF_var);
            if (auto48C49DFF_var < 0) { break; }
            UnitXPAddXP(lib90F7C81D_gv_playerHeroes[auto48C49DFF_var], null, 2.0);
        }
        gv_currentPlayerLevel += 1.0;
    }
    return true;
}

trigger auto_gf_AddHalfHeroLevel_Trigger = null;

void gf_AddHalfHeroLevel () {
    if (auto_gf_AddHalfHeroLevel_Trigger == null) {
        auto_gf_AddHalfHeroLevel_Trigger = TriggerCreate("auto_gf_AddHalfHeroLevel_TriggerFunc");
    }

    TriggerExecute(auto_gf_AddHalfHeroLevel_Trigger, false, false);
}

bool auto_gf_AddHalfHeroLevel_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF4E5BE5C_g;
    int autoF4E5BE5C_var;

    // Implementation
    autoF4E5BE5C_g = lib90F7C81D_gv_players;
    autoF4E5BE5C_var = -1;
    while (true) {
        autoF4E5BE5C_var = PlayerGroupNextPlayer(autoF4E5BE5C_g, autoF4E5BE5C_var);
        if (autoF4E5BE5C_var < 0) { break; }
        UnitXPAddXP(lib90F7C81D_gv_playerHeroes[autoF4E5BE5C_var], null, 1.0);
    }
    gv_currentPlayerLevel += 0.5;
    return true;
}

trigger auto_gf_AddQuarterHeroLevel_Trigger = null;

void gf_AddQuarterHeroLevel () {
    if (auto_gf_AddQuarterHeroLevel_Trigger == null) {
        auto_gf_AddQuarterHeroLevel_Trigger = TriggerCreate("auto_gf_AddQuarterHeroLevel_TriggerFunc");
    }

    TriggerExecute(auto_gf_AddQuarterHeroLevel_Trigger, false, false);
}

bool auto_gf_AddQuarterHeroLevel_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoFE081D44_g;
    int autoFE081D44_var;

    // Implementation
    autoFE081D44_g = lib90F7C81D_gv_players;
    autoFE081D44_var = -1;
    while (true) {
        autoFE081D44_var = PlayerGroupNextPlayer(autoFE081D44_g, autoFE081D44_var);
        if (autoFE081D44_var < 0) { break; }
        UnitXPAddXP(lib90F7C81D_gv_playerHeroes[autoFE081D44_var], null, 0.5);
    }
    gv_currentPlayerLevel += 0.25;
    return true;
}

void gf_SupplyCacheSpawnItem (string lp_itemUnitType, int lp_number, region lp_cacheSite) {
    // Variable Declarations
    bool lv_succeded;
    point lv_where;
    point lv_from;
    unit lv_itemspawned;
    fixed lv_chargecount;

    // Automatic Variable Declarations
    int auto0D8C7993_n;
    int auto0D8C7993_i;
    const int autoF0A5EFC1_n = 8;
    int autoF0A5EFC1_i;

    // Variable Initialization
    lv_from = RegionGetCenter(lp_cacheSite);

    // Implementation
    auto0D8C7993_n = lp_number;
    for (auto0D8C7993_i = 1; auto0D8C7993_i <= auto0D8C7993_n; auto0D8C7993_i += 1) {
        lv_succeded = false;
        for (autoF0A5EFC1_i = 1; autoF0A5EFC1_i <= autoF0A5EFC1_n; autoF0A5EFC1_i += 1) {
            lv_where = RegionRandomPoint(lp_cacheSite);
            if ((PointPathingPassable(lv_where) == true) && (PointPathingIsConnected(lv_from, lv_where) == true)) {
                lv_succeded = true;
                break;
            }

        }
        if ((lv_succeded == false)) {
            lv_where = lv_from;
        }

        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_itemUnitType, c_unitCreateIgnorePlacement, 0, lv_where);
        lv_itemspawned = UnitLastCreated();
        if ((UnitGetType(lv_itemspawned) == "Magazines")) {
            UnitAddChargeUsed(UnitLastCreated(), "AmmoCharges", -2.0);
            lv_chargecount = lib90F7C81D_gf_ItemChargesRemaining(UnitLastCreated(), "AmmoCharges", 3.0);
            UnitSetInfoText(UnitLastCreated(), StringToText(""), (StringExternal("Param/Value/8D424E33") + UnitGetName(UnitLastCreated()) + StringExternal("Param/Value/51383E80") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/5EBDAB67")), StringToText(""));
        }

    }
    lv_itemspawned = null;
    lv_where = null;
    lv_from = null;
}

trigger auto_gf_TallyVotes_Trigger = null;

void gf_TallyVotes () {
    if (auto_gf_TallyVotes_Trigger == null) {
        auto_gf_TallyVotes_Trigger = TriggerCreate("auto_gf_TallyVotes_TriggerFunc");
    }

    TriggerExecute(auto_gf_TallyVotes_Trigger, false, false);
}

bool auto_gf_TallyVotes_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_indexMax;
    int lv_votes;
    int lv_votesMax;
    int lv_gameMode;
    int lv_timer;
    int lv_modeLabel;
    int lv_survivalVotes;
    int lv_campaignVotes;

    // Automatic Variable Declarations
    const int auto40FDF616_ae = 12;
    const int auto40FDF616_ai = 1;
    const int auto5C1FFA4F_ae = 12;
    const int auto5C1FFA4F_ai = 1;
    const int autoEA19EFF8_ae = 5;
    const int autoEA19EFF8_ai = 1;
    int autoCE2517B0_val;
    playergroup autoE2CAE506_g;
    int autoE2CAE506_var;

    // Variable Initialization
    lv_timer = c_invalidDialogControlId;
    lv_modeLabel = c_invalidDialogControlId;

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ModeTimer");
    lv_timer = DialogControlLastCreated();
    DialogControlSendAnimationEvent(lv_timer, PlayerGroupAll(), "Destroy");
    DialogControlSetVisible(lv_timer, PlayerGroupAll(), false);
    DialogControlFadeTransparency(lv_timer, PlayerGroupAll(), 0.0, 100.0);
    if ((GameAttributeGameValue("3") == "0002")) {
        lv_indexMax = 6;
        lv_index = 1;
        for ( ; ( (auto40FDF616_ai >= 0 && lv_index <= auto40FDF616_ae) || (auto40FDF616_ai < 0 && lv_index >= auto40FDF616_ae) ) ; lv_index += auto40FDF616_ai ) {
            if ((lv_index < 6)) {
                lv_campaignVotes += gv_modeSelection.lv_votes[lv_index];
            }
            else {
                lv_survivalVotes += gv_modeSelection.lv_votes[lv_index];
            }
        }
        if ((lv_campaignVotes >= lv_survivalVotes)) {
            lv_indexMax = 2;
            lv_index = 1;
            for ( ; ( (autoEA19EFF8_ai >= 0 && lv_index <= autoEA19EFF8_ae) || (autoEA19EFF8_ai < 0 && lv_index >= autoEA19EFF8_ae) ) ; lv_index += autoEA19EFF8_ai ) {
                lv_votes = gv_modeSelection.lv_votes[lv_index];
                lv_votesMax = gv_modeSelection.lv_votes[lv_indexMax];
                if ((lv_votes > lv_votesMax)) {
                    lv_indexMax = lv_index;
                }
            }
        }
        else {
            lv_index = 6;
            for ( ; ( (auto5C1FFA4F_ai >= 0 && lv_index <= auto5C1FFA4F_ae) || (auto5C1FFA4F_ai < 0 && lv_index >= auto5C1FFA4F_ae) ) ; lv_index += auto5C1FFA4F_ai ) {
                lv_votes = gv_modeSelection.lv_votes[lv_index];
                lv_votesMax = gv_modeSelection.lv_votes[lv_indexMax];
                if ((lv_votes > lv_votesMax)) {
                    lv_indexMax = lv_index;
                }
            }
        }
    }
    else if ((GameAttributeGameValue("3") == "0003")) {
        lv_indexMax = 11;
    }
    else if (true) {
        lv_indexMax = 10;
    }
    if ((lv_indexMax == 11)) {
        lv_indexMax = 10;
    }
    lv_gameMode = UserDataGetInt("GameModes", UserDataInstance("GameModes", lv_indexMax), "Mode #", 1);
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/ModeLabel/Label");
    lv_modeLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(lv_modeLabel, StringToText(UserDataGetString("GameModes", UserDataInstance("GameModes", lv_gameMode), "Game Mode", 1)), PlayerGroupAll());
    DialogControlSetAnimationState(lv_modeLabel, PlayerGroupAll(), "ModeTooltip", IntToString(lv_gameMode));
    if ((lv_gameMode == 12)) {
        lv_gameMode = UserDataGetInt("GameModes", UserDataInstance("GameModes", lib90F7C81D_gv_weeklyModifier.lv_mode), "Mode #", 1);
        libNtve_gf_SetDialogItemText(lv_modeLabel, StringToText(UserDataGetString("GameModes", UserDataInstance("GameModes", lv_gameMode), "Game Mode", 1)), PlayerGroupAll());
        DialogControlSetAnimationState(lv_modeLabel, PlayerGroupAll(), "ModeTooltip", IntToString(lv_gameMode));
        lib90F7C81D_gf_StartModifierChallenge();
    }
    else {
        libNtve_gf_SetDialogItemImage(lib90F7C81D_gv_weeklyModifier.lv_icons[0], null, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lib90F7C81D_gv_weeklyModifier.lv_icons[1], null, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(lib90F7C81D_gv_weeklyModifier.lv_icons[2], null, PlayerGroupAll());
    }
    TextExpressionSetToken("Param/Expression/286D8561", "A", IntToText(lv_gameMode));
    TextExpressionSetToken("Param/Expression/286D8561", "B", StringToText(UserDataGetString("GameModes", UserDataInstance("GameModes", lv_gameMode), "Game Mode", 1)));
    TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/286D8561"), gv_debug.lv_gameEvents);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, lib90F7C81D_gf_DebugModifierType(), gv_debug.lv_gameEvents);
    autoCE2517B0_val = lv_gameMode;
    if (autoCE2517B0_val == 1) {
        lib90F7C81D_gf_SetDifficulty(1);
        TriggerEnable(gt_CampaignSetup, true);
    }
    else if (autoCE2517B0_val == 2) {
        lib90F7C81D_gf_SetDifficulty(2);
        TriggerEnable(gt_CampaignSetup, true);
    }
    else if (autoCE2517B0_val == 3) {
        lib90F7C81D_gf_SetDifficulty(3);
        TriggerEnable(gt_CampaignSetup, true);
    }
    else if (autoCE2517B0_val == 4) {
        lib90F7C81D_gf_SetDifficulty(4);
        TriggerEnable(gt_CampaignSetup, true);
    }
    else if (autoCE2517B0_val == 5) {
        lib90F7C81D_gf_SetDifficulty(5);
        TriggerEnable(gt_CampaignSetup, true);
    }
    else if (autoCE2517B0_val == 6) {
        lib90F7C81D_gf_SetDifficulty(6);
        TriggerEnable(gt_SurvivalModeSetup, true);
    }
    else if (autoCE2517B0_val == 7) {
        lib90F7C81D_gf_SetDifficulty(7);
        TriggerEnable(gt_MissionSurvivalSetup3, true);
        if ((RandomInt(0, 0) == 0)) {
            gv_msv = false;
        }
    }
    else if (autoCE2517B0_val == 8) {
        lib90F7C81D_gf_SetDifficulty(8);
        TriggerEnable(gt_BossRushSetup, true);
    }
    else if (autoCE2517B0_val == 10) {
        lib90F7C81D_gf_SetDifficulty(10);
        TriggerEnable(gt_SandboxSetup, true);
        DialogControlSendAnimationEvent(gv_menu.lv_firstWinBonusFrame, PlayerGroupAll(), "FirstWinDisabled");
    }
    else if (autoCE2517B0_val == 11) {
        lib90F7C81D_gf_SetDifficulty(11);
        TriggerEnable(gt_DeathmatchSetup, true);
        DialogControlSendAnimationEvent(gv_menu.lv_firstWinBonusFrame, PlayerGroupAll(), "FirstWinDisabled");
    }
    else {
        lib90F7C81D_gf_SetDifficulty(6);
        TriggerEnable(gt_SurvivalModeSetup, true);
    }
    if ((lib90F7C81D_gf_GetGameMode(1) || lib90F7C81D_gf_GetGameMode(7))) {
        gf_HeroSelector(RegionGetCenter(RegionFromId(43)));
    }
    else {
        gf_HeroSelector(PointFromId(1665385457));
    }
    TriggerEnable(gt_MOSButtons, true);
    TriggerEnable(gt_ReadyButton, true);
    TriggerEnable(gt_AutoSelectMOS, true);
    TriggerEnable(gt_ClassicCard, true);
    gf_PlayerSlotCheck();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/MapPanel");
    DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupAll(), "HideMapPanel");
    DialogControlSendAnimationEvent(lib90F7C81D_gv_backgroundMain, PlayerGroupAll(), "Display");
    autoE2CAE506_g = lib90F7C81D_gv_players;
    autoE2CAE506_var = -1;
    while (true) {
        autoE2CAE506_var = PlayerGroupNextPlayer(autoE2CAE506_g, autoE2CAE506_var);
        if (autoE2CAE506_var < 0) { break; }
        libNtve_gf_SetDialogItemText(gv_menu.lv_notReadySlotsLabel[autoE2CAE506_var], TextWithColor(PlayerName(autoE2CAE506_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoE2CAE506_var, false))), PlayerGroupAll());
        DialogControlSetAnimationState(gv_menu.lv_notReadySlots[autoE2CAE506_var], PlayerGroupAll(), "Player", "ReadyToSelect");
    }
    lib90F7C81D_gf_RunEvent("ModeControl");
    DialogControlSendAnimationEvent(gv_menu.lv_charScreen, PlayerGroupAll(), "ShowCharSelection");
    gf_MOSLobbyPreference();
    if ((GameIsTestMap(false) == false)) {
        gv_voteTime = 45.0;
        libNtve_gf_SetDialogItemText(gv_voteTimeFrame, FixedToText(gv_voteTime, 0), PlayerGroupAll());
        while ((gv_voteTime != 0.0) && (gv_gameStart == false)) {
            Wait(1.0, c_timeGame);
            gv_voteTime -= 1.0;
            libNtve_gf_SetDialogItemText(gv_voteTimeFrame, FixedToText(gv_voteTime, 0), PlayerGroupAll());
            if ((gv_voteTime == 0.0) && (gv_gameStart == false)) {
                lib90F7C81D_gf_RunEvent("AutoPick");
            }
        }
    }
    else {
        libNtve_gf_SetDialogItemText(gv_voteTimeFrame, StringExternal("Param/Value/7A6559F5"), PlayerGroupAll());
    }
    DialogControlDestroy(lv_timer);
    DialogControlDestroy(lv_modeLabel);
    return true;
}

void gf_UpdateVotesRemainingTooltip () {
    // Variable Declarations
    text lv_playerNameTooltip;
    int lv_count;
    int lv_max;

    // Automatic Variable Declarations
    playergroup autoE7AB61D7_g;
    int autoE7AB61D7_var;

    // Variable Initialization
    lv_playerNameTooltip = StringExternal("Param/Value/0269F772");
    lv_max = PlayerGroupCount(lib90F7C81D_gv_players);

    // Implementation
    libNtve_gf_SetDialogItemTooltip(gv_modeSelection.lv_voteContainers[11], StringToText(""), PlayerGroupAll());
    autoE7AB61D7_g = lib90F7C81D_gv_players;
    autoE7AB61D7_var = -1;
    while (true) {
        autoE7AB61D7_var = PlayerGroupNextPlayer(autoE7AB61D7_g, autoE7AB61D7_var);
        if (autoE7AB61D7_var < 0) { break; }
        if ((gv_modeSelection.lv_playerVoted[autoE7AB61D7_var] == false)) {
            lv_count += 1;
            if ((lv_count == lv_max)) {
                lv_playerNameTooltip = (lv_playerNameTooltip + PlayerName(autoE7AB61D7_var));
            }
            else {
                lv_playerNameTooltip = (lv_playerNameTooltip + (PlayerName(autoE7AB61D7_var) + StringExternal("Param/Value/ED1394BE")));
            }
        }
    }
    if ((lv_count >= 1)) {
        libNtve_gf_SetDialogItemTooltip(gv_modeSelection.lv_voteContainers[11], lv_playerNameTooltip, PlayerGroupAll());
    }
}

void gf_UpdateVoteContainerTooltip (int lp_mode) {
    // Variable Declarations
    text lv_playerNameTooltip;
    int lv_count;
    int lv_max;

    // Automatic Variable Declarations
    playergroup auto4C4BB689_g;
    int auto4C4BB689_var;

    // Variable Initialization
    lv_playerNameTooltip = StringExternal("Param/Value/77B114C5");
    lv_max = PlayerGroupCount(lib90F7C81D_gv_players);

    // Implementation
    libNtve_gf_SetDialogItemTooltip(gv_modeSelection.lv_voteContainers[lp_mode], StringToText(""), PlayerGroupAll());
    auto4C4BB689_g = lib90F7C81D_gv_players;
    auto4C4BB689_var = -1;
    while (true) {
        auto4C4BB689_var = PlayerGroupNextPlayer(auto4C4BB689_g, auto4C4BB689_var);
        if (auto4C4BB689_var < 0) { break; }
        if ((gv_modeSelection.lv_modePlayerVoted[auto4C4BB689_var] == lp_mode)) {
            lv_count += 1;
            if ((lv_count == lv_max)) {
                lv_playerNameTooltip = (lv_playerNameTooltip + PlayerName(auto4C4BB689_var));
            }
            else {
                lv_playerNameTooltip = (lv_playerNameTooltip + (PlayerName(auto4C4BB689_var) + StringExternal("Param/Value/6EC25C49")));
            }
        }
    }
    if ((lv_count >= 1)) {
        libNtve_gf_SetDialogItemTooltip(gv_modeSelection.lv_voteContainers[lp_mode], lv_playerNameTooltip, PlayerGroupAll());
    }
}

void gf_UpdateVoteCount (int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    gv_modeSelection.lv_votes[lp_index] += 1;
    libNtve_gf_SetDialogItemText(gv_modeSelection.lv_voteCountLabel[lp_index], IntToText(gv_modeSelection.lv_votes[lp_index]), PlayerGroupAll());
    gf_UpdateVoteContainerTooltip(lp_index);
    if ((gv_modeSelection.lv_modeContainer[lp_index] == false)) {
        gv_modeSelection.lv_modeContainer[lp_index] = true;
        DialogControlSetVisible(gv_modeSelection.lv_voteContainers[lp_index], PlayerGroupAll(), true);
    }
}

trigger auto_gf_PlayerSlotCheck_Trigger = null;

void gf_PlayerSlotCheck () {
    if (auto_gf_PlayerSlotCheck_Trigger == null) {
        auto_gf_PlayerSlotCheck_Trigger = TriggerCreate("auto_gf_PlayerSlotCheck_TriggerFunc");
    }

    TriggerExecute(auto_gf_PlayerSlotCheck_Trigger, false, false);
}

bool auto_gf_PlayerSlotCheck_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int auto9E82CD5B_ae = 12;
    const int auto9E82CD5B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_player = 1;
    for ( ; ( (auto9E82CD5B_ai >= 0 && lv_player <= auto9E82CD5B_ae) || (auto9E82CD5B_ai < 0 && lv_player >= auto9E82CD5B_ae) ) ; lv_player += auto9E82CD5B_ai ) {
        if ((PlayerGroupHasPlayer(lib90F7C81D_gv_scoreScreenPlayers, lv_player) == false)) {
            DialogControlSendAnimationEvent(lib90F7C81D_gv_sDPlayerFrame[lv_player], PlayerGroupAll(), "Out");
            DialogControlSetAnimationState(lib90F7C81D_gv_sDPlayerFrame[lv_player], PlayerGroupAll(), "NoPlayer", "True");
        }
    }
    return true;
}

void gf_SetupMOS (int lp_playerIndex) {
    // Variable Declarations
    string lv_mOSCreated;
    int lv_dataInstanceIndex;
    fixed lv_currentReloadMod;
    int lv_slot;

    // Automatic Variable Declarations
    int auto15F53386_ae;
    const int auto15F53386_ai = 1;
    const int autoD5D9B97A_ae = 6;
    const int autoD5D9B97A_ai = 1;

    // Variable Initialization

    // Implementation
    UnitGroupRemove(lib90F7C81D_gv_heroSelectorGroup, lib90F7C81D_gv_heroSelectors[lp_playerIndex]);
    UnitRemove(lib90F7C81D_gv_heroSelectors[lp_playerIndex]);
    UnitControlGroupAddUnit(lp_playerIndex, 1, EventUnitCreatedUnit());
    UnitSelect(EventUnitCreatedUnit(), lp_playerIndex, true);
    UnitGroupAdd(lib90F7C81D_gv_heroesGroup, EventUnitCreatedUnit());
    UnitGroupAdd(lib90F7C81D_gv_undeadTargetGroup, EventUnitCreatedUnit());
    lib90F7C81D_gv_playerHeroes[lp_playerIndex] = EventUnitCreatedUnit();
    lib90F7C81D_gf_RegisterMOSToEvents(lib90F7C81D_gv_playerHeroes[lp_playerIndex]);
    if (((lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (10) == false) && (lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (11) == false) && ((lib90F7C81D_gv_bankData.lv_gamesPlayed[lp_playerIndex] <= 5) || (lib90F7C81D_gv_bankData.lv_gamesWon[lib90F7C81D_gf_GameMode()][lp_playerIndex] <= 3) || (lib90F7C81D_gv_bankData.lv_xP[lp_playerIndex] <= 1000)))) {
        if ((TriggerIsEnabled(lib90F7C81D_gt_NewPlayerDeath) == false)) {
            TriggerEnable(lib90F7C81D_gt_NewPlayerDeath, true);
        }
        TriggerAddEventUnitDied(lib90F7C81D_gt_NewPlayerDeath, UnitRefFromUnit(EventUnitCreatedUnit()));
    }
    if ((lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (6) || lib90F7C81D_gf_GetGameMode(1))) {
        lib90F7C81D_gf_RegisterMOSToWeaponsCache(gt_FindSupplyCache, lib90F7C81D_gv_playerHeroes[lp_playerIndex]);
    }
    if ((gv_gameStart == false)) {
        libNtve_gf_ShowHideUnit(lib90F7C81D_gv_playerHeroes[lp_playerIndex], false);
    }
    if ((lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (8) || lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (6) || lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (10) || lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (11))) {
        UnitSetPosition(lib90F7C81D_gv_playerHeroes[lp_playerIndex], RegionRandomPoint(RegionFromId(45)), false);
    }
    else {
        if ((gv_msv == false)) {
            UnitSetPosition(lib90F7C81D_gv_playerHeroes[lp_playerIndex], RegionRandomPoint(RegionFromId(43)), false);
        }
        else {
            UnitSetPosition(lib90F7C81D_gv_playerHeroes[lp_playerIndex], RegionRandomPoint(RegionFromId(45)), false);
        }
    }
    auto15F53386_ae = UserDataInstanceCount("MOSSetup");
    lv_dataInstanceIndex = 1;
    for ( ; ( (auto15F53386_ai >= 0 && lv_dataInstanceIndex <= auto15F53386_ae) || (auto15F53386_ai < 0 && lv_dataInstanceIndex >= auto15F53386_ae) ) ; lv_dataInstanceIndex += auto15F53386_ai ) {
        if ((UserDataGetGameLink("MOSSetup", UserDataInstance("MOSSetup", lv_dataInstanceIndex), "MOS Unit", 1) == UnitGetType(lib90F7C81D_gv_playerHeroes[lp_playerIndex]))) {
            lib90F7C81D_gv_playerUserIndex[lp_playerIndex] = lv_dataInstanceIndex;
            lv_mOSCreated = UserDataInstance("MOSSetup", lv_dataInstanceIndex);
            lib90F7C81D_gv_playerHeroImage[lp_playerIndex] = UserDataGetImagePath("MOSSetup", lv_mOSCreated, "MOS Image", 1);
            lib90F7C81D_gv_playerEncumberance[lp_playerIndex] = UserDataGetInt("MOSSetup", lv_mOSCreated, "MOS Encumberance", 1);
            lib90F7C81D_gv_reloadbasetime[lp_playerIndex] = UserDataGetFixed("MOSSetup", lv_mOSCreated, "Reload Time", 1);
            lib90F7C81D_gv_magsize[lp_playerIndex] = UserDataGetInt("MOSSetup", lv_mOSCreated, "Ammo Rounds (Base Weapon)", 1);
            lib90F7C81D_gv_veterancyType[lp_playerIndex] = UserDataGetGameLink("MOSSetup", lv_mOSCreated, "Veterancy Type", 1);
            gf_HookSelfCast(lp_playerIndex);
            if (((lib90F7C81D_gv_veterancyType[lp_playerIndex] == "HeroLevelsDFM") || (lib90F7C81D_gv_veterancyType[lp_playerIndex] == "HeroLevelsDMF"))) {
                lv_currentReloadMod = lib90F7C81D_gv_reloadbasetime[lp_playerIndex];
                lv_currentReloadMod *= 0.03;
                lib90F7C81D_gv_reloadbasetime[lp_playerIndex] -= lv_currentReloadMod;
            }
            lib90F7C81D_gf_UpdateReloadDurationLabel(lib90F7C81D_gv_playerHeroes[lp_playerIndex]);
            PlayerModifyPropertyInt(lp_playerIndex, c_playerPropMinerals, c_playerPropOperSetTo, UserDataGetInt("MOSSetup", lv_mOSCreated, "Ammo Rounds (Base Weapon)", 1));
            PlayerModifyPropertyInt(lp_playerIndex, c_playerPropVespene, c_playerPropOperSetTo, UserDataGetInt("MOSSetup", lv_mOSCreated, "Starting Magazines", 1));
            PlayerModifyPropertyInt(lp_playerIndex, c_playerPropSuppliesUsed, c_playerPropOperSetTo, 15);
            if ((gv_skillUpgradeBonus[lv_dataInstanceIndex][lp_playerIndex] == 1)) {
                PlayerModifyPropertyInt(lp_playerIndex, c_playerPropTerrazine, c_playerPropOperAdd, 1);
            }
            else if ((gv_skillUpgradeBonus[lv_dataInstanceIndex][lp_playerIndex] == 2)) {
                PlayerModifyPropertyInt(lp_playerIndex, c_playerPropTerrazine, c_playerPropOperAdd, 2);
            }
            else if ((gv_skillUpgradeBonus[lv_dataInstanceIndex][lp_playerIndex] >= 3)) {
                PlayerModifyPropertyInt(lp_playerIndex, c_playerPropTerrazine, c_playerPropOperAdd, 3);
            }
            if ((UnitGetType(lib90F7C81D_gv_playerHeroes[lp_playerIndex]) == "SFAAT")) {
                DialogControlSetAnimationState(gv_menu.lv_infoPaneGroup, PlayerGroupSingle(lp_playerIndex), "InfoPaneGroup", "SFAAT");
            }
            else if ((UnitGetType(lib90F7C81D_gv_playerHeroes[lp_playerIndex]) == "CavalryScout")) {
                lib90F7C81D_gv_inventory.lv_inventorySlotMax[lp_playerIndex] += 6;
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_inventory.lv_inventoryType, StringExternal("Param/Value/0C55CFCB"), PlayerGroupSingle(lp_playerIndex));
                lv_slot = 1;
                for ( ; ( (autoD5D9B97A_ai >= 0 && lv_slot <= autoD5D9B97A_ae) || (autoD5D9B97A_ai < 0 && lv_slot >= autoD5D9B97A_ae) ) ; lv_slot += autoD5D9B97A_ai ) {
                    UnitInventoryCreate(lib90F7C81D_gv_playerHeroes[lp_playerIndex], "BandolierSlot" + (IntToString(lv_slot)));
                    DialogControlSendAnimationEvent(lib90F7C81D_gv_inventory.lv_bandolierSlots[(lv_slot - 1)], PlayerGroupSingle(lp_playerIndex), "Locked");
                }
            }
            PlayerAddResponse(lp_playerIndex, "PlayerHitStat");
            lib90F7C81D_gf_RegisterMosAchievements(lib90F7C81D_gv_playerHeroes[lp_playerIndex], lp_playerIndex);
            break;
        }

    }
    DialogControlSendAnimationEvent(lib90F7C81D_gv_sDPlayerFrame[lp_playerIndex], PlayerGroupAll(), "Out");
    DialogControlSetAnimationState(lib90F7C81D_gv_editBox, PlayerGroupSingle(lp_playerIndex), "Player", IntToString(lp_playerIndex));
    lib90F7C81D_gf_HookUIToHero(lp_playerIndex);
    lib90F7C81D_gf_VoteButtonSetup(lp_playerIndex);
    lib90F7C81D_gf_LoadMOSAchievementStats(lp_playerIndex, gv_stR[lp_playerIndex]);
    if ((lib90F7C81D_gv_commandCard.lv_classicCard[lp_playerIndex] == true)) {
        UnitIssueOrder(lib90F7C81D_gv_commandCard.lv_selfCastUnit[lp_playerIndex], Order(AbilityCommand("CommandCardSwitch", 0)), c_orderQueueReplace);
    }
    lib90F7C81D_gf_RunEvent("InitializeAchievements");
}

trigger auto_gf_SpawnSoldiers_Trigger = null;

void gf_SpawnSoldiers () {
    if (auto_gf_SpawnSoldiers_Trigger == null) {
        auto_gf_SpawnSoldiers_Trigger = TriggerCreate("auto_gf_SpawnSoldiers_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnSoldiers_Trigger, false, false);
}

bool auto_gf_SpawnSoldiers_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoB7CBC370_g;
    int autoB7CBC370_var;

    // Implementation
    lib90F7C81D_gf_RunEvent("MSThreadStart");
    autoB7CBC370_g = lib90F7C81D_gv_players;
    autoB7CBC370_var = -1;
    while (true) {
        autoB7CBC370_var = PlayerGroupNextPlayer(autoB7CBC370_g, autoB7CBC370_var);
        if (autoB7CBC370_var < 0) { break; }
        libNtve_gf_CinematicMode(false, PlayerGroupSingle(autoB7CBC370_var), 0.0);
        lib90F7C81D_gf_DisplayUI(true, autoB7CBC370_var);
        libNtve_gf_ShowHideUnit(lib90F7C81D_gv_playerHeroes[autoB7CBC370_var], true);
        if ((GameIsOnline() == true)) {
            if ((lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (8) || lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (6) || lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (10))) {
                UnitIssueOrder(lib90F7C81D_gv_playerHeroes[autoB7CBC370_var], OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(46))), c_orderQueueReplace);
            }
            else {
                if ((gv_msv == false)) {
                    UnitIssueOrder(lib90F7C81D_gv_playerHeroes[autoB7CBC370_var], OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(44))), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(lib90F7C81D_gv_playerHeroes[autoB7CBC370_var], OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(46))), c_orderQueueReplace);
                }
            }
        }

        DialogControlSetAnimationState(lib90F7C81D_gv_commandCard.lv_selfCastFrame[autoB7CBC370_var], PlayerGroupSingle(autoB7CBC370_var), "State", "On");
        if ((lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (10) == false) && lib90F7C81D_gf_DevHandles(PlayerHandle(autoB7CBC370_var))) {
            DialogControlSetAnimationState(gv_debug.lv_debugPanel, PlayerGroupSingle(autoB7CBC370_var), "DebugPanel", "Display");
            if ((lib90F7C81D_gf_GetGameMode(1) == true)) {
                DialogControlSetAnimationState(gv_debug.lv_campaignMissions, PlayerGroupSingle(autoB7CBC370_var), "CampaignPanel", "Display");
            }
        }
        lib90F7C81D_gv_mOSTexture.lv_rankInsignia[autoB7CBC370_var] = UserDataGetGameLink("RankXP", UserDataInstance("RankXP", gf_PlayersCurrentRankLevel(lib90F7C81D_gv_bankData.lv_xP[autoB7CBC370_var])), "Rank Decal", 1);
        UserDataSetGameLink("Decals", "Rank Insignia", "Decals", 1, lib90F7C81D_gv_mOSTexture.lv_rankInsignia[autoB7CBC370_var]);
        lib90F7C81D_gv_bankData.lv_decalsUnlocked[2][autoB7CBC370_var] = true;
        if ((lib90F7C81D_gv_bankData.lv_decalSelected[autoB7CBC370_var] > 1)) {
            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_decalLabel, IntToText((lib90F7C81D_gv_bankData.lv_decalSelected[autoB7CBC370_var] - 1)), PlayerGroupSingle(autoB7CBC370_var));
        }
        else {
            lib90F7C81D_gf_UpdateMOSTextureFromIndex(UserDataInstance("Decals", 1), lib90F7C81D_ge_TextureType_Decal, autoB7CBC370_var);
        }
        if ((lib90F7C81D_gv_bankData.lv_camoSelected[autoB7CBC370_var] > 1)) {
            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_camoLabel, IntToText((lib90F7C81D_gv_bankData.lv_camoSelected[autoB7CBC370_var] - 1)), PlayerGroupSingle(autoB7CBC370_var));
        }
        else {
            lib90F7C81D_gf_UpdateMOSTextureFromIndex(UserDataInstance("Camos", 1), lib90F7C81D_ge_TextureType_Camo, autoB7CBC370_var);
        }
    }
    lib90F7C81D_gf_SetUIState();
    Wait(2.0, c_timeGame);
    DialogControlSendAnimationEvent(lib90F7C81D_gv_sDFrame, PlayerGroupAll(), "Show");
    Wait(0.0625, c_timeGame);
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/StatusContainer/StatusButton");
    libNtve_gf_SetDialogItemToggled(DialogControlLastCreated(), true, PlayerGroupAll());
    if (lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (10)) {
        DialogControlSetAnimationState(gv_debug.lv_debugPanel, PlayerGroupAll(), "DebugPanel", "Sandbox");
    }
    return true;
}

void gf_HeroSelector (point lp_point) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    playergroup auto631CB468_g;

    // Variable Initialization
    lv_index = 1;

    // Implementation
    auto631CB468_g = lib90F7C81D_gv_players;
    lv_index = -1;
    while (true) {
        lv_index = PlayerGroupNextPlayer(auto631CB468_g, lv_index);
        if (lv_index < 0) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HeroSelector", 0, lv_index, lp_point);
        lib90F7C81D_gv_heroSelectors[lv_index] = UnitLastCreated();
        UnitGroupAdd(lib90F7C81D_gv_heroSelectorGroup, lib90F7C81D_gv_heroSelectors[lv_index]);
    }
}

trigger auto_gf_MOSLobbyPreference_Trigger = null;

void gf_MOSLobbyPreference () {
    if (auto_gf_MOSLobbyPreference_Trigger == null) {
        auto_gf_MOSLobbyPreference_Trigger = TriggerCreate("auto_gf_MOSLobbyPreference_TriggerFunc");
    }

    TriggerExecute(auto_gf_MOSLobbyPreference_Trigger, false, false);
}

bool auto_gf_MOSLobbyPreference_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    playergroup auto39245FC8_g;
    int auto39245FC8_var;
    int auto75EB228E_ae;
    const int auto75EB228E_ai = 1;

    // Variable Initialization

    // Implementation
    auto39245FC8_g = lib90F7C81D_gv_players;
    auto39245FC8_var = -1;
    while (true) {
        auto39245FC8_var = PlayerGroupNextPlayer(auto39245FC8_g, auto39245FC8_var);
        if (auto39245FC8_var < 0) { break; }
        if ((GameAttributePlayerValue("2", auto39245FC8_var) != "0001")) {
            auto75EB228E_ae = UserDataInstanceCount("MOSSetup");
            lv_index = 1;
            for ( ; ( (auto75EB228E_ai >= 0 && lv_index <= auto75EB228E_ae) || (auto75EB228E_ai < 0 && lv_index >= auto75EB228E_ae) ) ; lv_index += auto75EB228E_ai ) {
                if ((GameAttributePlayerValue("2", auto39245FC8_var) == UserDataGetString("MOSSetup", UserDataInstance("MOSSetup", lv_index), "Lobby ID", 1)) && (gf_PlayersMOSUnlocked(auto39245FC8_var, (lv_index - 1)) == true)) {
                    gv_menu.lv_lobbySelection[auto39245FC8_var] = true;
                    gv_menu.lv_mOSSelected[auto39245FC8_var] = (lv_index - 1);
                    lib90F7C81D_gv_iIIIIIlllllll[1][auto39245FC8_var] = (lv_index - 1);
                    DialogControlSetAnimationState(gv_menu.lv_charScreen, PlayerGroupSingle(auto39245FC8_var), "Index", IntToString(lib90F7C81D_gv_iIIIIIlllllll[1][auto39245FC8_var]));
                    break;
                }
            }
        }

    }
    return true;
}

void gf_SetupMOSUI () {
    // Variable Declarations
    int lv_index;
    int lv_pB;
    int lv_rankIcon;
    int lv_xPLabel;
    fixed lv_currentXP;
    fixed lv_maxXP;
    int lv_currentRankLevel;
    string lv_currentRankImage;
    text lv_currentRank;
    int lv_upgradeLabel;

    // Automatic Variable Declarations
    playergroup autoCB61C04B_g;
    int autoCB61C04B_var;
    int auto165CA24F_ae;
    const int auto165CA24F_ai = 1;

    // Variable Initialization
    lv_pB = c_invalidDialogControlId;
    lv_rankIcon = c_invalidDialogControlId;
    lv_xPLabel = c_invalidDialogControlId;
    lv_upgradeLabel = c_invalidDialogControlId;

    // Implementation
    autoCB61C04B_g = lib90F7C81D_gv_players;
    autoCB61C04B_var = -1;
    while (true) {
        autoCB61C04B_var = PlayerGroupNextPlayer(autoCB61C04B_g, autoCB61C04B_var);
        if (autoCB61C04B_var < 0) { break; }
        lv_currentRankLevel = gf_PlayersCurrentRankLevel(lib90F7C81D_gv_bankData.lv_xP[autoCB61C04B_var]);
        lv_currentRankImage = gf_PlayersCurrentRankImage(autoCB61C04B_var);
        lv_currentRank = gf_PlayersCurrentRank(autoCB61C04B_var);
        if ((lib90F7C81D_gv_commandCard.lv_classicCard[autoCB61C04B_var] == true)) {
            libNtve_gf_SetDialogItemChecked(gv_classicCardOption, true, PlayerGroupSingle(autoCB61C04B_var));
        }
        lib90F7C81D_gf_SetupRankAchievements(gf_PlayersCurrentRankLevel(lib90F7C81D_gv_bankData.lv_xP[autoCB61C04B_var]), autoCB61C04B_var);
        auto165CA24F_ae = gv_mosAmount[autoCB61C04B_var];
        lv_index = 1;
        for ( ; ( (auto165CA24F_ai >= 0 && lv_index <= auto165CA24F_ae) || (auto165CA24F_ai < 0 && lv_index >= auto165CA24F_ae) ) ; lv_index += auto165CA24F_ai ) {
            lib90F7C81D_gf_SetupMOSAchievementLevelBadges(lv_index, gf_MOSLevelCurrent(lib90F7C81D_gv_bankData.lv_mOSXP[lv_index][autoCB61C04B_var]), autoCB61C04B_var);
            if ((lib90F7C81D_gv_bankData.lv_mOSXP[lv_index][autoCB61C04B_var] >= 30000)) {
                lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Camo, UserDataInstance("Camos", (lv_index + 1)), "Rank Insignia", autoCB61C04B_var, false);
            }
            if ((lib90F7C81D_gv_bankData.lv_mOSXP[lv_index][autoCB61C04B_var] >= 50000)) {
                lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Decal, "Default", UserDataInstance("Decals", (lv_index + 2)), autoCB61C04B_var, false);
            }
            ActorSend(ActorFromDialogControl(gv_menu.lv_mOSModelRankInsig[lv_index][autoCB61C04B_var]), libNtve_gf_TextureSelectByID(UserDataGetGameLink("RankXP", UserDataInstance("RankXP", lv_currentRankLevel), "Rank Decal", 1)));
            DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/CharSelectionTabs/PanelsContainer/Panel0" + IntToString((lv_index - 1)) + "/RankIcon"));
            lv_rankIcon = DialogControlLastCreated();
            libNtve_gf_SetDialogItemImage(lv_rankIcon, lv_currentRankImage, PlayerGroupSingle(autoCB61C04B_var));
            libNtve_gf_SetDialogItemTooltip(lv_rankIcon, (StringExternal("Param/Value/8983719C") + lv_currentRank), PlayerGroupSingle(autoCB61C04B_var));
            lib90F7C81D_gf_RibbonReward(lv_index, gv_menu.lv_mOSPanel[lv_index], autoCB61C04B_var);
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/CharSelectionTabs/PanelsContainer/Panel0" + IntToString((lv_index - 1)) + "/MOSLevelImageController"));
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), gf_MOSLevelUnlocked(lv_index, autoCB61C04B_var), PlayerGroupSingle(autoCB61C04B_var));
            DialogControlHookupStandard(c_triggerControlTypeProgressBar, ("UIContainer/FullscreenUpperContainer/CharSelectionTabs/PanelsContainer/Panel0" + IntToString((lv_index - 1)) + "/MOSProgress"));
            lv_pB = DialogControlLastCreated();
            lv_currentXP = gf_MOSLevelProgressBarCurrentValue(lv_index, autoCB61C04B_var);
            lv_maxXP = gf_MOSLevelProgressBarMax(lv_index, autoCB61C04B_var);
            libNtve_gf_SetDialogItemMinimumValue(lv_pB, 0.0, PlayerGroupSingle(autoCB61C04B_var));
            libNtve_gf_SetDialogItemMaximumValue(lv_pB, lv_maxXP, PlayerGroupSingle(autoCB61C04B_var));
            libNtve_gf_SetDialogItemCurrentValue(lv_pB, lv_currentXP, PlayerGroupSingle(autoCB61C04B_var));
            if ((gf_MOSLevelCurrent(lib90F7C81D_gv_bankData.lv_mOSXP[lv_index][autoCB61C04B_var]) < 10)) {
                libNtve_gf_SetDialogItemTooltip(lv_pB, (StringExternal("Param/Value/978E01A9") + gf_MOSLevelName(lv_index, autoCB61C04B_var) + StringExternal("Param/Value/E49BD6B7") + FormatNumber(FixedToInt(lv_currentXP)) + StringExternal("Param/Value/14366F71") + FormatNumber(FixedToInt(lv_maxXP))), PlayerGroupSingle(autoCB61C04B_var));
                if ((lv_currentXP == lv_maxXP)) {
                    libNtve_gf_SetDialogItemTooltip(lv_pB, (StringExternal("Param/Value/583A0786") + gf_MOSLevelName(lv_index, autoCB61C04B_var) + StringExternal("Param/Value/384966DF")), PlayerGroupSingle(autoCB61C04B_var));
                }

            }
            else {
                libNtve_gf_SetDialogItemMaximumValue(lv_pB, 65000.0, PlayerGroupSingle(autoCB61C04B_var));
                libNtve_gf_SetDialogItemCurrentValue(lv_pB, IntToFixed(lib90F7C81D_gv_bankData.lv_mOSXP[lv_index][autoCB61C04B_var]), PlayerGroupSingle(autoCB61C04B_var));
                libNtve_gf_SetDialogItemTooltip(lv_pB, StringExternal("Param/Value/218F337F"), PlayerGroupSingle(autoCB61C04B_var));
                DialogControlHookupStandard(c_triggerControlTypeCountdownLabel, ("UIContainer/FullscreenUpperContainer/CharSelectionTabs/PanelsContainer/Panel0" + IntToString((lv_index - 1)) + "/MOSXPLabel"));
                lv_xPLabel = DialogControlLastCreated();
                DialogControlSetVisible(lv_xPLabel, PlayerGroupSingle(autoCB61C04B_var), false);
                libNtve_gf_SetDialogItemAcceptMouse(lv_xPLabel, false, PlayerGroupSingle(autoCB61C04B_var));
            }
            if ((lib90F7C81D_gv_bankData.lv_mOSXP[lv_index][autoCB61C04B_var] >= 30000) && (lib90F7C81D_gv_bankData.lv_mOSXP[lv_index][autoCB61C04B_var] < 50000)) {
                DialogControlSetAnimationState(gv_menu.lv_mOSPanel[lv_index], PlayerGroupSingle(autoCB61C04B_var), "Index", "Expert");
            }
            else if ((lib90F7C81D_gv_bankData.lv_mOSXP[lv_index][autoCB61C04B_var] >= 50000)) {
                DialogControlSetAnimationState(gv_menu.lv_mOSPanel[lv_index], PlayerGroupSingle(autoCB61C04B_var), "Index", "Master");
            }
            if ((lv_index > 2)) {
                if ((gf_PlayersMOSUnlocked(autoCB61C04B_var, (lv_index - 1)) == true)) {
                    DialogControlSetAnimationState(gv_menu.lv_mOSButtons[(lv_index - 1)], PlayerGroupSingle(autoCB61C04B_var), "MOSUnlocked", "True");
                    DialogControlSetAnimationState(gv_menu.lv_buttonChargeLabel[(lv_index - 1)], PlayerGroupSingle(autoCB61C04B_var), "MOS", "Unlocked");
                }
                else {
                    libNtve_gf_SetDialogItemTooltip(gv_menu.lv_mOSButtons[(lv_index - 1)], (StringExternal("Param/Value/8F07082F") + gf_MOSRankRequirement((lv_index - 1)) + StringExternal("Param/Value/0EDED36A") + IntToText(gf_MOSRankXPRequirement((lv_index - 1))) + StringExternal("Param/Value/AC1E17F3")), PlayerGroupSingle(autoCB61C04B_var));
                }
            }

            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/CharSelectionTabs/PanelsContainer/Panel0" + IntToString((lv_index - 1)) + "/UpgradesImage/UpgradesCurrent"));
            lv_upgradeLabel = DialogControlLastCreated();
            if ((gv_skillUpgradeBonus[lv_index][autoCB61C04B_var] == 1)) {
                libNtve_gf_SetDialogItemText(lv_upgradeLabel, StringExternal("Param/Value/36874AA2"), PlayerGroupSingle(autoCB61C04B_var));
            }
            else if ((gv_skillUpgradeBonus[lv_index][autoCB61C04B_var] == 2)) {
                libNtve_gf_SetDialogItemText(lv_upgradeLabel, StringExternal("Param/Value/B32DCA5E"), PlayerGroupSingle(autoCB61C04B_var));
            }
            else if ((gv_skillUpgradeBonus[lv_index][autoCB61C04B_var] >= 3)) {
                libNtve_gf_SetDialogItemText(lv_upgradeLabel, StringExternal("Param/Value/C7C18F72"), PlayerGroupSingle(autoCB61C04B_var));
            }
        }
    }
    lv_xPLabel = c_invalidDialogControlId;
    lv_rankIcon = c_invalidDialogControlId;
    lv_pB = c_invalidDialogControlId;
    lv_currentRank = null;
    lv_currentRankImage = null;
    lv_upgradeLabel = c_invalidDialogControlId;
    DialogControlDestroy(lv_rankIcon);
    DialogControlDestroy(lv_pB);
    DialogControlDestroy(lv_xPLabel);
    DialogControlDestroy(lv_upgradeLabel);
    if ((GameIsTestMap(false) == true)) {
        gf_DevelopmentMode();
        gf_EnableDeathmatch();
    }
}

void gf_UpdateMOSUI (int lp_index, int lp_player) {
    // Variable Declarations
    int lv_selection;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_selection = lp_index;

    // Implementation
    if ((gv_menu.lv_mOSCharges[lv_selection] != 0)) {
        gv_menu.lv_mOSCharges[lv_selection] -= 1;
        gv_menu.lv_mOSSelected[lp_player] = (lv_selection + 1);
        gv_sDFrameIndex[lp_player] = gv_menu.lv_mOSSelected[lp_player];
        DialogControlSetAnimationState(gv_menu.lv_buttonChargeLabel[lv_selection], PlayerGroupSingle(lp_player), "MOS", "Selected");
        libNtve_gf_SetDialogItemText(gv_menu.lv_buttonChargeLabel[lv_selection], IntToText(gv_menu.lv_mOSCharges[lv_selection]), PlayerGroupAll());
        UnitIssueOrder(lib90F7C81D_gv_heroSelectors[lp_player], Order(UserDataGetAbilCmd("MOSSetup", UserDataInstance("MOSSetup", (lv_selection + 1)), "Order", 1)), c_orderQueueReplace);
        lib90F7C81D_gf_EnableWeapon((lv_selection + 1));
        gf_UpdateSDFrameTooltip(lp_player);
        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_skinsPanel, PlayerGroupSingle(lp_player), "MOSIndex", (IntToString((lv_selection + 1))));
        lib90F7C81D_gv_achievementPanel.lv_modelIndex[lp_player] = (lv_selection + 1);
    }

}

void gf_HookSelfCast (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib90F7C81D_gv_commandCard.lv_selfCastUnit[lp_player] == null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SelfCastPanel" + IntToString(lp_player), 0, lp_player, PointFromId(2067552197));
        lib90F7C81D_gv_commandCard.lv_selfCastUnit[lp_player] = UnitLastCreated();
    }
    if ((lib90F7C81D_gv_inventory.lv_hotkey_unit[lp_player] == null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InventoryPanel", 0, lp_player, PointFromId(189817471));
        lib90F7C81D_gv_inventory.lv_hotkey_unit[lp_player] = UnitLastCreated();
    }
}

bool gf_LoopEnabled (int lp_loop) {
    // Variable Declarations
    bool lv_bool;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_bool = true;

    // Implementation
    if ((lib90F7C81D_gv_gameOver == true)) {
        gf_SpawnLoopManager(lp_loop, false);
        lv_bool = false;
    }

    return lv_bool;
}

void gf_SpawnLoopManager (int lp_loopType, bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_loopType == lib90F7C81D_ge_LoopType_Main)) {
        TriggerEnable(gt_SpawnLoopMain, lp_onOff);
        if ((lp_onOff == true)) {
            lib90F7C81D_gf_RunUndeadSpawnLoopEvent("Main");
        }
    }
    else if ((lp_loopType == lib90F7C81D_ge_LoopType_T1)) {
        TriggerEnable(gt_SpawnLoopT1, lp_onOff);
        if ((lp_onOff == true)) {
            lib90F7C81D_gf_RunUndeadSpawnLoopEvent("T1");
        }
    }
    else if ((lp_loopType == lib90F7C81D_ge_LoopType_BossRush)) {
        TriggerEnable(gt_SpawnLoopBossRush, lp_onOff);
        if ((lp_onOff == true)) {
            lib90F7C81D_gf_RunUndeadSpawnLoopEvent("BossRush");
        }
    }
    else if ((lp_loopType == lib90F7C81D_ge_LoopType_T3)) {
        TriggerEnable(gt_SpawnLoopT3, lp_onOff);
        if ((lp_onOff == true)) {
            lib90F7C81D_gf_RunUndeadSpawnLoopEvent("T3");
        }
    }
    else if ((lp_loopType == lib90F7C81D_ge_LoopType_Sanies)) {
        TriggerEnable(gt_SpawnLoopSanies, lp_onOff);
        if ((lp_onOff == true)) {
            lib90F7C81D_gf_RunUndeadSpawnLoopEvent("Sanies");
        }
    }
    else if ((lp_loopType == lib90F7C81D_ge_LoopType_TCPContainment)) {
        TriggerEnable(gt_SpawnLoopTCPContainment, lp_onOff);
        if ((lp_onOff == true)) {
            lib90F7C81D_gf_RunUndeadSpawnLoopEvent("TCPContainment");
        }
    }
    else if ((lp_loopType == lib90F7C81D_ge_LoopType_Campaign)) {
        TriggerEnable(gt_SpawnLoopCampaign, lp_onOff);
        if ((lp_onOff == true)) {
            lib90F7C81D_gf_RunUndeadSpawnLoopEvent("Campaign");
        }
    }
    else if ((lp_loopType == lib90F7C81D_ge_LoopType_PlagueSpawns)) {
        TriggerEnable(gt_PlagueSpawnLoop, lp_onOff);
        if ((lp_onOff == true)) {
            lib90F7C81D_gf_RunUndeadSpawnLoopEvent("PlagueSpawns");
        }
    }
    else if ((lp_loopType == lib90F7C81D_ge_LoopType_CampaignRA)) {
        TriggerEnable(gt_CampaignRASpawnLoop, lp_onOff);
        if ((lp_onOff == true)) {
            lib90F7C81D_gf_RunUndeadSpawnLoopEvent("CampaignRA");
        }
    }
}

trigger auto_gf_SpawnUnitGroupAsync_Trigger = null;
string auto_gf_SpawnUnitGroupAsync_lp_group;
bool auto_gf_SpawnUnitGroupAsync_lp_tCP;
fixed auto_gf_SpawnUnitGroupAsync_lp_delay;
fixed auto_gf_SpawnUnitGroupAsync_lp_wait;

void gf_SpawnUnitGroupAsync (string lp_group, bool lp_tCP, fixed lp_delay, fixed lp_wait) {
    auto_gf_SpawnUnitGroupAsync_lp_group = lp_group;
    auto_gf_SpawnUnitGroupAsync_lp_tCP = lp_tCP;
    auto_gf_SpawnUnitGroupAsync_lp_delay = lp_delay;
    auto_gf_SpawnUnitGroupAsync_lp_wait = lp_wait;

    if (auto_gf_SpawnUnitGroupAsync_Trigger == null) {
        auto_gf_SpawnUnitGroupAsync_Trigger = TriggerCreate("auto_gf_SpawnUnitGroupAsync_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnUnitGroupAsync_Trigger, false, false);
}

bool auto_gf_SpawnUnitGroupAsync_TriggerFunc (bool testConds, bool runActions) {
    string lp_group = auto_gf_SpawnUnitGroupAsync_lp_group;
    bool lp_tCP = auto_gf_SpawnUnitGroupAsync_lp_tCP;
    fixed lp_delay = auto_gf_SpawnUnitGroupAsync_lp_delay;
    fixed lp_wait = auto_gf_SpawnUnitGroupAsync_lp_wait;

    // Automatic Variable Declarations
    // Implementation
    Wait((lp_delay + lp_wait), c_timeGame);
    gf_SpawnUnitGroup(lp_group, lp_tCP);
    return true;
}

trigger auto_gf_SendAttackWaveAsync_Trigger = null;
bool auto_gf_SendAttackWaveAsync_lp_tCP;
string auto_gf_SendAttackWaveAsync_lp_group1UnitList;
int auto_gf_SendAttackWaveAsync_lp_group1Amount;
string auto_gf_SendAttackWaveAsync_lp_group2UnitList;
int auto_gf_SendAttackWaveAsync_lp_group2Amount;
string auto_gf_SendAttackWaveAsync_lp_group3UnitList;
int auto_gf_SendAttackWaveAsync_lp_group3Amount;
fixed auto_gf_SendAttackWaveAsync_lp_delay;
fixed auto_gf_SendAttackWaveAsync_lp_wait;

void gf_SendAttackWaveAsync (bool lp_tCP, string lp_group1UnitList, int lp_group1Amount, string lp_group2UnitList, int lp_group2Amount, string lp_group3UnitList, int lp_group3Amount, fixed lp_delay, fixed lp_wait) {
    auto_gf_SendAttackWaveAsync_lp_tCP = lp_tCP;
    auto_gf_SendAttackWaveAsync_lp_group1UnitList = lp_group1UnitList;
    auto_gf_SendAttackWaveAsync_lp_group1Amount = lp_group1Amount;
    auto_gf_SendAttackWaveAsync_lp_group2UnitList = lp_group2UnitList;
    auto_gf_SendAttackWaveAsync_lp_group2Amount = lp_group2Amount;
    auto_gf_SendAttackWaveAsync_lp_group3UnitList = lp_group3UnitList;
    auto_gf_SendAttackWaveAsync_lp_group3Amount = lp_group3Amount;
    auto_gf_SendAttackWaveAsync_lp_delay = lp_delay;
    auto_gf_SendAttackWaveAsync_lp_wait = lp_wait;

    if (auto_gf_SendAttackWaveAsync_Trigger == null) {
        auto_gf_SendAttackWaveAsync_Trigger = TriggerCreate("auto_gf_SendAttackWaveAsync_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendAttackWaveAsync_Trigger, false, false);
}

bool auto_gf_SendAttackWaveAsync_TriggerFunc (bool testConds, bool runActions) {
    bool lp_tCP = auto_gf_SendAttackWaveAsync_lp_tCP;
    string lp_group1UnitList = auto_gf_SendAttackWaveAsync_lp_group1UnitList;
    int lp_group1Amount = auto_gf_SendAttackWaveAsync_lp_group1Amount;
    string lp_group2UnitList = auto_gf_SendAttackWaveAsync_lp_group2UnitList;
    int lp_group2Amount = auto_gf_SendAttackWaveAsync_lp_group2Amount;
    string lp_group3UnitList = auto_gf_SendAttackWaveAsync_lp_group3UnitList;
    int lp_group3Amount = auto_gf_SendAttackWaveAsync_lp_group3Amount;
    fixed lp_delay = auto_gf_SendAttackWaveAsync_lp_delay;
    fixed lp_wait = auto_gf_SendAttackWaveAsync_lp_wait;

    // Automatic Variable Declarations
    // Implementation
    Wait((lp_delay + lp_wait), c_timeGame);
    gf_SendT2AttackWave(lp_tCP, lp_group1UnitList, lp_group1Amount, lp_group2UnitList, lp_group2Amount, lp_group3UnitList, lp_group3Amount);
    return true;
}

void gf_SpawnUnitGroup (string lp_group, bool lp_tCP) {
    // Variable Declarations
    int lv_randomRegion;
    region lv_region;
    string lv_instance;
    int lv_totalWeight;
    int lv_dataFieldMax;
    int lv_unitsMax;
    int lv_index;
    int lv_randWeight;
    int lv_weight;

    // Automatic Variable Declarations
    int autoB81C80FA_ae;
    const int autoB81C80FA_ai = 1;

    // Variable Initialization
    lv_instance = lp_group;
    lv_totalWeight = UserDataGetInt("UndeadUnits", lv_instance, "Weight Max", 1);
    lv_dataFieldMax = UserDataGetInt("UndeadUnits", lv_instance, "Index Max", 1);
    lv_unitsMax = lv_dataFieldMax;

    // Implementation
    Wait(0.1875, c_timeGame);
    if (((UserDataGetInt("UndeadUnits", lp_group, "Group Allowed", 1) == 0) || (gv_pauseSpawning == true) || (lib90F7C81D_gv_gameOver == true))) {
        return ;
    }
    else {
        if ((PlayerGetPropertyFixed(14, c_playerPropSuppliesUsed) >= gv_supplyCount)) {
            if ((!((lv_instance == "T1") || (lv_instance == "Flying T1") || (lv_instance == "Tier 1") || (lv_instance == "Tier 1 Air")))) {
                return ;
            }

        }

    }
    if (((lv_instance == "T3 Ground Basic") || (lv_instance == "T3 Ground Variation") || (lv_instance == "Ground Assault Basic") || (lv_instance == "Ground Assault Variation") || (lv_instance == "Special T3") || (lv_instance == "Basic") || (lv_instance == "Assault Basic") || (lv_instance == "Vermin") || (lv_instance == "Vermin Assault"))) {
        if ((lp_tCP == true)) {
            lv_randomRegion = RandomInt(1, 20);
        }
        else {
            lv_randomRegion = RandomInt(4, 20);
        }
        lv_region = gv_t3Ground[lv_randomRegion];
    }
    else if (((lv_instance == "Ground Basic") || (lv_instance == "Special T2") || (lv_instance == "T1") || (lv_instance == "Tier 1") || (lv_instance == "Cloaked") || (lv_instance == "Special") || (lv_instance == "Ranged") || (lv_instance == "Variety") || (lv_instance == "Assault Variety"))) {
        if ((lp_tCP == true)) {
            lv_randomRegion = RandomInt(1, 15);
        }
        else {
            lv_randomRegion = RandomInt(4, 15);
        }
        lv_region = gv_t2Ground[lv_randomRegion];
    }
    else if (((lv_instance == "Fliers") || (lv_instance == "Flying T1") || (lv_instance == "Basic Air") || (lv_instance == "Assault Basic Air") || (lv_instance == "Ranged Air") || (lv_instance == "Cloaked Air") || (lv_instance == "Tier 1 Air"))) {
        if ((lp_tCP == true)) {
            lv_randomRegion = RandomInt(1, 24);
        }
        else {
            lv_randomRegion = RandomInt(4, 24);
        }
        lv_region = gv_airSpawns[lv_randomRegion];
    }
    autoB81C80FA_ae = lv_unitsMax;
    lv_index = 1;
    for ( ; ( (autoB81C80FA_ai >= 0 && lv_index <= autoB81C80FA_ae) || (autoB81C80FA_ai < 0 && lv_index >= autoB81C80FA_ae) ) ; lv_index += autoB81C80FA_ai ) {
        lv_randWeight = RandomInt(1, lv_totalWeight);
        lv_weight = (lv_randWeight - UserDataGetInt("UndeadUnits", lv_instance, "Weight", lv_index));
        if ((lv_weight <= 0)) {
            break;
        }
        else {
            lv_totalWeight -= UserDataGetInt("UndeadUnits", lv_instance, "Weight", lv_index);
        }
    }
    if ((lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (7) == true)) {
        UnitCreate(CeilingI((IntToFixed(RandomInt(UserDataGetInt("UndeadUnits", lv_instance, "Min Spawn Amount", lv_index), UserDataGetInt("UndeadUnits", lv_instance, "Max Spawn Amount", lv_index))) / IntToFixed(2))), UserDataGetUnit("UndeadUnits", lv_instance, "Unit Name", lv_index), c_unitCreateIgnoreBirth, 14, RegionGetCenter(lv_region), 270.0);
    }
    else {
        UnitCreate(RandomInt(UserDataGetInt("UndeadUnits", lv_instance, "Min Spawn Amount", lv_index), UserDataGetInt("UndeadUnits", lv_instance, "Max Spawn Amount", lv_index)), UserDataGetUnit("UndeadUnits", lv_instance, "Unit Name", lv_index), c_unitCreateIgnoreBirth, 14, RegionGetCenter(lv_region), 270.0);
    }
    UnitGroupAddUnitGroup(lib90F7C81D_gv_undeadGroup, UnitLastCreatedGroup());
    if ((UnitGroupCount(lib90F7C81D_gv_heroesGroup, c_unitCountAlive) >= 1)) {
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(lib90F7C81D_gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    }
    lv_region = null;
    lv_instance = null;
}

void gf_SpawnUnitGroupAtLocation (string lp_group, point lp_location) {
    // Variable Declarations
    string lv_instance;
    int lv_totalWeight;
    int lv_dataFieldMax;
    int lv_unitsMax;
    int lv_index;
    bool lv_unitSpawned;
    int lv_randWeight;
    int lv_weight;

    // Automatic Variable Declarations
    int autoD4589AC4_ae;
    const int autoD4589AC4_ai = 1;

    // Variable Initialization
    lv_instance = lp_group;
    lv_totalWeight = UserDataGetInt("UndeadUnits", lv_instance, "Weight Max", 1);
    lv_dataFieldMax = UserDataGetInt("UndeadUnits", lv_instance, "Index Max", 1);
    lv_unitsMax = lv_dataFieldMax;

    // Implementation
    if (((PlayerGetPropertyFixed(14, c_playerPropSuppliesUsed) >= gv_supplyCount) || (UserDataGetInt("UndeadUnits", lp_group, "Group Allowed", 1) == 0) || (gv_pauseSpawning == true) || (lib90F7C81D_gv_gameOver == true))) {
        lv_instance = null;
        return ;
    }
    else {
        autoD4589AC4_ae = lv_unitsMax;
        lv_index = 1;
        for ( ; ( (autoD4589AC4_ai >= 0 && lv_index <= autoD4589AC4_ae) || (autoD4589AC4_ai < 0 && lv_index >= autoD4589AC4_ae) ) ; lv_index += autoD4589AC4_ai ) {
            lv_randWeight = RandomInt(1, lv_totalWeight);
            lv_weight = (lv_randWeight - UserDataGetInt("UndeadUnits", lv_instance, "Weight", lv_index));
            if ((lv_weight <= 0)) {
                break;
            }
            else {
                lv_totalWeight -= UserDataGetInt("UndeadUnits", lv_instance, "Weight", lv_index);
            }
        }
        if (((lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (7) == true) || (lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (8) == true))) {
            UnitCreate(CeilingI((IntToFixed(RandomInt(UserDataGetInt("UndeadUnits", lv_instance, "Min Spawn Amount", lv_index), UserDataGetInt("UndeadUnits", lv_instance, "Max Spawn Amount", lv_index))) / IntToFixed(2))), UserDataGetUnit("UndeadUnits", lv_instance, "Unit Name", lv_index), c_unitCreateIgnoreBirth, 14, lp_location, 270.0);
        }
        else {
            UnitCreate(RandomInt(UserDataGetInt("UndeadUnits", lv_instance, "Min Spawn Amount", lv_index), UserDataGetInt("UndeadUnits", lv_instance, "Max Spawn Amount", lv_index)), UserDataGetUnit("UndeadUnits", lv_instance, "Unit Name", lv_index), c_unitCreateIgnoreBirth, 14, lp_location, 270.0);
        }
        UnitGroupAddUnitGroup(lib90F7C81D_gv_undeadGroup, UnitLastCreatedGroup());
        if ((UnitGroupCount(lib90F7C81D_gv_heroesGroup, c_unitCountAlive) >= 1)) {
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(lib90F7C81D_gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
        }
        lv_instance = null;
    }
}

void gf_SpawnPMCUnitGroup (int lp_groupSize, bool lp_tCP) {
    // Variable Declarations
    int lv_randomRegion;
    region lv_region;
    int lv_index;
    bool[7] lv_pMCArray;
    int lv_randomPMCUnit;

    // Automatic Variable Declarations
    int auto154CC78F_ae;
    const int auto154CC78F_ai = 1;

    // Variable Initialization

    // Deprecated
    lib90F7C81D_gf_ResetPMCPool();
}

void gf_SpawnPMCUnitGroupinRegion (int lp_groupSize, region lp_location) {
    // Variable Declarations
    int lv_index;
    bool[7] lv_pMCArray;
    int lv_randomPMCUnit;

    // Automatic Variable Declarations
    int auto53EC32D6_ae;
    const int auto53EC32D6_ai = 1;

    // Variable Initialization

    // Deprecated
    lib90F7C81D_gf_ResetPMCPool();
}

void gf_SpawnUnitsAtLocation (string lp_unit, point lp_point, int lp_amount) {
    // Variable Declarations
    int lv_randomRegion;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait(0.1875, c_timeGame);
    if ((gv_pauseSpawning == true)) {
        return ;
    }

    UnitCreate(lp_amount, lp_unit, c_unitCreateIgnoreBirth, 14, lp_point, 270.0);
    UnitGroupAddUnitGroup(lib90F7C81D_gv_undeadGroup, UnitLastCreatedGroup());
    if ((UnitGroupCount(lib90F7C81D_gv_heroesGroup, c_unitCountAlive) >= 1)) {
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(lib90F7C81D_gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    }
}

void gf_SendAirAttackWave (string lp_group1UnitList, int lp_group1Amount, string lp_group2UnitList, int lp_group2Amount, string lp_group3UnitList, int lp_group3Amount) {
    // Variable Declarations
    int lv_randomRegion;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait(0.1875, c_timeGame);
    if ((gv_pauseSpawning == true)) {
        return ;
    }
    else {
        lv_randomRegion = RandomInt(1, 24);
        if ((PlayerGetPropertyFixed(14, c_playerPropSuppliesUsed) >= gv_supplyCount)) {
            if ((UnitTypeTestAttribute(lp_group1UnitList, c_unitAttributeMassive) == false) && (UnitTypeTestAttribute(lp_group2UnitList, c_unitAttributeMassive) == false) && (UnitTypeTestAttribute(lp_group3UnitList, c_unitAttributeMassive) == false)) {
                return ;
            }

        }

    }
    UnitCreate(lp_group1Amount, lp_group1UnitList, c_unitCreateIgnoreBirth, 14, RegionGetCenter(gv_airSpawns[lv_randomRegion]), 270.0);
    UnitGroupAddUnitGroup(lib90F7C81D_gv_undeadGroup, UnitLastCreatedGroup());
    if ((lp_group2Amount > 0)) {
        UnitCreate(lp_group2Amount, lp_group2UnitList, c_unitCreateIgnoreBirth, 14, RegionGetCenter(gv_airSpawns[lv_randomRegion]), 270.0);
        UnitGroupAddUnitGroup(lib90F7C81D_gv_undeadGroup, UnitLastCreatedGroup());
    }
    if ((lp_group3Amount > 0)) {
        UnitCreate(lp_group3Amount, lp_group3UnitList, c_unitCreateIgnoreBirth, 14, RegionGetCenter(gv_airSpawns[lv_randomRegion]), 270.0);
        UnitGroupAddUnitGroup(lib90F7C81D_gv_undeadGroup, UnitLastCreatedGroup());
    }
    if ((UnitGroupCount(lib90F7C81D_gv_heroesGroup, c_unitCountAlive) >= 1)) {
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(lib90F7C81D_gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    }
}

void gf_SendT2AttackWave (bool lp_tCP, string lp_group1UnitList, int lp_group1Amount, string lp_group2UnitList, int lp_group2Amount, string lp_group3UnitList, int lp_group3Amount) {
    // Variable Declarations
    int lv_randomRegion;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait(0.1875, c_timeGame);
    if ((gv_pauseSpawning == true)) {
        return ;
    }
    else {
        if ((PlayerGetPropertyFixed(14, c_playerPropSuppliesUsed) >= gv_supplyCount)) {
            if ((UnitTypeTestAttribute(lp_group1UnitList, c_unitAttributeMassive) == false) && (UnitTypeTestAttribute(lp_group2UnitList, c_unitAttributeMassive) == false) && (UnitTypeTestAttribute(lp_group3UnitList, c_unitAttributeMassive) == false)) {
                return ;
            }

        }

    }
    if ((lp_tCP == true)) {
        lv_randomRegion = RandomInt(1, 15);
    }
    else {
        lv_randomRegion = RandomInt(4, 15);
    }
    UnitCreate(lp_group1Amount, lp_group1UnitList, c_unitCreateIgnoreBirth, 14, RegionGetCenter(gv_t2Ground[lv_randomRegion]), 270.0);
    UnitGroupAddUnitGroup(lib90F7C81D_gv_undeadGroup, UnitLastCreatedGroup());
    if ((lp_group2Amount > 0)) {
        UnitCreate(lp_group2Amount, lp_group2UnitList, c_unitCreateIgnoreBirth, 14, RegionGetCenter(gv_t2Ground[lv_randomRegion]), 270.0);
        UnitGroupAddUnitGroup(lib90F7C81D_gv_undeadGroup, UnitLastCreatedGroup());
    }
    if ((lp_group3Amount > 0)) {
        UnitCreate(lp_group3Amount, lp_group3UnitList, c_unitCreateIgnoreBirth, 14, RegionGetCenter(gv_t2Ground[lv_randomRegion]), 270.0);
        UnitGroupAddUnitGroup(lib90F7C81D_gv_undeadGroup, UnitLastCreatedGroup());
    }
    if ((UnitGroupCount(lib90F7C81D_gv_heroesGroup, c_unitCountAlive) >= 1)) {
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(lib90F7C81D_gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    }
}

void gf_SendT3AttackWave (bool lp_tCP, string lp_group1UnitList, int lp_group1Amount, string lp_group2UnitList, int lp_group2Amount, string lp_group3UnitList, int lp_group3Amount) {
    // Variable Declarations
    int lv_randomRegion;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait(0.1875, c_timeGame);
    if (((gv_pauseSpawning == true) || (PlayerGetPropertyFixed(14, c_playerPropSuppliesUsed) >= gv_supplyCount))) {
        return ;
    }

    if ((lp_tCP == true)) {
        lv_randomRegion = RandomInt(1, 20);
    }
    else {
        lv_randomRegion = RandomInt(4, 20);
    }
    UnitCreate(lp_group1Amount, lp_group1UnitList, c_unitCreateIgnoreBirth, 14, RegionGetCenter(gv_t3Ground[lv_randomRegion]), 270.0);
    UnitGroupAddUnitGroup(lib90F7C81D_gv_undeadGroup, UnitLastCreatedGroup());
    if ((lp_group2Amount > 0)) {
        UnitCreate(lp_group2Amount, lp_group2UnitList, c_unitCreateIgnoreBirth, 14, RegionGetCenter(gv_t3Ground[lv_randomRegion]), 270.0);
        UnitGroupAddUnitGroup(lib90F7C81D_gv_undeadGroup, UnitLastCreatedGroup());
    }
    if ((lp_group3Amount > 0)) {
        UnitCreate(lp_group3Amount, lp_group3UnitList, c_unitCreateIgnoreBirth, 14, RegionGetCenter(gv_t3Ground[lv_randomRegion]), 270.0);
        UnitGroupAddUnitGroup(lib90F7C81D_gv_undeadGroup, UnitLastCreatedGroup());
    }
    if ((UnitGroupCount(lib90F7C81D_gv_heroesGroup, c_unitCountAlive) >= 1)) {
        UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(lib90F7C81D_gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    }
}

void gf_SpawnZombiesAtSanies () {
    // Variable Declarations
    int lv_zombieType;
    unitgroup lv_saniesGroup;
    unit lv_randomSanie;
    unit lv_closestSanie;
    point lv_randomLoc;
    point lv_closestLoc;

    // Automatic Variable Declarations
    int auto4829CE39_val;
    int auto3054CDC8_val;

    // Variable Initialization
    lv_zombieType = RandomInt(1, 6);

    // Implementation
    lv_saniesGroup = gv_missionSurvivalVariant1.lv_saniesGroup;
    if ((UnitGetType(gv_missionSurvivalVariant1.lv_saniesCurrentTarget) == "Sanies")) {
        UnitGroupRemove(lv_saniesGroup, gv_missionSurvivalVariant1.lv_saniesCurrentTarget);
    }
    lv_randomSanie = UnitGroupRandomUnit(lv_saniesGroup, c_unitCountAlive);
    if ((UnitGetType(lv_randomSanie) != "Sanies")) {
        lv_randomLoc = RegionGetCenter(gv_t3Ground[RandomInt(1, 20)]);
        lv_closestLoc = RegionGetCenter(gv_t3Ground[RandomInt(1, 20)]);
    }
    else {
        lv_randomLoc = UnitGetPosition(lv_randomSanie);
        UnitGroupRemove(lv_saniesGroup, lv_randomSanie);
        lv_closestSanie = UnitGroupClosestToPoint(lv_saniesGroup, UnitGetPosition(gv_missionSurvivalVariant1.lv_saniesCurrentTarget));
        if ((UnitGetType(lv_closestSanie) != "Sanies")) {
            lv_closestLoc = RegionGetCenter(gv_t3Ground[RandomInt(1, 20)]);
        }
        else {
            lv_closestLoc = UnitGetPosition(lv_closestSanie);
        }
    }
    if ((RandomInt(0, 3) > 0)) {
        TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/0A244861"), gv_debug.lv_spawnMechanics);
        auto3054CDC8_val = lv_zombieType;
        if (auto3054CDC8_val == 1) {
            gf_SpawnUnitGroupAtLocation("T3 Ground Basic", lv_randomLoc);
        }
        else if (auto3054CDC8_val == 2) {
            gf_SpawnUnitGroupAtLocation("T3 Ground Variation", lv_randomLoc);
        }
        else if (auto3054CDC8_val == 3) {
            gf_SpawnUnitGroupAtLocation("Special T3", lv_randomLoc);
        }
        else if (auto3054CDC8_val == 4) {
            gf_SpawnUnitGroupAtLocation("Special T2", lv_randomLoc);
        }
        else if (auto3054CDC8_val == 5) {
            gf_SpawnUnitGroupAtLocation("Ground Assault Basic", lv_randomLoc);
        }
        else if (auto3054CDC8_val == 6) {
            gf_SpawnUnitGroupAtLocation("Ground Assault Variation", lv_randomLoc);
        }
        else {
            gf_SpawnUnitGroupAtLocation("T3 Ground Basic", lv_randomLoc);
        }
    }
    else {
        TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/0F5BED69"), gv_debug.lv_spawnMechanics);
        auto4829CE39_val = lv_zombieType;
        if (auto4829CE39_val == 1) {
            gf_SpawnUnitGroupAtLocation("T3 Ground Basic", lv_closestLoc);
        }
        else if (auto4829CE39_val == 2) {
            gf_SpawnUnitGroupAtLocation("T3 Ground Variation", lv_closestLoc);
        }
        else if (auto4829CE39_val == 3) {
            gf_SpawnUnitGroupAtLocation("Special T3", lv_closestLoc);
        }
        else if (auto4829CE39_val == 4) {
            gf_SpawnUnitGroupAtLocation("T3 Ground Basic", lv_closestLoc);
        }
        else if (auto4829CE39_val == 5) {
            gf_SpawnUnitGroupAtLocation("Ground Assault Basic", lv_closestLoc);
        }
        else if (auto4829CE39_val == 6) {
            gf_SpawnUnitGroupAtLocation("Ground Assault Variation", lv_closestLoc);
        }
        else {
            gf_SpawnUnitGroupAtLocation("T3 Ground Basic", lv_closestLoc);
        }
    }
    lv_saniesGroup = null;
    lv_randomSanie = null;
    lv_closestSanie = null;
    lv_randomLoc = null;
    lv_closestLoc = null;
}

trigger auto_gf_SendTimedBossSpawn_Trigger = null;
fixed auto_gf_SendTimedBossSpawn_lp_wait;
string auto_gf_SendTimedBossSpawn_lp_undeadUnit;
trigger auto_gf_SendTimedBossSpawn_lp_trigger;

void gf_SendTimedBossSpawn (fixed lp_wait, string lp_undeadUnit, trigger lp_trigger) {
    auto_gf_SendTimedBossSpawn_lp_wait = lp_wait;
    auto_gf_SendTimedBossSpawn_lp_undeadUnit = lp_undeadUnit;
    auto_gf_SendTimedBossSpawn_lp_trigger = lp_trigger;

    if (auto_gf_SendTimedBossSpawn_Trigger == null) {
        auto_gf_SendTimedBossSpawn_Trigger = TriggerCreate("auto_gf_SendTimedBossSpawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendTimedBossSpawn_Trigger, false, false);
}

bool auto_gf_SendTimedBossSpawn_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_wait = auto_gf_SendTimedBossSpawn_lp_wait;
    string lp_undeadUnit = auto_gf_SendTimedBossSpawn_lp_undeadUnit;
    trigger lp_trigger = auto_gf_SendTimedBossSpawn_lp_trigger;

    // Automatic Variable Declarations
    // Implementation
    Wait(lp_wait, c_timeGame);
    gf_SendT2AttackWave(true, lp_undeadUnit, 1, null, 0, null, 0);
    if ((lp_trigger != null)) {
        TriggerAddEventUnitDied(lp_trigger, UnitRefFromUnit(UnitLastCreated()));
    }
    return true;
}

trigger auto_gf_SendRandomTimedBossSpawn_Trigger = null;
fixed auto_gf_SendRandomTimedBossSpawn_lp_wait;
trigger auto_gf_SendRandomTimedBossSpawn_lp_trigger;

void gf_SendRandomTimedBossSpawn (fixed lp_wait, trigger lp_trigger) {
    auto_gf_SendRandomTimedBossSpawn_lp_wait = lp_wait;
    auto_gf_SendRandomTimedBossSpawn_lp_trigger = lp_trigger;

    if (auto_gf_SendRandomTimedBossSpawn_Trigger == null) {
        auto_gf_SendRandomTimedBossSpawn_Trigger = TriggerCreate("auto_gf_SendRandomTimedBossSpawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_SendRandomTimedBossSpawn_Trigger, false, false);
}

bool auto_gf_SendRandomTimedBossSpawn_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_wait = auto_gf_SendRandomTimedBossSpawn_lp_wait;
    trigger lp_trigger = auto_gf_SendRandomTimedBossSpawn_lp_trigger;

    // Variable Declarations
    string lv_randomInstance;
    string lv_undeadT1;
    int lv_undeadT1Count;
    int lv_undeadT1IndexMax;
    int lv_undeadT1Index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait(lp_wait, c_timeGame);
    if ((RandomInt(0, 2) > 0)) {
        lv_randomInstance = "T1";
    }
    else {
        lv_randomInstance = "Flying T1";
    }
    lv_undeadT1IndexMax = UserDataGetInt("UndeadUnits", lv_randomInstance, "Index Max", 1);
    lv_undeadT1Index = RandomInt(1, lv_undeadT1IndexMax);
    lv_undeadT1 = UserDataGetUnit("UndeadUnits", lv_randomInstance, "Unit Name", lv_undeadT1Index);
    lv_undeadT1Count = UserDataGetInt("UndeadUnits", lv_randomInstance, "Max Spawn Amount", lv_undeadT1Index);
    gf_SendT2AttackWave(true, lv_undeadT1, lv_undeadT1Count, null, 0, null, 0);
    if ((lp_trigger != null)) {
        TriggerAddEventUnitDied(lp_trigger, UnitRefFromUnit(UnitLastCreated()));
    }
    lv_undeadT1 = null;
    lv_randomInstance = null;
    return true;
}

fixed gf_GetCurrentInfestationRate () {
    // Variable Declarations
    fixed lv_time;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((PlayerGetPropertyFixed(14, c_playerPropSuppliesUsed) < (0.2 * lib90F7C81D_gv_supplyMax))) {
        lv_time = 60.0;
    }
    else if ((PlayerGetPropertyFixed(14, c_playerPropSuppliesUsed) >= (0.2 * lib90F7C81D_gv_supplyMax)) && (PlayerGetPropertyFixed(14, c_playerPropSuppliesUsed) < (0.4 * lib90F7C81D_gv_supplyMax))) {
        lv_time = 75.0;
    }
    else if ((PlayerGetPropertyFixed(14, c_playerPropSuppliesUsed) >= (0.4 * lib90F7C81D_gv_supplyMax)) && (PlayerGetPropertyFixed(14, c_playerPropSuppliesUsed) < (0.6 * lib90F7C81D_gv_supplyMax))) {
        lv_time = 90.0;
    }
    else if ((PlayerGetPropertyFixed(14, c_playerPropSuppliesUsed) >= (0.6 * lib90F7C81D_gv_supplyMax)) && (PlayerGetPropertyFixed(14, c_playerPropSuppliesUsed) < (0.8 * lib90F7C81D_gv_supplyMax))) {
        lv_time = 120.0;
    }
    else if ((PlayerGetPropertyFixed(14, c_playerPropSuppliesUsed) >= (0.8 * lib90F7C81D_gv_supplyMax))) {
        lv_time = 150.0;
    }
    return lv_time;
}

trigger auto_gf_UndeadGroupFilter_Trigger = null;
int auto_gf_UndeadGroupFilter_lp_groupType;
bool auto_gf_UndeadGroupFilter_lp_groupAllowed;

void gf_UndeadGroupFilter (int lp_groupType, bool lp_groupAllowed) {
    auto_gf_UndeadGroupFilter_lp_groupType = lp_groupType;
    auto_gf_UndeadGroupFilter_lp_groupAllowed = lp_groupAllowed;

    if (auto_gf_UndeadGroupFilter_Trigger == null) {
        auto_gf_UndeadGroupFilter_Trigger = TriggerCreate("auto_gf_UndeadGroupFilter_TriggerFunc");
    }

    TriggerExecute(auto_gf_UndeadGroupFilter_Trigger, false, false);
}

bool auto_gf_UndeadGroupFilter_TriggerFunc (bool testConds, bool runActions) {
    int lp_groupType = auto_gf_UndeadGroupFilter_lp_groupType;
    bool lp_groupAllowed = auto_gf_UndeadGroupFilter_lp_groupAllowed;

    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_groupType == ge_UndeadUnitFilter_All)) {
        UserDataSetInt("UndeadUnits", "Fliers", "Group Allowed", 1, BoolToInt(lp_groupAllowed));
        UserDataSetInt("UndeadUnits", "Flying T1", "Group Allowed", 1, BoolToInt(lp_groupAllowed));
        UserDataSetInt("UndeadUnits", "Tier 1 Air", "Group Allowed", 1, BoolToInt(lp_groupAllowed));
        UserDataSetInt("UndeadUnits", "Special T2", "Group Allowed", 1, BoolToInt(lp_groupAllowed));
        UserDataSetInt("UndeadUnits", "T1", "Group Allowed", 1, BoolToInt(lp_groupAllowed));
        UserDataSetInt("UndeadUnits", "Tier 1", "Group Allowed", 1, BoolToInt(lp_groupAllowed));
        UserDataSetInt("UndeadUnits", "Cloaked", "Group Allowed", 1, BoolToInt(lp_groupAllowed));
    }
    else if ((lp_groupType == ge_UndeadUnitFilter_Fliers)) {
        UserDataSetInt("UndeadUnits", "Fliers", "Group Allowed", 1, BoolToInt(lp_groupAllowed));
    }
    else if ((lp_groupType == ge_UndeadUnitFilter_T1Fliers)) {
        UserDataSetInt("UndeadUnits", "Flying T1", "Group Allowed", 1, BoolToInt(lp_groupAllowed));
        UserDataSetInt("UndeadUnits", "Tier 1 Air", "Group Allowed", 1, BoolToInt(lp_groupAllowed));
    }
    else if ((lp_groupType == ge_UndeadUnitFilter_SpecialT2)) {
        UserDataSetInt("UndeadUnits", "Special T2", "Group Allowed", 1, BoolToInt(lp_groupAllowed));
    }
    else if ((lp_groupType == ge_UndeadUnitFilter_T1)) {
        UserDataSetInt("UndeadUnits", "T1", "Group Allowed", 1, BoolToInt(lp_groupAllowed));
        UserDataSetInt("UndeadUnits", "Tier 1", "Group Allowed", 1, BoolToInt(lp_groupAllowed));
    }
    else if ((lp_groupType == ge_UndeadUnitFilter_Cloaked)) {
        UserDataSetInt("UndeadUnits", "Cloaked", "Group Allowed", 1, BoolToInt(lp_groupAllowed));
    }
    else if ((lp_groupType == ge_UndeadUnitFilter_CloakedAir)) {
        UserDataSetInt("UndeadUnits", "Cloaked Air", "Group Allowed", 1, BoolToInt(lp_groupAllowed));
    }
    return true;
}

trigger auto_gf_StartInfestationLevel_Trigger = null;

void gf_StartInfestationLevel () {
    if (auto_gf_StartInfestationLevel_Trigger == null) {
        auto_gf_StartInfestationLevel_Trigger = TriggerCreate("auto_gf_StartInfestationLevel_TriggerFunc");
    }

    TriggerExecute(auto_gf_StartInfestationLevel_Trigger, false, false);
}

bool auto_gf_StartInfestationLevel_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lastInfestation;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    TriggerExecute(gt_UndeadAIThink, true, false);
    while ((lib90F7C81D_gv_gameOver == false)) {
        lv_lastInfestation = gv_mutateBuffCount;
        Wait(gv_infestationTickRate, c_timeGame);
        if ((gv_sandbox.lv_disableInfestationLevel == false)) {
            if ((PlayerGetPropertyFixed(14, c_playerPropSuppliesUsed) < (0.2 * lib90F7C81D_gv_supplyMax)) && (gv_mutateBuffCount > 0)) {
                gv_mutateBuffCount -= 5;
            }
            else if ((PlayerGetPropertyFixed(14, c_playerPropSuppliesUsed) >= (0.2 * lib90F7C81D_gv_supplyMax)) && (PlayerGetPropertyFixed(14, c_playerPropSuppliesUsed) < (0.4 * lib90F7C81D_gv_supplyMax)) && (gv_mutateBuffCount > 0)) {
                gv_mutateBuffCount -= 3;
            }
            else if ((PlayerGetPropertyFixed(14, c_playerPropSuppliesUsed) >= (0.4 * lib90F7C81D_gv_supplyMax)) && (PlayerGetPropertyFixed(14, c_playerPropSuppliesUsed) < (0.6 * lib90F7C81D_gv_supplyMax)) && (gv_mutateBuffCount > 0)) {
                gv_mutateBuffCount -= 1;
            }
            else if ((PlayerGetPropertyFixed(14, c_playerPropSuppliesUsed) >= (0.6 * lib90F7C81D_gv_supplyMax)) && (PlayerGetPropertyFixed(14, c_playerPropSuppliesUsed) < (0.8 * lib90F7C81D_gv_supplyMax)) && (gv_mutateBuffCount < 40)) {
                gv_mutateBuffCount += 1;
            }
            else if ((PlayerGetPropertyFixed(14, c_playerPropSuppliesUsed) >= (0.8 * lib90F7C81D_gv_supplyMax))) {
                gv_mutateBuffCount += 2;
                if ((gv_mutateBuffCount > 40)) {
                    gv_mutateBuffCount = 40;
                }
            }
            if ((gv_mutateBuffCount < 0)) {
                gv_mutateBuffCount = 0;
            }
            if ((gv_mutateBuffCount != lv_lastInfestation)) {
                libNtve_gf_SetUpgradeLevelForPlayer(14, "MutationUpgrade", gv_mutateBuffCount);
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_mutationLabel, IntToText(gv_mutateBuffCount), PlayerGroupAll());
            }
        }
    }
    return true;
}

void gf_PauseSpawning (bool lp_onOff) {
    // Automatic Variable Declarations
    // Implementation
    gv_pauseSpawning = lp_onOff;
    TriggerEnable(gt_ForceRemoveUndeadUnits, lp_onOff);
    if ((TriggerIsEnabled(gt_ForceRemoveUndeadUnits) == true)) {
        TriggerSendEvent("Force Remove Undead Units");
    }
}

void gf_ModifyUndeadSupplyLimit (fixed lp_value, int lp_operation) {
    // Automatic Variable Declarations
    int auto39404E6D_val;

    // Implementation
    auto39404E6D_val = lp_operation;
    if (auto39404E6D_val == c_playerPropOperSetTo) {
        gv_supplyCount = lp_value;
    }
    else if (auto39404E6D_val == c_playerPropOperAdd) {
        gv_supplyCount += lp_value;
    }
    else if (auto39404E6D_val == c_playerPropOperSubtract) {
        gv_supplyCount -= lp_value;
    }
    else {
        gv_supplyCount = lp_value;
    }
    lib90F7C81D_gv_supplyMax = gv_supplyCount;
    libNtve_gf_SetDialogItemMaximumValue(lib90F7C81D_gv_infestationLevel, lib90F7C81D_gv_supplyMax, PlayerGroupAll());
    if ((PlayerGetPropertyFixed(14, c_playerPropSuppliesUsed) > gv_supplyCount)) {
        PlayerModifyPropertyFixed(14, c_playerPropSuppliesUsed, c_playerPropOperSetTo, gv_supplyCount);
        libNtve_gf_SetDialogItemCurrentValue(lib90F7C81D_gv_infestationLevel, lib90F7C81D_gv_supplyMax, PlayerGroupAll());
    }

}

unitgroup gf_SpawnPMCCampaign (int lp_groupSize, region lp_location) {
    // Variable Declarations
    unitgroup lv_pMCGroup;
    int lv_index;
    unit lv_pMCUnit;

    // Automatic Variable Declarations
    int autoDD314928_ae;
    const int autoDD314928_ai = 1;

    // Variable Initialization
    lv_pMCGroup = UnitGroupEmpty();

    // Implementation
    Wait(0.1875, c_timeGame);
    if (((gv_pauseSpawning == true) || (lib90F7C81D_gv_gameOver == true))) {
        return null;
    }
    else {
        if ((PlayerGetPropertyFixed(15, c_playerPropSuppliesUsed) >= gv_supplyCount)) {
            return null;
        }

    }
    autoDD314928_ae = lp_groupSize;
    lv_index = 1;
    for ( ; ( (autoDD314928_ai >= 0 && lv_index <= autoDD314928_ae) || (autoDD314928_ai < 0 && lv_index >= autoDD314928_ae) ) ; lv_index += autoDD314928_ai ) {
        UnitCreate(1, lib90F7C81D_gf_RandomPMC(), 0, 15, RegionRandomPoint(lp_location), 270.0);
        UnitSetInfoText(UnitLastCreated(), StringExternal("Param/Value/17EF7C74"), StringToText(""), StringToText(""));
        UnitGroupAdd(lv_pMCGroup, UnitLastCreated());
    }
    UnitBehaviorAddPlayer(UnitGroupUnit(lv_pMCGroup, 1), "RASquadLeader", 15, 1);
    UnitSetInfoText(UnitGroupUnit(lv_pMCGroup, 1), StringExternal("Param/Value/AD0D7279"), StringExternal("Param/Value/89CFFBBE"), StringToText(""));
    lib90F7C81D_gf_ResetPMCPool();
    return lv_pMCGroup;
}

int gf_MainLoopRepeat () {
    // Variable Declarations
    fixed lv_exponentialMod;
    fixed lv_players;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_exponentialMod = 1.22;
    lv_players = IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players));

    // Implementation
    return FixedToInt(Floor(Pow(lv_exponentialMod, lv_players)));
}

int gf_CampaignLoopRepeat () {
    // Variable Declarations
    int lv_playerCount;
    int lv_spawnLoopCount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerCount = PlayerGroupCount(lib90F7C81D_gv_players);

    // Implementation
    if ((lv_playerCount <= 3)) {
        lv_spawnLoopCount = 6;
    }
    else if ((lv_playerCount >= 4) && (lv_playerCount <= 7)) {
        lv_spawnLoopCount = 6;
    }
    else if ((lv_playerCount >= 8) && (lv_playerCount <= 10)) {
        lv_spawnLoopCount = 6;
    }
    else if ((lv_playerCount >= 11)) {
        lv_spawnLoopCount = 7;
    }
    return lv_spawnLoopCount;
}

string gf_CampaignLoopType () {
    // Variable Declarations
    int lv_randomInt;

    // Automatic Variable Declarations
    int auto007C3933_val;

    // Variable Initialization

    // Implementation
    lv_randomInt = RandomInt(0, PlayerGroupCount(lib90F7C81D_gv_players));
    auto007C3933_val = lv_randomInt;
    if (auto007C3933_val == 1) {
        return "Basic";
    }
    else if (auto007C3933_val == 2) {
        return "Basic Air";
    }
    else if (auto007C3933_val == 3) {
        return "Vermin";
    }
    else if (auto007C3933_val == 4) {
        return "Special";
    }
    else if (auto007C3933_val == 5) {
        return "Variety";
    }
    else if (auto007C3933_val == 6) {
        return "Assault Basic";
    }
    else if (auto007C3933_val == 7) {
        return "Assault Basic Air";
    }
    else if (auto007C3933_val == 8) {
        return "Ranged";
    }
    else if (auto007C3933_val == 9) {
        if ((UserDataGetInt("UndeadUnits", "Cloaked", "Group Allowed", 1) == 0)) {
            return "Assault Variety";
        }
        else {
            if ((gv_campaignReaperSpawned == false)) {
                gv_campaignReaperSpawned = true;
                return "Cloaked";
            }
            else {
                return "Assault Variety";
            }
        }
    }
    else if (auto007C3933_val == 10) {
        return "Assault Variety";
    }
    else if (auto007C3933_val == 11) {
        return "Ranged Air";
    }
    else if (auto007C3933_val == 12) {
        return "Cloaked Air";
    }
    else {
        return "Assault Basic";
    }
}

void gf_SetupDebug () {
    // Automatic Variable Declarations
    // Implementation
    TriggerDebugEnableType(gv_debug.lv_gameEventsType, true);
    TriggerDebugEnableType(gv_debug.lv_spawnMechanicsType, true);
    TriggerDebugSetTypeFile(gv_debug.lv_gameEventsType, gv_debug.lv_gameEventsFile);
    TriggerDebugSetTypeFile(gv_debug.lv_spawnMechanicsType, gv_debug.lv_spawnMechanicsFile);
    if ((GameIsTestMap(false) == true)) {
        gv_debug.lv_spawnMechanics = true;
        gv_debug.lv_gameEvents = true;
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mode Controller
//--------------------------------------------------------------------------------------------------
bool gt_ModeController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_drone;
    unit lv_phantom;
    int lv_playlist;

    // Automatic Variable Declarations
    int autoD861F4FF_val;
    playergroup autoFB162E40_g;
    int autoFB162E40_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (!((UnitGroupCount(lib90F7C81D_gv_heroSelectorGroup, c_unitCountAll) == 0))) {
        Wait(1.0, c_timeGame);
    }
    gv_gameStart = true;
    lib90F7C81D_gf_RunEvent("ScaleDifficulty");
    TriggerEnable(gt_ReadyButton, false);
    TriggerEnable(gt_MOSButtons, false);
    TriggerEnable(gt_ChooseHero, false);
    TriggerEnable(gt_AutoSelectMOS, false);
    TriggerEnable(gt_DisplayXP, true);
    TriggerEnable(lib90F7C81D_gt_GraphUpdate, true);
    libNtve_gf_StopTimer(lib90F7C81D_gv_missiontimer);
    lib90F7C81D_gf_GamesPlayedUpdate();
    if ((gv_dEBUG_GAME == true) && (GameIsTestMap(false) == true)) {
        DialogControlSendAnimationEvent(lib90F7C81D_gv_sDFrame, PlayerGroupAll(), "Close");
    }
    else {
        Wait(2.0, c_timeGame);
        DialogControlSendAnimationEvent(lib90F7C81D_gv_sDFrame, PlayerGroupAll(), "Close");
        Wait(3.0, c_timeGame);
    }
    lib90F7C81D_gf_MoveChatBar(lib90F7C81D_ge_ChatBarAnchor_Default);
    DialogControlSendAnimationEvent(gv_menu.lv_charScreen, PlayerGroupAll(), "HideCharSelection");
    DialogControlSendAnimationEvent(lib90F7C81D_gv_backgroundMain, PlayerGroupAll(), "Hide");
    DialogControlSendAnimationEvent(lib90F7C81D_gv_sDFrame, PlayerGroupAll(), "Hide");
    TriggerEnable(gt_ClassicCard, false);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    lv_playlist = RandomInt(0, 4);
    autoD861F4FF_val = lv_playlist;
    if (autoD861F4FF_val == 0) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZSpace02MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else if (autoD861F4FF_val == 1) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova09_Main", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else if (autoD861F4FF_val == 2) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova09_Main_Intense", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else if (autoD861F4FF_val == 3) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "nDLC_Music_Nova08_Main_Intense", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "ZChar01MusicMain", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    autoFB162E40_g = lib90F7C81D_gv_players;
    autoFB162E40_var = -1;
    while (true) {
        autoFB162E40_var = PlayerGroupNextPlayer(autoFB162E40_g, autoFB162E40_var);
        if (autoFB162E40_var < 0) { break; }
        CameraRestore(autoFB162E40_var, 0.0, -1, 10.0);
        if ((lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (8) || lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (6) || lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (10) || lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (11))) {
            CameraPan(autoFB162E40_var, PointFromId(1665385457), 0.0, -1, 10.0, false);
        }
        else {
            if ((gv_msv == false)) {
                CameraRestore(autoFB162E40_var, 0.0, -1, 10.0);
            }
            else {
                CameraPan(autoFB162E40_var, PointFromId(1665385457), 0.0, -1, 10.0, false);
            }
        }
    }
    CinematicFade(true, 2.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    if ((lib90F7C81D_gf_GetGameMode(7) || lib90F7C81D_gf_GetGameMode(1))) {
        if ((gv_msv == false)) {
            gf_Phantom();
        }
        else {
            gf_SpawnCustomLocation();
        }
    }
    else {
        gf_SpawnCustomLocation();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModeController_Init () {
    gt_ModeController = TriggerCreate("gt_ModeController_Func");
    lib90F7C81D_gf_GameEvent(gt_ModeController, "ModeControl");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Conduct KLE
//--------------------------------------------------------------------------------------------------
bool gt_ConductKLE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_cop;
    point lv_originalposition;
    point lv_newposition;
    actor lv_briefingHighlight;

    // Automatic Variable Declarations
    playergroup auto3F746B22_g;
    int auto3F746B22_var;

    // Variable Initialization
    lv_cop = gv_prologue.lv_mission00Cop;
    lv_originalposition = UnitGetPosition(lv_cop);
    lv_newposition = PointFromId(1396883157);

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/34C58D06"), gv_debug.lv_gameEvents);
    TriggerEnable(TriggerGetCurrent(), false);
    lib90F7C81D_gf_MissionItemPingEnable(true);
    ObjectiveCreate(StringExternal("Param/Value/EE4C2077"), StringExternal("Param/Value/B12B99F4"), c_objectiveStateActive, true);
    lib90F7C81D_gv_mainObj = ObjectiveLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/B988948E"), StringToText(""), c_objectiveStateActive, true);
    lib90F7C81D_gv_secondObj = ObjectiveLastCreated();
    UnitSetPosition(lv_cop, lv_newposition, false);
    UnitBehaviorAdd(lv_cop, "PlotArmor", lv_cop, 1);
    lib90F7C81D_gf_StoreMinimapPings(lv_cop, StringExternal("Param/Value/AC7DDEB0"), Color(0.00, 100.00, 0.00), 0.75);
    libNtve_gf_AttachModelToUnit(lv_cop, "BriefingHighlight", "Ref_Center");
    gv_prologue.lv_mission00BriefingHighlight = libNtve_gf_ActorLastCreated();
    ActorSend(lv_briefingHighlight, "SetScale 0.250000");
    UnitIssueOrder(lv_cop, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1627154551)), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/550CDC8B"));
    Wait(5.0, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/48CD303D"));
    Wait(2.0, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Mayor", 0, 0, PointFromId(1508530532));
    UnitBehaviorAdd(UnitLastCreated(), "PlotArmor", UnitLastCreated(), 1);
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    gv_campaign.lv_mayorUnit = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PoliceChief", 0, 0, PointFromId(783031184));
    UnitBehaviorAdd(UnitLastCreated(), "PlotArmor", UnitLastCreated(), 1);
    gv_campaign.lv_chiefUnit = UnitLastCreated();
    Wait(3.0, c_timeGame);
    UnitIssueOrder(lv_cop, OrderTargetingPoint(AbilityCommand("move", 0), lv_newposition), c_orderQueueAddToEnd);
    UnitIssueOrder(lv_cop, OrderTargetingPoint(AbilityCommand("move", 0), lv_originalposition), c_orderQueueAddToEnd);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectLarge", RegionGetCenter(RegionFromId(46)));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.750000");
    gv_prologue.lv_mission00TempActor = libNtve_gf_ActorLastCreated();
    UnitCreate(1, "StandHereText", 0, 0, RegionGetCenter(RegionFromId(46)), 270.0);
    gv_prologue.lv_mission00TextDummy = UnitLastCreated();
    gf_TextActorAnim(gv_prologue.lv_mission00TextDummy, "StandingLocationTextBox/Image");
    TriggerAddEventUnitRegion(gt_EnterTown, UnitRefFromVariable("gv_prologue.lv_mission00Cop"), RegionFromId(47), true);
    auto3F746B22_g = lib90F7C81D_gv_players;
    auto3F746B22_var = -1;
    while (true) {
        auto3F746B22_var = PlayerGroupNextPlayer(auto3F746B22_g, auto3F746B22_var);
        if (auto3F746B22_var < 0) { break; }
        TriggerAddEventUnitRegion(gt_MeetWithMayor, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lib90F7C81D_gv_playerHeroes[auto3F746B22_var])), RegionFromId(46), true);
    }
    TriggerEnable(gt_EnterTown, true);
    TriggerEnable(gt_KLEEnd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConductKLE_Init () {
    gt_ConductKLE = TriggerCreate("gt_ConductKLE_Func");
    TriggerEnable(gt_ConductKLE, false);
    lib90F7C81D_gf_CampaignEvent(gt_ConductKLE, "Prologue.Mission00");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enter Town
//--------------------------------------------------------------------------------------------------
bool gt_EnterTown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/43801124"), gv_debug.lv_gameEvents);
    TriggerEnable(TriggerGetCurrent(), false);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/409F7729"));
    Wait(4.0, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(46)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_prologue.lv_mission00KLEPing = PingLastCreated();
    PingSetTooltip(gv_prologue.lv_mission00KLEPing, StringExternal("Param/Value/BCD3FA6A"));
    UnitBehaviorRemove(gv_prologue.lv_mission00Cop, "PlotArmor", 1);
    lib90F7C81D_gf_RemoveMinimapPingIndex(gv_prologue.lv_mission00Cop);
    ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateCompleted);
    libNtve_gf_KillModel(gv_prologue.lv_mission00BriefingHighlight);
    gv_prologue.lv_mission00BriefingHighlight = null;
    TimerStart(lib90F7C81D_gv_missiontimer, 30.0, false, c_timeGame);
    TriggerEnable(gt_MeetWithMayor, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EnterTown_Init () {
    gt_EnterTown = TriggerCreate("gt_EnterTown_Func");
    TriggerEnable(gt_EnterTown, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Meet With Mayor
//--------------------------------------------------------------------------------------------------
bool gt_MeetWithMayor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_StopTimer(lib90F7C81D_gv_missiontimer);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/43CC257B"), gv_debug.lv_gameEvents);
    UnitRemove(gv_prologue.lv_mission00TextDummy);
    PingDestroy(gv_prologue.lv_mission00KLEPing);
    gv_prologue.lv_mission00KLEPing = c_invalidPingId;
    libNtve_gf_KillModel(gv_prologue.lv_mission00TempActor);
    gv_prologue.lv_mission00TempActor = null;
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/26F93236"));
    Wait(5.0, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/FC3B9807"));
    Wait(5.0, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/6C72C0E8"));
    Wait(5.0, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/1C7AAE8D"));
    Wait(5.0, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/31A5101C"));
    Wait(5.0, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/CC9922C9"));
    TriggerExecute(gt_KLEEnd, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MeetWithMayor_Init () {
    gt_MeetWithMayor = TriggerCreate("gt_MeetWithMayor_Func");
    TriggerEnable(gt_MeetWithMayor, false);
    TriggerAddEventTimer(gt_MeetWithMayor, lib90F7C81D_gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KLE End
//--------------------------------------------------------------------------------------------------
bool gt_KLEEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_campaign.lv_missionCompleted += 1;
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
    Wait(2.0, c_timeGame);
    ObjectiveDestroy(lib90F7C81D_gv_mainObj);
    ObjectiveDestroy(lib90F7C81D_gv_secondObj);
    libNtve_gf_PauseUnit(gv_campaign.lv_mayorUnit, false);
    UnitIssueOrder(gv_campaign.lv_chiefUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(45))), c_orderQueueAddToEnd);
    UnitIssueOrder(gv_campaign.lv_mayorUnit, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(45))), c_orderQueueAddToEnd);
    Wait(2.0, c_timeGame);
    libNtve_gf_ShowHideUnit(gv_campaign.lv_chiefUnit, false);
    libNtve_gf_ShowHideUnit(gv_campaign.lv_mayorUnit, false);
    libNtve_gf_PauseUnit(gv_campaign.lv_mayorUnit, true);
    libNtve_gf_PauseUnit(gv_campaign.lv_chiefUnit, true);
    gv_prologue.lv_passRate[0] = true;
    TriggerDestroy(gt_EnterTown);
    TriggerDestroy(gt_MeetWithMayor);
    if ((lib90F7C81D_gf_DifficultyisGOE(3) == true)) {
        gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_Campaign, true);
    }
    Wait(5.0, c_timeGame);
    if ((gv_campaign.lv_singleMission == false)) {
        TriggerEnable(gt_SentrySetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Prologue.Mission01");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KLEEnd_Init () {
    gt_KLEEnd = TriggerCreate("gt_KLEEnd_Func");
    TriggerEnable(gt_KLEEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Item Use
//--------------------------------------------------------------------------------------------------
bool gt_SentryItemUse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_pindex;
    point lv_targetPoint;
    bool lv_sentryPlaced;
    int lv_i2;

    // Automatic Variable Declarations
    const int autoA9D24D2E_ae = 9;
    const int autoA9D24D2E_ai = 1;
    const int autoBA381B9C_ae = 5;
    const int autoBA381B9C_ai = 1;

    // Variable Initialization
    lv_pindex = UnitGetOwner(EventUnit());
    lv_targetPoint = EventUnitInventoryItemTargetPoint();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_prologue.lv_mission01SentryItemGroup, EventUnitInventoryItem()) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnitInventoryItem()) == "VulcanMK88SentryGunItem"))) {
            return false;
        }

        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/1D257181") + StringToText(libNtve_gf_ConvertPointToString(lv_targetPoint))), gv_debug.lv_gameEvents);
    lv_i = 0;
    for ( ; ( (autoA9D24D2E_ai >= 0 && lv_i <= autoA9D24D2E_ae) || (autoA9D24D2E_ai < 0 && lv_i >= autoA9D24D2E_ae) ) ; lv_i += autoA9D24D2E_ai ) {
        if ((RegionContainsPoint(gv_prologue.lv_mission01SentryRegions[lv_i], lv_targetPoint) == true) && (gv_prologue.lv_mission01SentryRegionUsed[lv_i] == false)) {
            TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/6B7915F2"), gv_debug.lv_gameEvents);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "VulcanMK88SentryGun", c_unitCreateIgnorePlacement, 0, RegionGetCenter(gv_prologue.lv_mission01SentryRegions[lv_i]));
            UnitRemove(EventUnitInventoryItem());
            PingDestroy(gv_prologue.lv_mission01SentryMinimapPing[lv_i]);
            libNtve_gf_KillModel(gv_prologue.lv_mission01SentryActor[lv_i]);
            UnitKill(gv_prologue.lv_mission01SentryPlacementUnit[lv_i]);
            lib90F7C81D_gf_MissionItemPingRemoveItem(EventUnitInventoryItem());
            gv_prologue.lv_mission01SentryRegionUsed[lv_i] = true;
            lv_sentryPlaced = true;
            gv_prologue.lv_mission01SentrysPlaced += 1;
            TextExpressionSetToken("Param/Expression/94205B0B", "A", IntToText(gv_prologue.lv_mission01SentrysPlaced));
            ObjectiveSetName(lib90F7C81D_gv_mainObj, TextExpressionAssemble("Param/Expression/94205B0B"));
            break;
        }

    }
    if ((lv_sentryPlaced == false)) {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/1DC7221D"));
        SoundPlayForPlayer(SoundLink("UI_GenericError", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
    }
    if ((gv_prologue.lv_mission01SentrysPlaced == 10)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_SentryTimerExpires, false);
        TriggerStop(gt_SentryTimerExpires);
        TimerPause(lib90F7C81D_gv_missiontimer, true);
        if ((TimerGetElapsed(lib90F7C81D_gv_missiontimer) <= 150.0)) {
            lib90F7C81D_gf_AwardAchievement(53);
        }
        libNtve_gf_StopTimer(lib90F7C81D_gv_missiontimer);
        TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), false);
        lv_i2 = 0;
        for ( ; ( (autoBA381B9C_ai >= 0 && lv_i2 <= autoBA381B9C_ae) || (autoBA381B9C_ai < 0 && lv_i2 >= autoBA381B9C_ae) ) ; lv_i2 += autoBA381B9C_ai ) {
            PingDestroy(gv_prologue.lv_mission01SentryRegionPing[lv_i2]);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentryItemUse_Init () {
    gt_SentryItemUse = TriggerCreate("gt_SentryItemUse_Func");
    TriggerEnable(gt_SentryItemUse, false);
    TriggerAddEventUnitInventoryChange(gt_SentryItemUse, null, c_unitInventoryChangeUses, UnitRefFromUnit(UnitGroupRandomUnit(gv_prologue.lv_mission01SentryItemGroup, c_unitCountAll)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_SentryTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_i2;

    // Automatic Variable Declarations
    unitgroup auto10E70974_g;
    int auto10E70974_u;
    unit auto10E70974_var;
    const int autoE4D8C796_ae = 9;
    const int autoE4D8C796_ai = 1;
    const int autoFD08785F_ae = 5;
    const int autoFD08785F_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/12539046"), gv_debug.lv_gameEvents);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SentryItemUse, false);
    TriggerEnable(gt_SentryPing, false);
    libNtve_gf_StopTimer(lib90F7C81D_gv_missiontimer);
    auto10E70974_g = gv_prologue.lv_mission01SentryItemGroup;
    auto10E70974_u = UnitGroupCount(auto10E70974_g, c_unitCountAll);
    for (;; auto10E70974_u -= 1) {
        auto10E70974_var = UnitGroupUnitFromEnd(auto10E70974_g, auto10E70974_u);
        if (auto10E70974_var == null) { break; }
        lib90F7C81D_gf_MissionItemPingRemoveItem(auto10E70974_var);
        UnitRemove(auto10E70974_var);
    }
    lv_i = 0;
    for ( ; ( (autoE4D8C796_ai >= 0 && lv_i <= autoE4D8C796_ae) || (autoE4D8C796_ai < 0 && lv_i >= autoE4D8C796_ae) ) ; lv_i += autoE4D8C796_ai ) {
        PingDestroy(gv_prologue.lv_mission01SentryMinimapPing[lv_i]);
        libNtve_gf_KillModel(gv_prologue.lv_mission01SentryActor[lv_i]);
        UnitKill(gv_prologue.lv_mission01SentryPlacementUnit[lv_i]);
    }
    lv_i2 = 0;
    for ( ; ( (autoFD08785F_ai >= 0 && lv_i2 <= autoFD08785F_ae) || (autoFD08785F_ai < 0 && lv_i2 >= autoFD08785F_ae) ) ; lv_i2 += autoFD08785F_ai ) {
        PingDestroy(gv_prologue.lv_mission01SentryRegionPing[lv_i2]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentryTimerExpires_Init () {
    gt_SentryTimerExpires = TriggerCreate("gt_SentryTimerExpires_Func");
    TriggerEnable(gt_SentryTimerExpires, false);
    TriggerAddEventTimer(gt_SentryTimerExpires, lib90F7C81D_gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry End
//--------------------------------------------------------------------------------------------------
bool gt_SentryEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto33EEAA20_g;
    int auto33EEAA20_u;
    unit auto33EEAA20_var;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), false);
    auto33EEAA20_g = gv_prologue.lv_mission01SentryItemGroup;
    auto33EEAA20_u = UnitGroupCount(auto33EEAA20_g, c_unitCountAll);
    for (;; auto33EEAA20_u -= 1) {
        auto33EEAA20_var = UnitGroupUnitFromEnd(auto33EEAA20_g, auto33EEAA20_u);
        if (auto33EEAA20_var == null) { break; }
        UnitRemove(auto33EEAA20_var);
    }
    if ((gv_prologue.lv_mission01SentrysPlaced == 10)) {
        gv_campaign.lv_missionCompleted += 1;
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/4CE77391"), gv_debug.lv_gameEvents);
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
        gf_AddHalfHeroLevel();
        Wait(2.0, c_timeGame);
        ObjectiveDestroy(lib90F7C81D_gv_mainObj);
        gv_prologue.lv_passRate[1] = true;
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/042E4696"));
    }
    else if ((gv_prologue.lv_mission01SentrysPlaced == 0)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/FD0B489A"), gv_debug.lv_gameEvents);
        gv_prologue.lv_passRate[1] = false;
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateFailed);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/74BFA1D9"));
    }
    else if (true) {
        gv_campaign.lv_missionCompleted += 1;
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/C1A0904A"), gv_debug.lv_gameEvents);
        gv_prologue.lv_passRate[1] = true;
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/5F21A0E5"));
        gf_AddHalfHeroLevel();
    }
    gf_XPGainGlobal(FixedToInt(Ceiling((IntToFixed(gv_prologue.lv_mission01SentrysPlaced) * lib90F7C81D_gf_GetModeXP("c0.1 Sentry")))), lib90F7C81D_gf_GetModeText("c0.1 Sentry"));
    Wait(5.0, c_timeGame);
    ObjectiveDestroy(lib90F7C81D_gv_mainObj);
    TriggerDestroy(gt_SentryItemUse);
    TriggerDestroy(gt_SentryTimerExpires);
    TriggerDestroy(gt_SpawnCaches);
    TriggerDestroy(gt_SentryPing);
    Wait(RandomFixed(20.0, 40.0), c_timeGame);
    if ((gv_campaign.lv_singleMission == false)) {
        TriggerEnable(gt_TCPContainmentSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Prologue.Mission02");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentryEnd_Init () {
    gt_SentryEnd = TriggerCreate("gt_SentryEnd_Func");
    TriggerEnable(gt_SentryEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Setup
//--------------------------------------------------------------------------------------------------
bool gt_SentrySetup_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_sentryi;
    int[10] lv_dialogi;

    // Automatic Variable Declarations
    const int autoD88412D1_ae = 9;
    const int autoD88412D1_ai = 1;
    const int auto9E76F660_ae = 9;
    const int auto9E76F660_ai = 1;
    const int auto38BCE9B5_ae = 9;
    const int auto38BCE9B5_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 9; init_i += 1) {
        lv_dialogi[init_i] = c_invalidDialogControlId;
    }

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/531E214B"), gv_debug.lv_gameEvents);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), true);
    TimerStart(lib90F7C81D_gv_missiontimer, gf_ScaleSentryTime(210.0), false, c_timeGame);
    TextExpressionSetToken("Param/Expression/D92A3DBA", "A", IntToText(gv_prologue.lv_mission01SentrysPlaced));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/D92A3DBA"), StringExternal("Param/Value/44274CAA"), c_objectiveStateActive, true);
    lib90F7C81D_gv_mainObj = ObjectiveLastCreated();
    lv_sentryi = 0;
    for ( ; ( (autoD88412D1_ai >= 0 && lv_sentryi <= autoD88412D1_ae) || (autoD88412D1_ai < 0 && lv_sentryi >= autoD88412D1_ae) ) ; lv_sentryi += autoD88412D1_ai ) {
        gv_prologue.lv_mission01SentryRegions[lv_sentryi] = RegionFromName(("C.P.Sentry Spot " + IntToString((lv_sentryi + 1))));
        libNtve_gf_CreateModelAtPoint("ChallengeShield", RegionGetCenter(gv_prologue.lv_mission01SentryRegions[lv_sentryi]));
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.200000");
        ActorSend(libNtve_gf_ActorLastCreated(), "SetVisibility 1");
        gv_prologue.lv_mission01SentryActor[lv_sentryi] = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), (("PingNumeric" + IntToString(lv_sentryi))), RegionGetCenter(gv_prologue.lv_mission01SentryRegions[lv_sentryi]), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/9969E2EB"));
        PingSetScale(PingLastCreated(), 0.5);
        gv_prologue.lv_mission01SentryMinimapPing[lv_sentryi] = PingLastCreated();
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "SentryText", 0, 0, RegionGetCenter(gv_prologue.lv_mission01SentryRegions[lv_sentryi]));
        gv_prologue.lv_mission01SentryPlacementUnit[lv_sentryi] = UnitLastCreated();
        DialogControlHookupUnitStatus(c_triggerControlTypeImage, "SentryTextBox/Image", gv_prologue.lv_mission01SentryPlacementUnit[lv_sentryi]);
        lv_dialogi[lv_sentryi] = DialogControlLastCreated();
    }
    gf_SpawnSentrys();
    TriggerEnable(gt_SentryTimerExpires, true);
    TriggerEnable(gt_SentryItemUse, true);
    TriggerEnable(gt_SentryEnd, true);
    TriggerEnable(gt_SentryPing, true);
    TriggerEnable(gt_SpawnCaches, true);
    TimerStart(lib90F7C81D_gv_missiontimer2, 15.0, false, c_timeGame);
    while ((gv_prologue.lv_mission01SentrysPlaced < 10) && (TriggerIsEnabled(gt_SentryTimerExpires) == true)) {
        Wait(1.0, c_timeGame);
        lv_sentryi = 0;
        for ( ; ( (auto9E76F660_ai >= 0 && lv_sentryi <= auto9E76F660_ae) || (auto9E76F660_ai < 0 && lv_sentryi >= auto9E76F660_ae) ) ; lv_sentryi += auto9E76F660_ai ) {
            if ((gv_prologue.lv_mission01SentryRegionUsed[lv_sentryi] == true)) {
                continue;
            }
            else {
                DialogControlSendAnimationEvent(lv_dialogi[lv_sentryi], PlayerGroupAll(), "Spin");
            }
        }
    }
    lv_sentryi = 0;
    for ( ; ( (auto38BCE9B5_ai >= 0 && lv_sentryi <= auto38BCE9B5_ae) || (auto38BCE9B5_ai < 0 && lv_sentryi >= auto38BCE9B5_ae) ) ; lv_sentryi += auto38BCE9B5_ai ) {
        lv_dialogi[lv_sentryi] = c_invalidDialogControlId;
    }
    TriggerExecute(gt_SentryEnd, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentrySetup_Init () {
    gt_SentrySetup = TriggerCreate("gt_SentrySetup_Func");
    TriggerEnable(gt_SentrySetup, false);
    lib90F7C81D_gf_CampaignEvent(gt_SentrySetup, "Prologue.Mission01");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sentry Ping
//--------------------------------------------------------------------------------------------------
bool gt_SentryPing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    region lv_region;
    int lv_count;

    // Automatic Variable Declarations
    const int autoAAD81D02_ae = 5;
    const int autoAAD81D02_ai = 1;
    unitgroup auto2463D91C_g;
    int auto2463D91C_u;
    unit auto2463D91C_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 0;
    for ( ; ( (autoAAD81D02_ai >= 0 && lv_i <= autoAAD81D02_ae) || (autoAAD81D02_ai < 0 && lv_i >= autoAAD81D02_ae) ) ; lv_i += autoAAD81D02_ai ) {
        lv_region = RegionFromName(("C.P.Sentry Spawn " + IntToString((lv_i + 1))));
        if ((libNtve_gf_UnitInRegion(EventUnitRangeUnit(), lv_region) == true) && (gv_prologue.lv_mission01SentryRegionSearched[lv_i] == false)) {
            gv_prologue.lv_mission01SentryRegionSearched[lv_i] = true;
            PingDestroy(gv_prologue.lv_mission01SentryRegionPing[lv_i]);
            if ((gv_prologue.lv_mission01SentryRegionEmpty[lv_i] == false)) {
                auto2463D91C_g = UnitGroupFilterRegion(gv_prologue.lv_mission01SentryItemGroup, lv_region, 0);
                auto2463D91C_u = UnitGroupCount(auto2463D91C_g, c_unitCountAll);
                for (;; auto2463D91C_u -= 1) {
                    auto2463D91C_var = UnitGroupUnitFromEnd(auto2463D91C_g, auto2463D91C_u);
                    if (auto2463D91C_var == null) { break; }
                    if ((libNtve_gf_UnitInRegion(auto2463D91C_var, lv_region) == true)) {
                        lv_count += 1;
                        lib90F7C81D_gf_MissionItemPingAddItem(auto2463D91C_var);
                        MinimapPing(PlayerGroupAll(), UnitGetPosition(auto2463D91C_var), 2.0, Color(100.00, 100.00, 0.00));
                    }
                }
                if ((lv_count == 1)) {
                    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/4FEFE9B0"));
                }
                else {
                    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/4CC7B94E"));
                }
            }
            else {
                lib90F7C81D_gf_MissionText(StringExternal("Param/Value/5A2AA538"));
            }
        }
    }
    lv_region = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SentryPing_Init () {
    gt_SentryPing = TriggerCreate("gt_SentryPing_Func");
    TriggerEnable(gt_SentryPing, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Caches
//--------------------------------------------------------------------------------------------------
bool gt_SpawnCaches_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_StopTimer(lib90F7C81D_gv_missiontimer2);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/DD2B9804"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/4EBF8FA4"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_RunEvent("SetupCacheSites");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnCaches_Init () {
    gt_SpawnCaches = TriggerCreate("gt_SpawnCaches_Func");
    TriggerEnable(gt_SpawnCaches, false);
    TriggerAddEventTimer(gt_SpawnCaches, lib90F7C81D_gv_missiontimer2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Check Containment Auto
//--------------------------------------------------------------------------------------------------
bool gt_CheckContainmentAuto_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_triggeringRegion;
    int lv_tCPi;
    region lv_workingRegion;
    fixed lv_numberofCops;
    fixed lv_numberofFriendlies;
    unitgroup lv_numberofZombies;
    int lv_frame;

    // Automatic Variable Declarations
    const int auto237297DE_ae = 2;
    const int auto237297DE_ai = 1;

    // Variable Initialization
    lv_numberofZombies = UnitGroupEmpty();
    lv_frame = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_tCPi = 0;
    for ( ; ( (auto237297DE_ai >= 0 && lv_tCPi <= auto237297DE_ae) || (auto237297DE_ai < 0 && lv_tCPi >= auto237297DE_ae) ) ; lv_tCPi += auto237297DE_ai ) {
        lv_workingRegion = gv_prologue.lv_mission02TCPRegions[lv_tCPi];
        lv_numberofCops = IntToFixed(UnitGroupCount(UnitGroup(null, 0, lv_workingRegion, UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive));
        lv_numberofFriendlies = IntToFixed(UnitGroupCount(UnitGroupFilterRegion(lib90F7C81D_gv_heroesGroup, lv_workingRegion, 0), c_unitCountAlive));
        lv_numberofZombies = UnitGroup(null, 14, lv_workingRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((gv_prologue.lv_mission02TCPFailed[lv_tCPi] == false) && (lv_numberofCops == 0.0) && ((lv_numberofFriendlies * gv_prologue.lv_mission02TCPScaleFactor) <= gf_CalculateUnitGroupSupply(lv_numberofZombies))) {
            gv_prologue.lv_mission02TCPFailed[lv_tCPi] = true;
            ObjectiveSetState(gv_prologue.lv_mission02Objectives[lv_tCPi], c_objectiveStateFailed);
            PingDestroy(gv_prologue.lv_mission02TCPMinimapPings[lv_tCPi]);
            lib90F7C81D_gf_MissionText(StringExternal("Param/Value/0890FBA3"));
            DialogControlHookupStandard(c_triggerControlTypePanel, ("$TCP" + IntToString((lv_tCPi + 1))));
            lv_frame = DialogControlLastCreated();
            DialogControlSendAnimationEvent(lv_frame, PlayerGroupAll(), "Fail");
            DialogControlDestroy(lv_frame);
            lib90F7C81D_gf_DrawRegionRemoveIndex(lv_tCPi);
            lv_frame = c_invalidDialogControlId;
            gf_TOWUpdate(0.0, 0.0, lv_workingRegion);
            if ((gv_prologue.lv_mission02TCPFailed[0] == true) && (gv_prologue.lv_mission02TCPFailed[1] == true) && (gv_prologue.lv_mission02TCPFailed[2] == true)) {
                TriggerEnable(TriggerGetCurrent(), false);
                lib90F7C81D_gf_MissionText(StringExternal("Param/Value/13796E3D"));
            }
        }
        else {
            if ((gv_prologue.lv_mission02TCPFailed[lv_tCPi] == false)) {
                gf_TOWUpdate((lv_numberofCops + lv_numberofFriendlies), gf_CalculateUnitGroupSupply(lv_numberofZombies), lv_workingRegion);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CheckContainmentAuto_Init () {
    gt_CheckContainmentAuto = TriggerCreate("gt_CheckContainmentAuto_Func");
    TriggerEnable(gt_CheckContainmentAuto, false);
    TriggerAddEventTimePeriodic(gt_CheckContainmentAuto, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TCP Timer Expires
//--------------------------------------------------------------------------------------------------
bool gt_TCPTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoADB3B1E3_ae = 2;
    const int autoADB3B1E3_ai = 1;
    const int autoD3925104_ae = 2;
    const int autoD3925104_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_StopTimer(lib90F7C81D_gv_missiontimer);
    TriggerEnable(gt_CheckContainmentAuto, false);
    TriggerEnable(gt_SearchHomeForCivillian, false);
    TriggerEnable(gt_ReservistEntersBarracks, false);
    lib90F7C81D_gf_DrawRegionRemoveAll();
    gf_TOWPanel(false);
    gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_TCPContainment, false);
    gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_Campaign, true);
    lv_i = 0;
    for ( ; ( (autoADB3B1E3_ai >= 0 && lv_i <= autoADB3B1E3_ae) || (autoADB3B1E3_ai < 0 && lv_i >= autoADB3B1E3_ae) ) ; lv_i += autoADB3B1E3_ai ) {
        if ((gv_prologue.lv_mission02TCPFailed[lv_i] == false)) {
            gv_prologue.lv_mission02TCPCountDefended += 1;
            ObjectiveSetState(gv_prologue.lv_mission02Objectives[lv_i], c_objectiveStateCompleted);
        }
        PingDestroy(gv_prologue.lv_mission02TCPMinimapPings[lv_i]);
    }
    if ((gv_prologue.lv_mission02TCPCountDefended >= 1)) {
        gv_campaign.lv_missionCompleted += 1;
        gv_prologue.lv_passRate[2] = true;
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/3CC68E36"));
        Wait(3.0, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/AE1ABBF6"));
        gf_AddHalfHeroLevel();
        if ((gv_prologue.lv_mission02TCPCountDefended == 3) && (lib90F7C81D_gf_DifficultyisGOE(3) == true)) {
            lib90F7C81D_gf_AwardAchievement(54);
        }
    }
    else {
        gv_prologue.lv_passRate[2] = false;
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateFailed);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/E01E5B93"));
    }
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), false);
    gf_XPGainGlobal(FixedToInt((IntToFixed(gv_prologue.lv_mission02TCPCountDefended) * lib90F7C81D_gf_GetModeXP("c0.2 TCP"))), lib90F7C81D_gf_GetModeText("c0.2 TCP"));
    Wait(3.0, c_timeGame);
    TriggerEnable(gt_ReservistDeath, false);
    TriggerDestroy(gt_CheckContainmentAuto);
    TriggerDestroy(gt_SearchHomeForCivillian);
    TriggerDestroy(gt_ReservistEntersBarracks);
    TriggerDestroy(gt_ReservistDeath);
    lv_i = 0;
    for ( ; ( (autoD3925104_ai >= 0 && lv_i <= autoD3925104_ae) || (autoD3925104_ai < 0 && lv_i >= autoD3925104_ae) ) ; lv_i += autoD3925104_ai ) {
        ObjectiveDestroy(gv_prologue.lv_mission02Objectives[lv_i]);
    }
    ObjectiveDestroy(lib90F7C81D_gv_secondObj);
    if ((gv_prologue.lv_mission02TCPCountDefended >= 1)) {
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/D3E89136"));
        Wait(RandomFixed(20.0, 40.0), c_timeGame);
        if ((gv_campaign.lv_singleMission == false)) {
            TriggerEnable(gt_EscortCargoTrucksSetup, true);
            lib90F7C81D_gf_RunCampaignEvent("Prologue.Mission04");
        }
    }
    else {
        UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/9F6CE1A9"), StringExternal("Param/Value/68EA7BE1"), 0.0, SoundLink("UI_Nova_BriefingTextCallout_Open", -1), SoundLink("UI_TextPrintout", -1));
        Wait(7.0, c_timeGame);
        UIHideTextCrawl(PlayerGroupAll());
        Wait(RandomFixed(20.0, 30.0), c_timeGame);
        if ((gv_campaign.lv_singleMission == false)) {
            TriggerEnable(gt_EngineerEscortSetup, true);
            lib90F7C81D_gf_RunCampaignEvent("Chapter-1.Mission1");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TCPTimerExpires_Init () {
    gt_TCPTimerExpires = TriggerCreate("gt_TCPTimerExpires_Func");
    TriggerEnable(gt_TCPTimerExpires, false);
    TriggerAddEventTimer(gt_TCPTimerExpires, lib90F7C81D_gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: TCP Containment Setup
//--------------------------------------------------------------------------------------------------
bool gt_TCPContainmentSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_elapsedSeconds;
    int lv_tcpOutpostsDefended;

    // Automatic Variable Declarations
    const int autoE2229818_ae = 2;
    const int autoE2229818_ai = 1;
    const int autoB294A5C8_n = 3;
    int autoB294A5C8_i;
    int auto07CDA5D8_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/EC1220BF"), gv_debug.lv_gameEvents);
    if ((lib90F7C81D_gf_DifficultyisGOE(3) == true)) {
        gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_Campaign, false);
    }
    lv_i = 0;
    for ( ; ( (autoE2229818_ai >= 0 && lv_i <= autoE2229818_ae) || (autoE2229818_ai < 0 && lv_i >= autoE2229818_ae) ) ; lv_i += autoE2229818_ai ) {
        gv_prologue.lv_mission02TCPRegions[lv_i] = RegionFromName(("TCP Containment " + IntToString((lv_i + 1))));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_prologue.lv_mission02TCPRegions[lv_i]), ColorWithAlpha(100.00, 0.00, 0.00, 49.02), 0.0, 270.0);
        TextExpressionSetToken("Param/Expression/BA7D1358", "A", IntToText((lv_i + 1)));
        PingSetTooltip(PingLastCreated(), TextExpressionAssemble("Param/Expression/BA7D1358"));
        gv_prologue.lv_mission02TCPMinimapPings[lv_i] = PingLastCreated();
        gf_TOWUpdate(3.0, 0.0, gv_prologue.lv_mission02TCPRegions[lv_i]);
        for (autoB294A5C8_i = 1; autoB294A5C8_i <= autoB294A5C8_n; autoB294A5C8_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PoliceOfficer", 0, 0, RegionGetCenter(RegionFromId(45)));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(RegionGetCenter(gv_prologue.lv_mission02TCPRegions[lv_i]), 4.0))), c_orderQueueReplace);
            Wait(0.5, c_timeGame);
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("NPCSprint", 0)), c_orderQueueReplace);
        }
    }
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/C1526A5B"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/7A1FCFE9"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/82B4C0B4"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/1E2FD2DD"));
    Wait(5.0, c_timeGame);
    lib90F7C81D_gf_DrawRegionEllipse(RegionFromId(86), Color(0.00, 100.00, 100.00));
    lib90F7C81D_gf_DrawRegionEllipse(RegionFromId(85), Color(0.00, 100.00, 100.00));
    lib90F7C81D_gf_DrawRegionEllipse(RegionFromId(84), Color(0.00, 100.00, 100.00));
    gf_TOWPanel(true);
    ObjectiveCreate(StringExternal("Param/Value/96D1A216"), StringExternal("Param/Value/335B998E"), c_objectiveStateActive, true);
    gv_prologue.lv_mission02Objectives[0] = ObjectiveLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/D55FFA40"), StringExternal("Param/Value/01B8E264"), c_objectiveStateActive, true);
    gv_prologue.lv_mission02Objectives[1] = ObjectiveLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/847AFA8C"), StringExternal("Param/Value/E8A8F9FD"), c_objectiveStateActive, true);
    gv_prologue.lv_mission02Objectives[2] = ObjectiveLastCreated();
    Wait(25.0, c_timeGame);
    auto07CDA5D8_val = lib90F7C81D_gf_GetSkillLevel();
    if (auto07CDA5D8_val == 1) {
        lib90F7C81D_gf_SetSpawnLoopTimer(lib90F7C81D_ge_LoopType_TCPContainment, 27.0);
    }
    else if (auto07CDA5D8_val == 2) {
        lib90F7C81D_gf_SetSpawnLoopTimer(lib90F7C81D_ge_LoopType_TCPContainment, 22.0);
    }
    else if (auto07CDA5D8_val == 3) {
        lib90F7C81D_gf_SetSpawnLoopTimer(lib90F7C81D_ge_LoopType_TCPContainment, 18.0);
    }
    else {
        lib90F7C81D_gf_SetSpawnLoopTimer(lib90F7C81D_ge_LoopType_TCPContainment, 25.0);
    }
    gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_TCPContainment, true);
    TimerStart(lib90F7C81D_gv_missiontimer, 240.0, false, c_timeGame);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), true);
    TriggerEnable(gt_TCPTimerExpires, true);
    Wait(15.0, c_timeGame);
    TriggerEnable(gt_CheckContainmentAuto, true);
    Wait(15.0, c_timeGame);
    if ((gv_campaign.lv_singleMission == false)) {
        TriggerEnable(gt_PreservetheReserveSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Prologue.Mission03");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TCPContainmentSetup_Init () {
    gt_TCPContainmentSetup = TriggerCreate("gt_TCPContainmentSetup_Func");
    TriggerEnable(gt_TCPContainmentSetup, false);
    lib90F7C81D_gf_CampaignEvent(gt_TCPContainmentSetup, "Prologue.Mission02");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Preserve the Reserve Setup
//--------------------------------------------------------------------------------------------------
bool gt_PreservetheReserveSetup_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_loopcount;
    region lv_nPCHouse;
    int[8] lv_dialogi;

    // Automatic Variable Declarations
    const int autoD3D1EEB4_ae = 45;
    const int autoD3D1EEB4_ai = 1;
    const int auto3585B25B_ae = 7;
    const int auto3585B25B_ai = 1;
    playergroup auto40E9C200_g;
    int auto40E9C200_var;
    const int auto8AE62C4F_ae = 7;
    const int auto8AE62C4F_ai = 1;
    const int autoCBA2D37A_ae = 7;
    const int autoCBA2D37A_ai = 1;
    unitgroup auto54DE5E2C_g;
    int auto54DE5E2C_u;
    unit auto54DE5E2C_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 7; init_i += 1) {
        lv_dialogi[init_i] = c_invalidDialogControlId;
    }

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/6FDFE493"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/B2FD3234"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/CFE0246B"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/F648EB31"));
    Wait(6.5, c_timeGame);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/B3BFF6F5"), gv_debug.lv_gameEvents);
    TextExpressionSetToken("Param/Expression/9F811B57", "A", IntToText(gv_prologue.lv_mission03TotalReservists));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/9F811B57"), StringExternal("Param/Value/5DBA1F06"), c_objectiveStateActive, false);
    lib90F7C81D_gv_secondObj = ObjectiveLastCreated();
    lv_loopcount = 0;
    for ( ; ( (autoD3D1EEB4_ai >= 0 && lv_loopcount <= autoD3D1EEB4_ae) || (autoD3D1EEB4_ai < 0 && lv_loopcount >= autoD3D1EEB4_ae) ) ; lv_loopcount += autoD3D1EEB4_ai ) {
        lv_nPCHouse = RegionFromName(("C.P.House " + IntToString((lv_loopcount + 1))));
        if ((lv_loopcount <= 4)) {
            gv_prologue.lv_mission03ReservistRegions1[lv_loopcount] = lv_nPCHouse;
        }
        else if ((lv_loopcount <= 14)) {
            gv_prologue.lv_mission03ReservistRegions2[(lv_loopcount - 5)] = lv_nPCHouse;
        }
        else if ((lv_loopcount <= 21)) {
            gv_prologue.lv_mission03ReservistRegions3[(lv_loopcount - 15)] = lv_nPCHouse;
        }
        else if ((lv_loopcount <= 31)) {
            gv_prologue.lv_mission03ReservistRegions4[(lv_loopcount - 22)] = lv_nPCHouse;
        }
        else if ((lv_loopcount <= 45)) {
            gv_prologue.lv_mission03ReservistRegions5[(lv_loopcount - 32)] = lv_nPCHouse;
        }
    }
    gf_PickReservistLocations();
    lv_loopcount = 0;
    for ( ; ( (auto3585B25B_ai >= 0 && lv_loopcount <= auto3585B25B_ae) || (auto3585B25B_ai < 0 && lv_loopcount >= auto3585B25B_ae) ) ; lv_loopcount += auto3585B25B_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "StandHereText", 0, 0, RegionGetCenter(gv_prologue.lv_mission03ReservistPickedLocations[lv_loopcount]));
        gv_prologue.lv_mission03ReservistPlacementUnit[lv_loopcount] = UnitLastCreated();
        DialogControlHookupUnitStatus(c_triggerControlTypeImage, "StandingLocationTextBox/Image", gv_prologue.lv_mission03ReservistPlacementUnit[lv_loopcount]);
        lv_dialogi[lv_loopcount] = DialogControlLastCreated();
        RegionAddRegion(gv_mission03ReservistRegions, gv_prologue.lv_mission03ReservistPickedLocations[lv_loopcount]);
    }
    TriggerEnable(gt_SearchHomeForCivillian, true);
    TriggerEnable(gt_ReservistEntersBarracks, true);
    TriggerEnable(gt_ReservistDeath, true);
    auto40E9C200_g = lib90F7C81D_gv_players;
    auto40E9C200_var = -1;
    while (true) {
        auto40E9C200_var = PlayerGroupNextPlayer(auto40E9C200_g, auto40E9C200_var);
        if (auto40E9C200_var < 0) { break; }
        TriggerAddEventUnitRegion(gt_SearchHomeForCivillian, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lib90F7C81D_gv_playerHeroes[auto40E9C200_var])), gv_mission03ReservistRegions, true);
    }
    while ((TimerGetRemaining(lib90F7C81D_gv_missiontimer) > 0.0)) {
        Wait(1.0, c_timeGame);
        lv_loopcount = 0;
        for ( ; ( (auto8AE62C4F_ai >= 0 && lv_loopcount <= auto8AE62C4F_ae) || (auto8AE62C4F_ai < 0 && lv_loopcount >= auto8AE62C4F_ae) ) ; lv_loopcount += auto8AE62C4F_ai ) {
            if ((gv_prologue.lv_mission03ReservistConscripted[lv_loopcount] == true)) {
                continue;
            }
            else {
                DialogControlSendAnimationEvent(lv_dialogi[lv_loopcount], PlayerGroupAll(), "Spin");
            }
        }
        if ((gv_prologue.lv_mission03BarracksPing != c_invalidPingId) && (libNtve_gf_UnitGroupIsDead(gv_prologue.lv_mission03ReservistUnitGroup) == true) && (TriggerIsEnabled(gt_SearchHomeForCivillian) == false)) {
            break;
        }
    }
    lv_loopcount = 0;
    for ( ; ( (autoCBA2D37A_ai >= 0 && lv_loopcount <= autoCBA2D37A_ae) || (autoCBA2D37A_ai < 0 && lv_loopcount >= autoCBA2D37A_ae) ) ; lv_loopcount += autoCBA2D37A_ai ) {
        PingDestroy(gv_prologue.lv_mission03ReservistMinimapPing[lv_loopcount]);
        libNtve_gf_KillModel(gv_prologue.lv_mission03ReservistActor[lv_loopcount]);
        UnitKill(gv_prologue.lv_mission03ReservistPlacementUnit[lv_loopcount]);
    }
    PingDestroy(gv_prologue.lv_mission03BarracksPing);
    TextTagDestroy(gv_prologue.lv_mission03BarracksTextTag);
    auto54DE5E2C_g = gv_prologue.lv_mission03ReservistUnitGroup;
    auto54DE5E2C_u = UnitGroupCount(auto54DE5E2C_g, c_unitCountAll);
    for (;; auto54DE5E2C_u -= 1) {
        auto54DE5E2C_var = UnitGroupUnitFromEnd(auto54DE5E2C_g, auto54DE5E2C_u);
        if (auto54DE5E2C_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto54DE5E2C_var, false);
        UnitKill(auto54DE5E2C_var);
    }
    if ((gv_prologue.lv_mission03TotalReservists == 0)) {
        gv_prologue.lv_passRate[3] = false;
        ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateFailed);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/ED617FA2"));
        Wait(4.0, c_timeGame);
    }
    else {
        gv_campaign.lv_missionCompleted += 1;
        gv_prologue.lv_passRate[3] = true;
        ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateCompleted);
        gf_AddHalfHeroLevel();
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/00BE2CE9"));
        if ((gv_prologue.lv_mission03TotalReservists == 8)) {
            lib90F7C81D_gf_AwardAchievement(55);
        }
        Wait(4.0, c_timeGame);
        gf_XPGainGlobal(FixedToInt((IntToFixed(gv_prologue.lv_mission03TotalReservists) * lib90F7C81D_gf_GetModeXP("c0.3 Reservist"))), lib90F7C81D_gf_GetModeText("c0.3 Reservist"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PreservetheReserveSetup_Init () {
    gt_PreservetheReserveSetup = TriggerCreate("gt_PreservetheReserveSetup_Func");
    TriggerEnable(gt_PreservetheReserveSetup, false);
    lib90F7C81D_gf_CampaignEvent(gt_PreservetheReserveSetup, "Prologue.Mission03");
}

//--------------------------------------------------------------------------------------------------
// Trigger: SearchHomeForCivillian
//--------------------------------------------------------------------------------------------------
bool gt_SearchHomeForCivillian_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopcount;

    // Automatic Variable Declarations
    const int auto3CD9558E_ae = 7;
    const int auto3CD9558E_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_loopcount = 0;
    for ( ; ( (auto3CD9558E_ai >= 0 && lv_loopcount <= auto3CD9558E_ae) || (auto3CD9558E_ai < 0 && lv_loopcount >= auto3CD9558E_ae) ) ; lv_loopcount += auto3CD9558E_ai ) {
        if ((libNtve_gf_UnitInRegion(EventUnit(), gv_prologue.lv_mission03ReservistPickedLocations[lv_loopcount]) == true) && (gv_prologue.lv_mission03ReservistConscripted[lv_loopcount] == false)) {
            gv_prologue.lv_mission03ReservistConscripted[lv_loopcount] = true;
            if ((RandomInt(0, 1) == 1)) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "CivilianFemale", 0, EventPlayer(), RegionRandomPoint(gv_prologue.lv_mission03ReservistPickedLocations[lv_loopcount]));
                UnitBehaviorRemove(UnitLastCreated(), "CivilianWander", 1);
            }
            else {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Civilian", 0, EventPlayer(), RegionRandomPoint(gv_prologue.lv_mission03ReservistPickedLocations[lv_loopcount]));
                UnitBehaviorRemove(UnitLastCreated(), "CivilianWander", 1);
            }
            lib90F7C81D_gf_StoreMinimapPings(UnitLastCreated(), StringExternal("Param/Value/67D77F85"), Color(0.00, 25.10, 0.00), 0.65);
            TextTagCreate(gf_GetReservistText(), 24, UnitGetPosition(UnitLastCreated()), 1.0, true, false, PlayerGroupAll());
            libHots_gf_StoreTextTagForUnit(UnitLastCreated(), 1, TextTagLastCreated());
            TriggerAddEventUnitDied(gt_ReservistDeath, UnitRefFromUnit(UnitLastCreated()));
            TriggerAddEventUnitRegion(gt_ReservistEntersBarracks, UnitRefFromUnit(UnitLastCreated()), RegionFromId(46), true);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, 2.0);
            UnitGroupAdd(gv_prologue.lv_mission03ReservistUnitGroup, UnitLastCreated());
            PingDestroy(gv_prologue.lv_mission03ReservistMinimapPing[lv_loopcount]);
            libNtve_gf_KillModel(gv_prologue.lv_mission03ReservistActor[lv_loopcount]);
            UnitKill(gv_prologue.lv_mission03ReservistPlacementUnit[lv_loopcount]);
            gv_prologue.lv_mission03CurrentEscorts += 1;
            Wait(1.0, c_timeGame);
            TextTagDestroy(libHots_gf_TextTagForUnit(UnitLastCreated(), 1));
        }
        if ((gv_prologue.lv_mission03BarracksPing == c_invalidPingId)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(46)), ColorWithAlpha(100.00, 100.00, 0.00, 49.02), 0.0, 270.0);
            PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/98D37ADE"));
            gv_prologue.lv_mission03BarracksPing = PingLastCreated();
            TextTagCreate(StringExternal("Param/Value/8ABC0AA7"), 10, RegionGetCenter(RegionFromId(46)), 0.0, true, true, PlayerGroupAll());
            gv_prologue.lv_mission03BarracksTextTag = TextTagLastCreated();
        }
        if ((gv_prologue.lv_mission03CurrentEscorts == 8)) {
            TriggerEnable(TriggerGetCurrent(), false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SearchHomeForCivillian_Init () {
    gt_SearchHomeForCivillian = TriggerCreate("gt_SearchHomeForCivillian_Func");
    TriggerEnable(gt_SearchHomeForCivillian, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReservistEntersBarracks
//--------------------------------------------------------------------------------------------------
bool gt_ReservistEntersBarracks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideUnit(EventUnit(), false);
    UnitRemove(EventUnit());
    gv_prologue.lv_mission03TotalReservists += 1;
    lib90F7C81D_gf_RemoveMinimapPingIndex(EventUnit());
    TextExpressionSetToken("Param/Expression/591771EE", "A", IntToText(gv_prologue.lv_mission03TotalReservists));
    ObjectiveSetName(lib90F7C81D_gv_secondObj, TextExpressionAssemble("Param/Expression/591771EE"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReservistEntersBarracks_Init () {
    gt_ReservistEntersBarracks = TriggerCreate("gt_ReservistEntersBarracks_Func");
    TriggerEnable(gt_ReservistEntersBarracks, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ReservistDeath
//--------------------------------------------------------------------------------------------------
bool gt_ReservistDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gf_RemoveMinimapPingIndex(EventUnit());
    if ((libNtve_gf_UnitGroupIsDead(gv_prologue.lv_mission03ReservistUnitGroup) == true) && (gv_prologue.lv_mission03CurrentEscorts == 8)) {
        PingDestroy(gv_prologue.lv_mission03BarracksPing);
        TextTagDestroy(gv_prologue.lv_mission03BarracksTextTag);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReservistDeath_Init () {
    gt_ReservistDeath = TriggerCreate("gt_ReservistDeath_Func");
    TriggerEnable(gt_ReservistDeath, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Cargo Trucks Setup
//--------------------------------------------------------------------------------------------------
bool gt_EscortCargoTrucksSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tcpOutputDefended;
    int lv_loopcount;

    // Automatic Variable Declarations
    const int autoCCE58E5F_ae = 2;
    const int autoCCE58E5F_ai = 1;
    unitgroup autoAA342FC5_g;
    int autoAA342FC5_u;
    unit autoAA342FC5_var;
    unitgroup autoC6B60E84_g;
    int autoC6B60E84_u;
    unit autoC6B60E84_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/64377631"), gv_debug.lv_gameEvents);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/161EA71E"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/3594D5D9"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/170C5435"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/F19744BF"));
    Wait(6.5, c_timeGame);
    gf_SetupCargoTruckRoutes();
    gf_CreateCargoTrucks(0);
    lv_loopcount = 0;
    for ( ; ( (autoCCE58E5F_ai >= 0 && lv_loopcount <= autoCCE58E5F_ae) || (autoCCE58E5F_ai < 0 && lv_loopcount >= autoCCE58E5F_ae) ) ; lv_loopcount += autoCCE58E5F_ai ) {
        if ((gv_prologue.lv_mission02TCPFailed[lv_loopcount] == false)) {
            lv_tcpOutputDefended += 1;
            gf_PingCargoTruckRoute(lv_loopcount);
        }
    }
    TextExpressionSetToken("Param/Expression/348358DA", "A", IntToText(gv_prologue.lv_mission04SuccessfullyEscortedTrucks));
    TextExpressionSetToken("Param/Expression/348358DA", "B", IntToText((lv_tcpOutputDefended * 2)));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/348358DA"), StringExternal("Param/Value/C9A80512"), c_objectiveStateActive, true);
    lib90F7C81D_gv_mainObj = ObjectiveLastCreated();
    TriggerEnable(gt_EscortCargoTrucksEnd, true);
    Wait(45.0, c_timeGame);
    autoAA342FC5_g = UnitGroup("PoliceOfficer", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAA342FC5_u = UnitGroupCount(autoAA342FC5_g, c_unitCountAll);
    for (;; autoAA342FC5_u -= 1) {
        autoAA342FC5_var = UnitGroupUnitFromEnd(autoAA342FC5_g, autoAA342FC5_u);
        if (autoAA342FC5_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(autoAA342FC5_var, RegionFromId(47)) == false)) {
            UnitIssueOrder(autoAA342FC5_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(47))), c_orderQueueReplace);
        }
    }
    autoC6B60E84_g = UnitGroup("PoliceOfficerShotgun", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoC6B60E84_u = UnitGroupCount(autoC6B60E84_g, c_unitCountAll);
    for (;; autoC6B60E84_u -= 1) {
        autoC6B60E84_var = UnitGroupUnitFromEnd(autoC6B60E84_g, autoC6B60E84_u);
        if (autoC6B60E84_var == null) { break; }
        if ((libNtve_gf_UnitInRegion(autoC6B60E84_var, RegionFromId(47)) == false)) {
            UnitIssueOrder(autoC6B60E84_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(47))), c_orderQueueReplace);
        }
    }
    gf_CreateCargoTrucks(1);
    gv_prologue.lv_mission04ConvoySecondWaveSpawned = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortCargoTrucksSetup_Init () {
    gt_EscortCargoTrucksSetup = TriggerCreate("gt_EscortCargoTrucksSetup_Func");
    TriggerEnable(gt_EscortCargoTrucksSetup, false);
    lib90F7C81D_gf_CampaignEvent(gt_EscortCargoTrucksSetup, "Prologue.Mission04");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escort Cargo Trucks End
//--------------------------------------------------------------------------------------------------
bool gt_EscortCargoTrucksEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tcpOutputDefended;
    int lv_loopcount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_CargoTruckMovement, false);
    TriggerEnable(gt_CargoTruckExit, false);
    TriggerEnable(gt_CargoTruckDeath, false);
    TriggerEnable(gt_CargoTruckUnstuck, false);
    if ((gv_prologue.lv_mission04TrucksEscortedToTown == 0)) {
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateFailed);
    }
    else if ((gv_prologue.lv_mission04SuccessfullyEscortedTrucks == 0)) {
        ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateFailed);
    }
    else if (true) {
        gv_campaign.lv_missionCompleted += 1;
        ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateCompleted);
        gv_prologue.lv_passRate[4] = true;
        gf_AddHalfHeroLevel();
        if ((gv_prologue.lv_mission04TruckLost == false)) {
            lib90F7C81D_gf_AwardAchievement(56);
        }
        if ((gv_campaign.lv_missionCompleted == 6)) {
            lib90F7C81D_gf_AwardAchievement(57);
        }
    }
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/5259E75C"));
    Wait(5.0, c_timeGame);
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateHidden);
    ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateHidden);
    TriggerDestroy(gt_CargoTruckMovement);
    TriggerDestroy(gt_CargoTruckDeath);
    TriggerDestroy(gt_CargoTruckExit);
    TriggerDestroy(gt_CargoTruckUnstuck);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/B159678D"), StringExternal("Param/Value/39EA4A8E"), 0.0, SoundLink("UI_Nova_BriefingTextCallout_Open", -1), SoundLink("UI_TextPrintout", -1));
    Wait(7.0, c_timeGame);
    UIHideTextCrawl(PlayerGroupAll());
    Wait(RandomFixed(20.0, 30.0), c_timeGame);
    if ((gv_campaign.lv_singleMission == false)) {
        TriggerEnable(gt_EngineerEscortSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-1.Mission1");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscortCargoTrucksEnd_Init () {
    gt_EscortCargoTrucksEnd = TriggerCreate("gt_EscortCargoTrucksEnd_Func");
    TriggerEnable(gt_EscortCargoTrucksEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cargo Truck Movement
//--------------------------------------------------------------------------------------------------
bool gt_CargoTruckMovement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    unitgroup lv_cargoTruckGroup;
    region lv_region;
    int lv_vehicleCount;
    int lv_civSpawn;

    // Automatic Variable Declarations
    region auto9126C97E_val;
    const int autoD9BF18A8_ae = 5;
    const int autoD9BF18A8_ai = 1;
    const int auto9D05F9F8_ae = 5;
    const int auto9D05F9F8_ai = 1;
    const int autoE9E8C4A1_ae = 5;
    const int autoE9E8C4A1_ai = 1;
    const int auto2C246BDA_ae = 5;
    const int auto2C246BDA_ai = 1;
    const int auto826BA934_ae = 5;
    const int auto826BA934_ai = 1;
    const int auto3E7EA361_ae = 5;
    const int auto3E7EA361_ai = 1;
    const int auto1DCD4ABC_ae = 5;
    const int auto1DCD4ABC_ai = 1;
    unitgroup auto7944E573_g;
    int auto7944E573_u;
    unit auto7944E573_var;
    unitgroup auto0D5CBB43_g;
    int auto0D5CBB43_u;
    unit auto0D5CBB43_var;

    // Variable Initialization
    lv_cargoTruckGroup = UnitGroupEmpty();
    lv_region = EventUnitRegion();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "LMTV"))) {
            return false;
        }

        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9126C97E_val = lv_region;
    if (auto9126C97E_val == RegionFromId(134)) {
        TextExpressionSetToken("Param/Expression/13A0F59B", "A", IntToText(gv_prologue.lv_mission04WestCargoTruckCurrentIndex));
        TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/13A0F59B"), gv_debug.lv_gameEvents);
        if ((gv_prologue.lv_mission04WestCargoTruckCurrentIndex <= gv_prologue.lv_mission04CargoTruckPoints[0])) {
            if ((gv_prologue.lv_mission04WestCargoTruckCurrentIndex >= gv_prologue.lv_mission04CargoTruckPoints[0])) {
                TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/3BA462F6"), gv_debug.lv_gameEvents);
                gv_prologue.lv_mission04TrucksEscortedToTown += 1;
                TextExpressionSetToken("Param/Expression/68EDC3FD", "A", IntToText(gv_prologue.lv_mission04TrucksEscortedToTown));
                TextExpressionSetToken("Param/Expression/68EDC3FD", "B", IntToText((gv_prologue.lv_mission02TCPCountDefended * 2)));
                ObjectiveSetName(lib90F7C81D_gv_mainObj, TextExpressionAssemble("Param/Expression/68EDC3FD"));
                UnitGroupRemove(gv_prologue.lv_mission04CargoTruckUnitGroup, EventUnit());
                UnitBehaviorRemove(EventUnit(), "LMTVAntiStuck", 1);
                lv_civSpawn = 1;
                for ( ; ( (autoD9BF18A8_ai >= 0 && lv_civSpawn <= autoD9BF18A8_ae) || (autoD9BF18A8_ai < 0 && lv_civSpawn >= autoD9BF18A8_ae) ) ; lv_civSpawn += autoD9BF18A8_ai ) {
                    if ((RandomInt(0, 1) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CivilianFemale", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 2.0)));
                    }
                    else {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Civilian", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 2.0)));
                    }
                    UnitGroupAdd(gv_prologue.lv_mission04CivUnits, UnitLastCreated());
                }
            }
            else {
                TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/EEC01030"), gv_debug.lv_gameEvents);
                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute[gv_prologue.lv_mission04WestCargoTruckCurrentIndex]), c_orderQueueAddToEnd);
                gv_prologue.lv_mission04WestCargoTruckCurrentIndex += 1;
            }
            RegionSetCenter(RegionFromId(134), gv_prologue.lv_WestTCPRoute[(gv_prologue.lv_mission04WestCargoTruckCurrentIndex - 1)]);
        }
    }
    else if (auto9126C97E_val == RegionFromId(135)) {
        if ((gv_prologue.lv_mission04SouthCargoTruckCurrentIndex <= gv_prologue.lv_mission04CargoTruckPoints[1])) {
            if ((gv_prologue.lv_mission04SouthCargoTruckCurrentIndex >= gv_prologue.lv_mission04CargoTruckPoints[1])) {
                TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/AA4A03BE"), gv_debug.lv_gameEvents);
                gv_prologue.lv_mission04TrucksEscortedToTown += 1;
                TextExpressionSetToken("Param/Expression/D7C33514", "A", IntToText(gv_prologue.lv_mission04TrucksEscortedToTown));
                TextExpressionSetToken("Param/Expression/D7C33514", "B", IntToText((gv_prologue.lv_mission02TCPCountDefended * 2)));
                ObjectiveSetName(lib90F7C81D_gv_mainObj, TextExpressionAssemble("Param/Expression/D7C33514"));
                UnitGroupRemove(gv_prologue.lv_mission04CargoTruckUnitGroup, EventUnit());
                UnitBehaviorRemove(EventUnit(), "LMTVAntiStuck", 1);
                lv_civSpawn = 1;
                for ( ; ( (auto9D05F9F8_ai >= 0 && lv_civSpawn <= auto9D05F9F8_ae) || (auto9D05F9F8_ai < 0 && lv_civSpawn >= auto9D05F9F8_ae) ) ; lv_civSpawn += auto9D05F9F8_ai ) {
                    if ((RandomInt(0, 1) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CivilianFemale", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 2.0)));
                    }
                    else {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Civilian", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 2.0)));
                    }
                    UnitGroupAdd(gv_prologue.lv_mission04CivUnits, UnitLastCreated());
                }
            }
            else {
                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[gv_prologue.lv_mission04SouthCargoTruckCurrentIndex]), c_orderQueueAddToEnd);
                gv_prologue.lv_mission04SouthCargoTruckCurrentIndex += 1;
            }
            RegionSetCenter(RegionFromId(135), gv_prologue.lv_WestTCPRoute2[(gv_prologue.lv_mission04SouthCargoTruckCurrentIndex - 1)]);
        }

    }
    else if (auto9126C97E_val == RegionFromId(136)) {
        if ((gv_prologue.lv_mission04EastCargoTruckCurrentIndex <= gv_prologue.lv_mission04CargoTruckPoints[2])) {
            if ((gv_prologue.lv_mission04EastCargoTruckCurrentIndex >= gv_prologue.lv_mission04CargoTruckPoints[2])) {
                TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/1715E205"), gv_debug.lv_gameEvents);
                gv_prologue.lv_mission04TrucksEscortedToTown += 1;
                TextExpressionSetToken("Param/Expression/58CAD539", "A", IntToText(gv_prologue.lv_mission04TrucksEscortedToTown));
                TextExpressionSetToken("Param/Expression/58CAD539", "B", IntToText((gv_prologue.lv_mission02TCPCountDefended * 2)));
                ObjectiveSetName(lib90F7C81D_gv_mainObj, TextExpressionAssemble("Param/Expression/58CAD539"));
                UnitGroupRemove(gv_prologue.lv_mission04CargoTruckUnitGroup, EventUnit());
                UnitBehaviorRemove(EventUnit(), "LMTVAntiStuck", 1);
                lv_civSpawn = 1;
                for ( ; ( (autoE9E8C4A1_ai >= 0 && lv_civSpawn <= autoE9E8C4A1_ae) || (autoE9E8C4A1_ai < 0 && lv_civSpawn >= autoE9E8C4A1_ae) ) ; lv_civSpawn += autoE9E8C4A1_ai ) {
                    if ((RandomInt(0, 1) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CivilianFemale", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 2.0)));
                    }
                    else {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Civilian", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 2.0)));
                    }
                    UnitGroupAdd(gv_prologue.lv_mission04CivUnits, UnitLastCreated());
                }
            }
            else {
                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute3[gv_prologue.lv_mission04EastCargoTruckCurrentIndex]), c_orderQueueAddToEnd);
                gv_prologue.lv_mission04EastCargoTruckCurrentIndex += 1;
            }
            RegionSetCenter(RegionFromId(136), gv_prologue.lv_WestTCPRoute3[(gv_prologue.lv_mission04EastCargoTruckCurrentIndex - 1)]);
        }

    }
    else if (auto9126C97E_val == RegionFromId(139)) {
        if ((gv_prologue.lv_mission04WestCargoTruck2CurrentIndex <= gv_prologue.lv_mission04CargoTruckPoints[0])) {
            if ((gv_prologue.lv_mission04WestCargoTruck2CurrentIndex >= (gv_prologue.lv_mission04CargoTruckPoints[0] - 2))) {
                TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/A6762866"), gv_debug.lv_gameEvents);
                gv_prologue.lv_mission04TrucksEscortedToTown += 1;
                TextExpressionSetToken("Param/Expression/C6C2B9C7", "A", IntToText(gv_prologue.lv_mission04TrucksEscortedToTown));
                TextExpressionSetToken("Param/Expression/C6C2B9C7", "B", IntToText((gv_prologue.lv_mission02TCPCountDefended * 2)));
                ObjectiveSetName(lib90F7C81D_gv_mainObj, TextExpressionAssemble("Param/Expression/C6C2B9C7"));
                UnitGroupRemove(gv_prologue.lv_mission04CargoTruckUnitGroup, EventUnit());
                UnitBehaviorRemove(EventUnit(), "LMTVAntiStuck", 1);
                lv_civSpawn = 1;
                for ( ; ( (auto2C246BDA_ai >= 0 && lv_civSpawn <= auto2C246BDA_ae) || (auto2C246BDA_ai < 0 && lv_civSpawn >= auto2C246BDA_ae) ) ; lv_civSpawn += auto2C246BDA_ai ) {
                    if ((RandomInt(0, 1) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CivilianFemale", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 2.0)));
                    }
                    else {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Civilian", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 2.0)));
                    }
                    UnitGroupAdd(gv_prologue.lv_mission04CivUnits, UnitLastCreated());
                }
            }
            else {
                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute[gv_prologue.lv_mission04WestCargoTruck2CurrentIndex]), c_orderQueueAddToEnd);
                gv_prologue.lv_mission04WestCargoTruck2CurrentIndex += 1;
            }
            RegionSetCenter(RegionFromId(139), gv_prologue.lv_WestTCPRoute[(gv_prologue.lv_mission04WestCargoTruck2CurrentIndex - 1)]);
        }

    }
    else if (auto9126C97E_val == RegionFromId(138)) {
        if ((gv_prologue.lv_mission04SouthCargoTruck2CurrentIndex <= gv_prologue.lv_mission04CargoTruckPoints[1])) {
            if ((gv_prologue.lv_mission04SouthCargoTruck2CurrentIndex >= (gv_prologue.lv_mission04CargoTruckPoints[1] - 1))) {
                TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/CD407850"), gv_debug.lv_gameEvents);
                gv_prologue.lv_mission04TrucksEscortedToTown += 1;
                TextExpressionSetToken("Param/Expression/57FEE25C", "A", IntToText(gv_prologue.lv_mission04TrucksEscortedToTown));
                TextExpressionSetToken("Param/Expression/57FEE25C", "B", IntToText((gv_prologue.lv_mission02TCPCountDefended * 2)));
                ObjectiveSetName(lib90F7C81D_gv_mainObj, TextExpressionAssemble("Param/Expression/57FEE25C"));
                UnitGroupRemove(gv_prologue.lv_mission04CargoTruckUnitGroup, EventUnit());
                UnitBehaviorRemove(EventUnit(), "LMTVAntiStuck", 1);
                lv_civSpawn = 1;
                for ( ; ( (auto826BA934_ai >= 0 && lv_civSpawn <= auto826BA934_ae) || (auto826BA934_ai < 0 && lv_civSpawn >= auto826BA934_ae) ) ; lv_civSpawn += auto826BA934_ai ) {
                    if ((RandomInt(0, 1) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CivilianFemale", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 2.0)));
                    }
                    else {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Civilian", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 2.0)));
                    }
                    UnitGroupAdd(gv_prologue.lv_mission04CivUnits, UnitLastCreated());
                }
            }
            else {
                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[gv_prologue.lv_mission04SouthCargoTruck2CurrentIndex]), c_orderQueueAddToEnd);
                gv_prologue.lv_mission04SouthCargoTruck2CurrentIndex += 1;
            }
            RegionSetCenter(RegionFromId(138), gv_prologue.lv_WestTCPRoute2[(gv_prologue.lv_mission04SouthCargoTruck2CurrentIndex - 1)]);
        }

    }
    else if (auto9126C97E_val == RegionFromId(137)) {
        if ((gv_prologue.lv_mission04EastCargoTruck2CurrentIndex <= gv_prologue.lv_mission04CargoTruckPoints[2])) {
            if ((gv_prologue.lv_mission04EastCargoTruck2CurrentIndex >= (gv_prologue.lv_mission04CargoTruckPoints[2] - 3))) {
                TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/D84A3EE6"), gv_debug.lv_gameEvents);
                gv_prologue.lv_mission04TrucksEscortedToTown += 1;
                TextExpressionSetToken("Param/Expression/CF3795DC", "A", IntToText(gv_prologue.lv_mission04TrucksEscortedToTown));
                TextExpressionSetToken("Param/Expression/CF3795DC", "B", IntToText((gv_prologue.lv_mission02TCPCountDefended * 2)));
                ObjectiveSetName(lib90F7C81D_gv_mainObj, TextExpressionAssemble("Param/Expression/CF3795DC"));
                UnitGroupRemove(gv_prologue.lv_mission04CargoTruckUnitGroup, EventUnit());
                UnitBehaviorRemove(EventUnit(), "LMTVAntiStuck", 1);
                lv_civSpawn = 1;
                for ( ; ( (auto3E7EA361_ai >= 0 && lv_civSpawn <= auto3E7EA361_ae) || (auto3E7EA361_ai < 0 && lv_civSpawn >= auto3E7EA361_ae) ) ; lv_civSpawn += auto3E7EA361_ai ) {
                    if ((RandomInt(0, 1) == 1)) {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "CivilianFemale", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 2.0)));
                    }
                    else {
                        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Civilian", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnit()), 2.0)));
                    }
                    UnitGroupAdd(gv_prologue.lv_mission04CivUnits, UnitLastCreated());
                }
            }
            else {
                UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute3[gv_prologue.lv_mission04EastCargoTruck2CurrentIndex]), c_orderQueueAddToEnd);
                gv_prologue.lv_mission04EastCargoTruck2CurrentIndex += 1;
            }
            RegionSetCenter(RegionFromId(137), gv_prologue.lv_WestTCPRoute3[(gv_prologue.lv_mission04EastCargoTruck2CurrentIndex - 1)]);
        }

    }
    else if (auto9126C97E_val == RegionFromId(140)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/5C3BBCA8"), gv_debug.lv_gameEvents);
        if ((gv_prologue.lv_mission04ConvoyCurrentIndex >= 0)) {
            lv_index = 0;
            for ( ; ( (auto1DCD4ABC_ai >= 0 && lv_index <= auto1DCD4ABC_ae) || (auto1DCD4ABC_ai < 0 && lv_index >= auto1DCD4ABC_ae) ) ; lv_index += auto1DCD4ABC_ai ) {
                if ((UnitIsAlive(gv_prologue.lv_mission04CargoTruckUnits[lv_index]) == true)) {
                    UnitGroupAdd(lv_cargoTruckGroup, gv_prologue.lv_mission04CargoTruckUnits[lv_index]);
                }
            }
            if ((gv_prologue.lv_mission04ConvoyCurrentIndex == 0)) {
                TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/924F0787"), gv_debug.lv_gameEvents);
                auto7944E573_g = lv_cargoTruckGroup;
                auto7944E573_u = UnitGroupCount(auto7944E573_g, c_unitCountAll);
                for (;; auto7944E573_u -= 1) {
                    auto7944E573_var = UnitGroupUnitFromEnd(auto7944E573_g, auto7944E573_u);
                    if (auto7944E573_var == null) { break; }
                    UnitIssueOrder(auto7944E573_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(50))), c_orderQueueAddToEnd);
                }
            }
            else {
                auto0D5CBB43_g = lv_cargoTruckGroup;
                auto0D5CBB43_u = UnitGroupCount(auto0D5CBB43_g, c_unitCountAll);
                for (;; auto0D5CBB43_u -= 1) {
                    auto0D5CBB43_var = UnitGroupUnitFromEnd(auto0D5CBB43_g, auto0D5CBB43_u);
                    if (auto0D5CBB43_var == null) { break; }
                    UnitIssueOrder(auto0D5CBB43_var, OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[gv_prologue.lv_mission04ConvoyCurrentIndex]), c_orderQueueAddToEnd);
                }
                gv_prologue.lv_mission04ConvoyCurrentIndex -= 1;
                RegionSetCenter(RegionFromId(140), gv_prologue.lv_WestTCPRoute2[(gv_prologue.lv_mission04ConvoyCurrentIndex + 1)]);
            }
        }

    }
    else {
    }
    if ((libNtve_gf_UnitGroupIsDead(gv_prologue.lv_mission04CargoTruckUnitGroup) == true)) {
        gv_prologue.lv_mission04TrucksExitingTown = true;
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/EC5E47B9"));
        Wait(3.0, c_timeGame);
        gf_MoveOutConvoy();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CargoTruckMovement_Init () {
    gt_CargoTruckMovement = TriggerCreate("gt_CargoTruckMovement_Func");
    TriggerEnable(gt_CargoTruckMovement, false);
    TriggerAddEventUnitRegion(gt_CargoTruckMovement, UnitRefFromVariable("gv_prologue.lv_mission04CargoTruckUnits[0]"), RegionFromId(134), true);
    TriggerAddEventUnitRegion(gt_CargoTruckMovement, UnitRefFromVariable("gv_prologue.lv_mission04CargoTruckUnits[3]"), RegionFromId(139), true);
    TriggerAddEventUnitRegion(gt_CargoTruckMovement, UnitRefFromVariable("gv_prologue.lv_mission04CargoTruckUnits[1]"), RegionFromId(135), true);
    TriggerAddEventUnitRegion(gt_CargoTruckMovement, UnitRefFromVariable("gv_prologue.lv_mission04CargoTruckUnits[4]"), RegionFromId(138), true);
    TriggerAddEventUnitRegion(gt_CargoTruckMovement, UnitRefFromVariable("gv_prologue.lv_mission04CargoTruckUnits[2]"), RegionFromId(136), true);
    TriggerAddEventUnitRegion(gt_CargoTruckMovement, UnitRefFromVariable("gv_prologue.lv_mission04CargoTruckUnits[5]"), RegionFromId(137), true);
    TriggerAddEventUnitRegion(gt_CargoTruckMovement, UnitRefFromVariable("gv_prologue.lv_mission04CargoTruckUnits[0]"), RegionFromId(140), true);
    TriggerAddEventUnitRegion(gt_CargoTruckMovement, UnitRefFromVariable("gv_prologue.lv_mission04CargoTruckUnits[3]"), RegionFromId(140), true);
    TriggerAddEventUnitRegion(gt_CargoTruckMovement, UnitRefFromVariable("gv_prologue.lv_mission04CargoTruckUnits[1]"), RegionFromId(140), true);
    TriggerAddEventUnitRegion(gt_CargoTruckMovement, UnitRefFromVariable("gv_prologue.lv_mission04CargoTruckUnits[4]"), RegionFromId(140), true);
    TriggerAddEventUnitRegion(gt_CargoTruckMovement, UnitRefFromVariable("gv_prologue.lv_mission04CargoTruckUnits[2]"), RegionFromId(140), true);
    TriggerAddEventUnitRegion(gt_CargoTruckMovement, UnitRefFromVariable("gv_prologue.lv_mission04CargoTruckUnits[5]"), RegionFromId(140), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cargo Truck Death
//--------------------------------------------------------------------------------------------------
bool gt_CargoTruckDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_trucksAlive;
    int lv_index;

    // Automatic Variable Declarations
    const int autoB36D5D93_ae = 5;
    const int autoB36D5D93_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/F8FDDB31"), gv_debug.lv_gameEvents);
    if ((gv_prologue.lv_mission04TruckLost == false)) {
        gv_prologue.lv_mission04TruckLost = true;
    }
    UnitGroupRemove(gv_prologue.lv_mission04CargoTruckUnitGroup, EventUnit());
    lib90F7C81D_gf_RemoveMinimapPingIndex(EventUnit());
    if ((libNtve_gf_UnitGroupIsDead(gv_prologue.lv_mission04CargoTruckUnitGroup) == true) && (gv_prologue.lv_mission04ConvoySecondWaveSpawned == true)) {
        lv_index = 0;
        for ( ; ( (autoB36D5D93_ai >= 0 && lv_index <= autoB36D5D93_ae) || (autoB36D5D93_ai < 0 && lv_index >= autoB36D5D93_ae) ) ; lv_index += autoB36D5D93_ai ) {
            if ((UnitIsAlive(gv_prologue.lv_mission04CargoTruckUnits[lv_index]) == true)) {
                lv_trucksAlive = true;
                break;
            }
            Wait(0.0625, c_timeGame);
        }
        if ((lv_trucksAlive == true)) {
            gv_prologue.lv_mission04TrucksExitingTown = true;
            lib90F7C81D_gf_MissionText(StringExternal("Param/Value/B9046515"));
            Wait(3.0, c_timeGame);
            gf_MoveOutConvoy();
        }
        else {
            TriggerEnable(TriggerGetCurrent(), false);
            TriggerExecute(gt_EscortCargoTrucksEnd, true, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CargoTruckDeath_Init () {
    gt_CargoTruckDeath = TriggerCreate("gt_CargoTruckDeath_Func");
    TriggerEnable(gt_CargoTruckDeath, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cargo Truck Exit
//--------------------------------------------------------------------------------------------------
bool gt_CargoTruckExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB8550B38_g;
    int autoB8550B38_u;
    unit autoB8550B38_var;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/0AECD35C"), gv_debug.lv_gameEvents);
    libNtve_gf_ShowHideUnit(EventUnit(), false);
    UnitRemove(EventUnit());
    lib90F7C81D_gf_RemoveMinimapPingIndex(EventUnit());
    gv_prologue.lv_mission04SuccessfullyEscortedTrucks += 1;
    TextExpressionSetToken("Param/Expression/9144C3EB", "A", IntToText(gv_prologue.lv_mission04SuccessfullyEscortedTrucks));
    TextExpressionSetToken("Param/Expression/9144C3EB", "B", IntToText(gv_prologue.lv_mission04TrucksEscortedToTown));
    ObjectiveSetName(lib90F7C81D_gv_secondObj, TextExpressionAssemble("Param/Expression/9144C3EB"));
    if ((libNtve_gf_UnitGroupIsDead(gv_prologue.lv_mission04CargoTruckUnitGroup) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        autoB8550B38_g = gv_prologue.lv_mission04CargoTruckUnitGroup;
        autoB8550B38_u = UnitGroupCount(autoB8550B38_g, c_unitCountAll);
        for (;; autoB8550B38_u -= 1) {
            autoB8550B38_var = UnitGroupUnitFromEnd(autoB8550B38_g, autoB8550B38_u);
            if (autoB8550B38_var == null) { break; }
            UnitRemove(autoB8550B38_var);
        }
        TriggerExecute(gt_EscortCargoTrucksEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CargoTruckExit_Init () {
    gt_CargoTruckExit = TriggerCreate("gt_CargoTruckExit_Func");
    TriggerEnable(gt_CargoTruckExit, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cargo Truck Unstuck
//--------------------------------------------------------------------------------------------------
bool gt_CargoTruckUnstuck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    unitgroup auto6F5C2C4B_g;
    int auto6F5C2C4B_u;
    unit auto6F5C2C4B_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/72BA9D61"), gv_debug.lv_gameEvents);
    if ((TriggerIsEnabled(gt_CargoTruckExit) == true)) {
        auto6F5C2C4B_g = gv_prologue.lv_mission04CargoTruckUnitGroup;
        auto6F5C2C4B_u = UnitGroupCount(auto6F5C2C4B_g, c_unitCountAll);
        for (;; auto6F5C2C4B_u -= 1) {
            auto6F5C2C4B_var = UnitGroupUnitFromEnd(auto6F5C2C4B_g, auto6F5C2C4B_u);
            if (auto6F5C2C4B_var == null) { break; }
            UnitIssueOrder(auto6F5C2C4B_var, OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[gv_prologue.lv_mission04ConvoyCurrentIndex]), c_orderQueueReplace);
        }
    }
    else {
        if ((UnitHasBehavior2(gv_prologue.lv_mission04CargoTruckUnits[0], "LMTVAntiStuck") == true) && (UnitGetPosition(gv_prologue.lv_mission04CargoTruckUnits[0]) == UnitGetGoalPosition(gv_prologue.lv_mission04CargoTruckUnits[0]))) {
            TriggerDebugOutput(1, StringExternal("Param/Value/5D4DBF71"), true);
            UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[0], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute[gv_prologue.lv_mission04WestCargoTruckCurrentIndex]), c_orderQueueReplace);
        }
        if ((UnitHasBehavior2(gv_prologue.lv_mission04CargoTruckUnits[1], "LMTVAntiStuck") == true) && (UnitGetPosition(gv_prologue.lv_mission04CargoTruckUnits[1]) == UnitGetGoalPosition(gv_prologue.lv_mission04CargoTruckUnits[1]))) {
            TriggerDebugOutput(1, StringExternal("Param/Value/A418A5D0"), true);
            UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[1], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[gv_prologue.lv_mission04SouthCargoTruckCurrentIndex]), c_orderQueueReplace);
        }
        if ((UnitHasBehavior2(gv_prologue.lv_mission04CargoTruckUnits[2], "LMTVAntiStuck") == true) && (UnitGetPosition(gv_prologue.lv_mission04CargoTruckUnits[2]) == UnitGetGoalPosition(gv_prologue.lv_mission04CargoTruckUnits[2]))) {
            TriggerDebugOutput(1, StringExternal("Param/Value/45D741BD"), true);
            UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[2], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute3[gv_prologue.lv_mission04EastCargoTruckCurrentIndex]), c_orderQueueReplace);
        }
        if ((UnitHasBehavior2(gv_prologue.lv_mission04CargoTruckUnits[3], "LMTVAntiStuck") == true) && (UnitGetPosition(gv_prologue.lv_mission04CargoTruckUnits[3]) == UnitGetGoalPosition(gv_prologue.lv_mission04CargoTruckUnits[3]))) {
            TriggerDebugOutput(1, StringExternal("Param/Value/F24B7AB3"), true);
            UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[3], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute[gv_prologue.lv_mission04WestCargoTruck2CurrentIndex]), c_orderQueueReplace);
        }
        if ((UnitHasBehavior2(gv_prologue.lv_mission04CargoTruckUnits[4], "LMTVAntiStuck") == true) && (UnitGetPosition(gv_prologue.lv_mission04CargoTruckUnits[4]) == UnitGetGoalPosition(gv_prologue.lv_mission04CargoTruckUnits[4]))) {
            TriggerDebugOutput(1, StringExternal("Param/Value/A109E2D6"), true);
            UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[4], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute2[gv_prologue.lv_mission04SouthCargoTruck2CurrentIndex]), c_orderQueueReplace);
        }
        if ((UnitHasBehavior2(gv_prologue.lv_mission04CargoTruckUnits[5], "LMTVAntiStuck") == true) && (UnitGetPosition(gv_prologue.lv_mission04CargoTruckUnits[5]) == UnitGetGoalPosition(gv_prologue.lv_mission04CargoTruckUnits[5]))) {
            TriggerDebugOutput(1, StringExternal("Param/Value/B07E2537"), true);
            UnitIssueOrder(gv_prologue.lv_mission04CargoTruckUnits[5], OrderTargetingPoint(AbilityCommand("move", 0), gv_prologue.lv_WestTCPRoute3[gv_prologue.lv_mission04EastCargoTruck2CurrentIndex]), c_orderQueueReplace);
        }
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CargoTruckUnstuck_Init () {
    gt_CargoTruckUnstuck = TriggerCreate("gt_CargoTruckUnstuck_Func");
    TriggerEnable(gt_CargoTruckUnstuck, false);
    TriggerAddEventPlayerEffectUsed(gt_CargoTruckUnstuck, 0, "LMTVAntiStuck");
    TriggerAddEventPlayerEffectUsed(gt_CargoTruckUnstuck, 0, "ConvoyAntiStuck");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Engineer Escort Setup
//--------------------------------------------------------------------------------------------------
bool gt_EngineerEscortSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    unit lv_engineer;
    int lv_min;
    int lv_max;

    // Automatic Variable Declarations
    int auto31B44F8B_val;
    const int auto60DA948D_ae = 5;
    const int auto60DA948D_ai = 1;
    fixed auto2C427588_at;

    // Variable Initialization
    lv_min = 3;
    lv_max = 5;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_campaign.lv_missionCompleted = 0;
    gf_AddHeroLevels(1);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/DCB9B213"), gv_debug.lv_gameEvents);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/1710C4ED"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/D0208BA9"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/2B4B96CD"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/8D8182D3"));
    Wait(5.0, c_timeGame);
    TextExpressionSetToken("Param/Expression/BA75CF01", "A", IntToText(gv_chapter_1.lv_mission05VehicleRepairCount));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/BA75CF01"), StringExternal("Param/Value/D3F7E9C8"), c_objectiveStateActive, true);
    lib90F7C81D_gv_mainObj = ObjectiveLastCreated();
    auto31B44F8B_val = lib90F7C81D_gf_GameMode();
    if (auto31B44F8B_val == 2) {
        CatalogFieldValueModify(c_gameCatalogBehavior, "RepairingVehicle", "Duration", 0, "30", c_upgradeOperationSet);
    }
    else if (auto31B44F8B_val == 3) {
        CatalogFieldValueModify(c_gameCatalogBehavior, "RepairingVehicle", "Duration", 0, "45", c_upgradeOperationSet);
    }
    else if (auto31B44F8B_val == 4) {
        CatalogFieldValueModify(c_gameCatalogBehavior, "RepairingVehicle", "Duration", 0, "60", c_upgradeOperationSet);
    }
    else if (auto31B44F8B_val == 5) {
        CatalogFieldValueModify(c_gameCatalogBehavior, "RepairingVehicle", "Duration", 0, "90", c_upgradeOperationSet);
    }
    else {
    }
    lv_index = 0;
    for ( ; ( (auto60DA948D_ai >= 0 && lv_index <= auto60DA948D_ae) || (auto60DA948D_ai < 0 && lv_index >= auto60DA948D_ae) ) ; lv_index += auto60DA948D_ai ) {
        UnitCreate(1, "MATVConvoy", 0, 0, PointFromName("Mission05.M-ATV_" + IntToString(lv_index + 1)), PointGetFacing(PointFromName("Mission05.M-ATV_" + IntToString(lv_index + 1))));
        gv_chapter_1.lv_mission05MATVUnit[lv_index] = UnitLastCreated();
        UnitBehaviorAdd(gv_chapter_1.lv_mission05MATVUnit[lv_index], "Unpowered", gv_chapter_1.lv_mission05MATVUnit[lv_index], 1);
        UnitBehaviorRemove(gv_chapter_1.lv_mission05MATVUnit[lv_index], "ConvoyAntiStuck", 1);
        UnitBehaviorRemove(gv_chapter_1.lv_mission05MATVUnit[lv_index], "ConjoinATV", 1);
        UnitSetPropertyFixed(gv_chapter_1.lv_mission05MATVUnit[lv_index], c_unitPropLifeMax, 800.0);
        UnitSetPropertyFixed(gv_chapter_1.lv_mission05MATVUnit[lv_index], c_unitPropShieldsMax, 800.0);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromName("Mission05.M-ATV_" + IntToString(lv_index + 1)), ColorWithAlpha(0.00, 100.00, 25.10, 0.00), 0.0, 270.0);
        gv_chapter_1.lv_mission05MATVLocationPing[lv_index] = PingLastCreated();
        PingSetScale(gv_chapter_1.lv_mission05MATVLocationPing[lv_index], 0.75);
        PingSetTooltip(gv_chapter_1.lv_mission05MATVLocationPing[lv_index], StringExternal("Param/Value/03F0E607"));
        PingSetVisible(gv_chapter_1.lv_mission05MATVLocationPing[lv_index], false);
        gv_chapter_1.lv_mission05RepairPoint[lv_index] = PointFromName("Mission05.Repair_" + IntToString(lv_index + 1));
        libNtve_gf_CreateModelAtPoint("BriefingHighlight", gv_chapter_1.lv_mission05RepairPoint[lv_index]);
        gv_chapter_1.lv_mission05ActorBeacon[lv_index] = libNtve_gf_ActorLastCreated();
        ActorSend(gv_chapter_1.lv_mission05ActorBeacon[lv_index], "SetScale 0.500000");
    }
    if ((RandomInt(1, 2) == 2)) {
        gv_chapter_1.lv_mission05Route = 2;
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/864DEA1D"), gv_debug.lv_gameEvents);
    }
    else {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/13D06891"), gv_debug.lv_gameEvents);
    }
    TriggerEnable(gt_EngineerEntersRepairPoint, true);
    TriggerEnable(gt_EngineerDeath, true);
    TriggerEnable(gt_EngineerRepairedVehicle, true);
    TriggerEnable(gt_EngineerMissionEnd, true);
    libNtve_gf_CreateModelAtPoint("BriefingUnitSelectLarge", RegionGetCenter(RegionFromId(46)));
    ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.750000");
    gv_chapter_1.lv_mission05ActorDummy = libNtve_gf_ActorLastCreated();
    UnitCreate(1, "StandHereText", 0, 0, RegionGetCenter(RegionFromId(46)), 270.0);
    gv_chapter_1.lv_mission05TextDummy = UnitLastCreated();
    gf_TextActorAnim(gv_prologue.lv_mission00TextDummy, "StandingLocationTextBox/Image");
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(46)), ColorWithAlpha(0.00, 25.10, 0.00, 0.00), 30.0, 270.0);
    auto2C427588_at = 0;
    while (!((libNtve_gf_UnitInRegion(UnitGroupRandomUnit(lib90F7C81D_gv_heroesGroup, c_unitCountAlive), RegionFromId(204)) == true)) && auto2C427588_at <= 60.0) {
        Wait(1.0, c_timeGame);
        auto2C427588_at = auto2C427588_at + 1.0;
    }
    PingDestroy(PingLastCreated());
    gf_StartEngineerRoute();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EngineerEscortSetup_Init () {
    gt_EngineerEscortSetup = TriggerCreate("gt_EngineerEscortSetup_Func");
    TriggerEnable(gt_EngineerEscortSetup, false);
    lib90F7C81D_gf_CampaignEvent(gt_EngineerEscortSetup, "Chapter-1.Mission1");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Engineer Enters Repair Point
//--------------------------------------------------------------------------------------------------
bool gt_EngineerEntersRepairPoint_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "RepairingVehicle", EventUnit(), 1);
    if ((gv_chapter_1.lv_mission05RepairStarted == false)) {
        gv_chapter_1.lv_mission05RepairStarted = true;
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/EBFFC77E"));
    }
    TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/5BA98B08") + IntToText(gv_chapter_1.lv_mission05Route) + StringExternal("Param/Value/DE83350F")), gv_debug.lv_gameEvents);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EngineerEntersRepairPoint_Init () {
    gt_EngineerEntersRepairPoint = TriggerCreate("gt_EngineerEntersRepairPoint_Func");
    TriggerEnable(gt_EngineerEntersRepairPoint, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Engineer Repaired Vehicle
//--------------------------------------------------------------------------------------------------
bool gt_EngineerRepairedVehicle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoA438C7FB_ae = 5;
    const int autoA438C7FB_ai = 1;
    fixed autoE0A6D6AF_at;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_chapter_1.lv_mission05VehicleRepairCount += 1;
    gv_chapter_1.lv_mission05EngineerMax -= 1;
    lib90F7C81D_gf_RemoveMinimapPingIndex(EventPlayerEffectUsedUnit(c_effectUnitSource));
    TextExpressionSetToken("Param/Expression/934792BA", "A", IntToText(gv_chapter_1.lv_mission05VehicleRepairCount));
    ObjectiveSetName(lib90F7C81D_gv_mainObj, TextExpressionAssemble("Param/Expression/934792BA"));
    lv_index = 0;
    for ( ; ( (autoA438C7FB_ai >= 0 && lv_index <= autoA438C7FB_ae) || (autoA438C7FB_ai < 0 && lv_index >= autoA438C7FB_ae) ) ; lv_index += autoA438C7FB_ai ) {
        if ((EventPlayerEffectUsedUnit(c_effectUnitSource) == gv_chapter_1.lv_mission05EngineerUnit[lv_index])) {
            TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/56129818") + IntToText(gv_chapter_1.lv_mission05Route) + StringExternal("Param/Value/5A94EEB9") + StringExternal("Param/Value/069535B7") + IntToText(lv_index)), gv_debug.lv_gameEvents);
            TextExpressionSetToken("Param/Expression/B0AC68F7", "A", IntToText(gv_chapter_1.lv_mission05VehicleRepairCount));
            lib90F7C81D_gf_MissionText(TextExpressionAssemble("Param/Expression/B0AC68F7"));
            PingDestroy(gv_chapter_1.lv_mission05MATVLocationPing[lv_index]);
            libNtve_gf_KillModel(gv_chapter_1.lv_mission05ActorBeacon[lv_index]);
            gv_chapter_1.lv_mission05MATVRepaired[lv_index] = true;
            UnitGroupRemove(gv_chapter_1.lv_mission05EngineerGroup, EventPlayerEffectUsedUnit(c_effectUnitSource));
            UnitRemove(EventPlayerEffectUsedUnit(c_effectUnitSource));
        }
    }
    TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/F2B074D5") + IntToText(gv_chapter_1.lv_mission05Route) + StringExternal("Param/Value/5CC7E7A8") + StringExternal("Param/Value/7FEDC42F") + IntToText(gv_chapter_1.lv_mission05EngineerMax)), gv_debug.lv_gameEvents);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/BD698846") + IntToText(gv_chapter_1.lv_mission05VehicleRepairCount)), gv_debug.lv_gameEvents);
    if ((gv_chapter_1.lv_mission05EngineerMax == 0)) {
        if ((gv_chapter_1.lv_mission05RouteCount == 1)) {
            lib90F7C81D_gf_MissionText(StringExternal("Param/Value/7934F96E"));
            Wait(2.0, c_timeGame);
            libNtve_gf_CreateModelAtPoint("BriefingUnitSelectLarge", RegionGetCenter(RegionFromId(46)));
            ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.750000");
            gv_chapter_1.lv_mission05ActorDummy = libNtve_gf_ActorLastCreated();
            UnitCreate(1, "StandHereText", 0, 0, RegionGetCenter(RegionFromId(46)), 270.0);
            gv_chapter_1.lv_mission05TextDummy = UnitLastCreated();
            gf_TextActorAnim(gv_prologue.lv_mission00TextDummy, "StandingLocationTextBox/Image");
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(46)), ColorWithAlpha(0.00, 25.10, 0.00, 0.00), 30.0, 270.0);
            autoE0A6D6AF_at = 0;
            while (!((libNtve_gf_UnitInRegion(UnitGroupRandomUnit(lib90F7C81D_gv_heroesGroup, c_unitCountAlive), RegionFromId(204)) == true)) && autoE0A6D6AF_at <= 90.0) {
                Wait(1.0, c_timeGame);
                autoE0A6D6AF_at = autoE0A6D6AF_at + 1.0;
            }
            PingDestroy(PingLastCreated());
            gf_StartEngineerRoute();
        }
        else {
            TriggerEnable(TriggerGetCurrent(), false);
            TriggerEnable(gt_EngineerDeath, false);
            TriggerEnable(gt_EngineerEntersRepairPoint, false);
            TriggerExecute(gt_EngineerMissionEnd, true, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EngineerRepairedVehicle_Init () {
    gt_EngineerRepairedVehicle = TriggerCreate("gt_EngineerRepairedVehicle_Func");
    TriggerEnable(gt_EngineerRepairedVehicle, false);
    TriggerAddEventPlayerEffectUsed(gt_EngineerRepairedVehicle, 0, "VehicleRepaired3");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Engineer Death
//--------------------------------------------------------------------------------------------------
bool gt_EngineerDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_min;
    int lv_max;

    // Automatic Variable Declarations
    const int auto8EC44882_ae = 5;
    const int auto8EC44882_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gf_RemoveMinimapPingIndex(EventUnit());
    gv_chapter_1.lv_mission05EngineerMax -= 1;
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/1C2B5C15"));
    lv_index = 0;
    for ( ; ( (auto8EC44882_ai >= 0 && lv_index <= auto8EC44882_ae) || (auto8EC44882_ai < 0 && lv_index >= auto8EC44882_ae) ) ; lv_index += auto8EC44882_ai ) {
        if ((gv_chapter_1.lv_mission05EngineerUnit[lv_index] == EventUnit())) {
            TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/A1C6FBB7") + IntToText(gv_chapter_1.lv_mission05Route) + StringExternal("Param/Value/FEA6FEAB") + StringExternal("Param/Value/DADB08B3") + IntToText(lv_index)), gv_debug.lv_gameEvents);
            PingDestroy(gv_chapter_1.lv_mission05MATVLocationPing[lv_index]);
            libNtve_gf_KillModel(gv_chapter_1.lv_mission05ActorBeacon[lv_index]);
            UnitGroupRemove(gv_chapter_1.lv_mission05EngineerGroup, EventUnit());
        }
    }
    TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/E194DD96") + IntToText(gv_chapter_1.lv_mission05Route) + StringExternal("Param/Value/BEB9B1A1") + StringExternal("Param/Value/7B9F4748") + IntToText(gv_chapter_1.lv_mission05EngineerMax)), gv_debug.lv_gameEvents);
    if ((UnitGroupCount(gv_chapter_1.lv_mission05EngineerGroup, c_unitCountAlive) == 0)) {
        if ((gv_chapter_1.lv_mission05RouteCount == 1)) {
            gf_StartEngineerRoute();
        }
        else {
            TriggerEnable(TriggerGetCurrent(), false);
            TriggerEnable(gt_EngineerRepairedVehicle, false);
            TriggerEnable(gt_EngineerEntersRepairPoint, false);
            TriggerExecute(gt_EngineerMissionEnd, true, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EngineerDeath_Init () {
    gt_EngineerDeath = TriggerCreate("gt_EngineerDeath_Func");
    TriggerEnable(gt_EngineerDeath, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Engineer Mission End
//--------------------------------------------------------------------------------------------------
bool gt_EngineerMissionEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoB15FB726_ae = 5;
    const int autoB15FB726_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_chapter_1.lv_mission05VehicleRepairCount >= 1)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/CC223BCE"), gv_debug.lv_gameEvents);
        gv_campaign.lv_missionCompleted += 1;
        gv_chapter_1.lv_passRate[0] = true;
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
        gf_AddHalfHeroLevel();
        if ((gv_chapter_1.lv_mission05VehicleRepairCount == 6)) {
            lib90F7C81D_gf_AwardAchievement(58);
        }
        gf_XPGainGlobal(FixedToInt((gv_chapter_1.lv_mission05VehicleRepairCount * lib90F7C81D_gf_GetModeXP("c1.1 Engineers"))), (StringExternal("Param/Value/6D149323") + IntToText(gv_chapter_1.lv_mission05VehicleRepairCount)));
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/C8216356"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/911DAC65"));
    }
    else {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/10C0E63E"), gv_debug.lv_gameEvents);
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateFailed);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/F336F9F1"));
    }
    lv_index = 0;
    for ( ; ( (autoB15FB726_ai >= 0 && lv_index <= autoB15FB726_ae) || (autoB15FB726_ai < 0 && lv_index >= autoB15FB726_ae) ) ; lv_index += autoB15FB726_ai ) {
        gv_chapter_1.lv_mission05MATVLocationPing[lv_index] = c_invalidPingId;
        if ((gv_chapter_1.lv_mission05MATVRepaired[lv_index] == false)) {
            gv_chapter_1.lv_mission05MATVUnit[lv_index] = null;
        }
        gv_chapter_1.lv_mission05RepairPoint[lv_index] = null;
        gv_chapter_1.lv_mission05ActorBeacon[lv_index] = null;
    }
    Wait(2.0, c_timeGame);
    TriggerDestroy(gt_EngineerEntersRepairPoint);
    TriggerDestroy(gt_EngineerDeath);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateHidden);
    Wait(RandomFixed(20.0, 40.0), c_timeGame);
    if ((gv_campaign.lv_singleMission == false)) {
        TriggerEnable(gt_AkmasRevengeSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-1.Mission2");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EngineerMissionEnd_Init () {
    gt_EngineerMissionEnd = TriggerCreate("gt_EngineerMissionEnd_Func");
    TriggerEnable(gt_EngineerMissionEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Akma's Revenge Setup
//--------------------------------------------------------------------------------------------------
bool gt_AkmasRevengeSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    region lv_indexSwap;
    int lv_rand;

    // Automatic Variable Declarations
    int autoC6199463_val;
    const int auto93367F4F_ae = 6;
    const int auto93367F4F_ai = 1;
    int auto0AA04213_ae;
    const int auto0AA04213_ai = 1;
    playergroup autoA58DFD82_g;
    int autoA58DFD82_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_UndeadGroupFilter(ge_UndeadUnitFilter_All, true);
    gf_UndeadGroupFilter(ge_UndeadUnitFilter_Cloaked, false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/20C92292"), gv_debug.lv_gameEvents);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/BD9461AF"));
    Wait(7.0, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/4A7DB9DD"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/91B8614D"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/8C283FED"));
    Wait(5.0, c_timeGame);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/AkmasRevengeUI");
    gv_chapter_1.lv_mission06ProgressFrame = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeProgressBar, "UIContainer/FullscreenUpperContainer/AkmasRevengeUI/ProgressBar");
    gv_chapter_1.lv_mission06ProgressBar = DialogControlLastCreated();
    autoC6199463_val = lib90F7C81D_gf_GameMode();
    if (autoC6199463_val == 2) {
        gv_chapter_1.lv_mission06SiloMin = 2;
        gv_chapter_1.lv_mission06SiloMax = 5;
    }
    else if (autoC6199463_val == 3) {
        gv_chapter_1.lv_mission06SiloMin = 2;
        gv_chapter_1.lv_mission06SiloMax = 5;
    }
    else if (autoC6199463_val == 4) {
        gv_chapter_1.lv_mission06SiloMin = 1;
        gv_chapter_1.lv_mission06SiloMax = 6;
    }
    else if (autoC6199463_val == 5) {
        gv_chapter_1.lv_mission06SiloMax = 7;
    }
    else {
        gv_chapter_1.lv_mission06SiloMin = 3;
        gv_chapter_1.lv_mission06SiloMax = 4;
    }
    TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/4CC5294C") + IntToText(gv_chapter_1.lv_mission06SiloMax)), gv_debug.lv_gameEvents);
    lv_index = 0;
    for ( ; ( (auto93367F4F_ai >= 0 && lv_index <= auto93367F4F_ae) || (auto93367F4F_ai < 0 && lv_index >= auto93367F4F_ae) ) ; lv_index += auto93367F4F_ai ) {
        gv_chapter_1.lv_mission06SiloRegion[lv_index] = RegionFromName("Silo " + (IntToString(lv_index)));
    }
    auto0AA04213_ae = (6 - 1);
    lv_index = gv_chapter_1.lv_mission06SiloMin;
    for ( ; ( (auto0AA04213_ai >= 0 && lv_index <= auto0AA04213_ae) || (auto0AA04213_ai < 0 && lv_index >= auto0AA04213_ae) ) ; lv_index += auto0AA04213_ai ) {
        lv_rand = RandomInt(lv_index, 6);
        if ((lv_rand != lv_index)) {
            lv_indexSwap = gv_chapter_1.lv_mission06SiloRegion[lv_rand];
            gv_chapter_1.lv_mission06SiloRegion[lv_rand] = gv_chapter_1.lv_mission06SiloRegion[lv_index];
            gv_chapter_1.lv_mission06SiloRegion[lv_index] = lv_indexSwap;
        }
    }
    autoA58DFD82_g = lib90F7C81D_gv_players;
    autoA58DFD82_var = -1;
    while (true) {
        autoA58DFD82_var = PlayerGroupNextPlayer(autoA58DFD82_g, autoA58DFD82_var);
        if (autoA58DFD82_var < 0) { break; }
        TriggerAddEventUnitRegion(gt_MeetFarmerBlackma, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lib90F7C81D_gv_playerHeroes[autoA58DFD82_var])), RegionFromId(197), true);
        TriggerAddEventUnitRegion(gt_MeetFarmerBlackma, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lib90F7C81D_gv_playerHeroes[autoA58DFD82_var])), RegionFromId(197), false);
        TriggerAddEventUnitRegion(gt_FoodSampleCollected, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lib90F7C81D_gv_playerHeroes[autoA58DFD82_var])), RegionFromId(64), true);
    }
    if ((gv_prologue.lv_mission03TotalReservists >= 1)) {
        TriggerEnable(gt_ReservistEscort, true);
    }
    UnitCreate(1, "FarmerBlackma", 0, 0, PointFromId(1303378824), PointGetFacing(PointFromId(1303378824)));
    gv_chapter_1.lv_mission06FarmerBlackma = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(gv_chapter_1.lv_mission06FarmerBlackma, true);
    lib90F7C81D_gf_StoreMinimapPings(gv_chapter_1.lv_mission06FarmerBlackma, StringExternal("Param/Value/281C8CDE"), Color(100.00, 0.00, 100.00), 0.5);
    TriggerAddEventUnitDied(gt_FarmerBlackmaDeath, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(gv_chapter_1.lv_mission06FarmerBlackma)));
    TriggerAddEventUnitDamaged(gt_FarmerBlackmaDamaged, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(gv_chapter_1.lv_mission06FarmerBlackma)), c_unitDamageTypeAny, c_unitDamageEither, null);
    ObjectiveCreate(StringExternal("Param/Value/8E2307FF"), StringExternal("Param/Value/86349D5E"), c_objectiveStateActive, true);
    lib90F7C81D_gv_mainObj = ObjectiveLastCreated();
    TriggerEnable(gt_MeetFarmerBlackma, true);
    TriggerEnable(gt_FarmerBlackmaDamaged, true);
    TriggerEnable(gt_FarmerBlackmaDeath, true);
    TimerStart(lib90F7C81D_gv_missiontimer, 60.0, false, c_timeGame);
    gf_CampaignScriptedSpawns(gv_campaign_Missions.lv_mission06Akma);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AkmasRevengeSetup_Init () {
    gt_AkmasRevengeSetup = TriggerCreate("gt_AkmasRevengeSetup_Func");
    TriggerEnable(gt_AkmasRevengeSetup, false);
    lib90F7C81D_gf_CampaignEvent(gt_AkmasRevengeSetup, "Chapter-1.Mission2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Meet Farmer Blackma
//--------------------------------------------------------------------------------------------------
bool gt_MeetFarmerBlackma_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/AD5209E8"), gv_debug.lv_gameEvents);
    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_StopTimer(lib90F7C81D_gv_missiontimer);
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
    if ((TriggerIsEnabled(gt_ReservistEscort) == true)) {
        TriggerExecute(gt_ReservistEscort, true, false);
    }
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/5BD04210"));
    Wait(5.0, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/BB392422"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/B6D49262"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/D8E8710E"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/33613220"));
    Wait(5.0, c_timeGame);
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateHidden);
    libNtve_gf_MakeUnitInvulnerable(gv_chapter_1.lv_mission06FarmerBlackma, false);
    TriggerEnable(gt_FoodSampleCollected, true);
    TriggerEnable(gt_SiloLoop, true);
    TriggerExecute(gt_SiloLoop, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MeetFarmerBlackma_Init () {
    gt_MeetFarmerBlackma = TriggerCreate("gt_MeetFarmerBlackma_Func");
    TriggerEnable(gt_MeetFarmerBlackma, false);
    TriggerAddEventTimer(gt_MeetFarmerBlackma, lib90F7C81D_gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Silo Loop
//--------------------------------------------------------------------------------------------------
bool gt_SiloLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    unit lv_foodSample;
    bool lv_siloFinished;
    int lv_siloPing;
    bool lv_siloStarted;

    // Automatic Variable Declarations
    const int auto20C8698B_ae = 6;
    const int auto20C8698B_ai = 1;
    int autoB313DF6F_val;

    // Variable Initialization
    lv_siloPing = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, "ColonistShipFlying", 0, 13, PointFromId(1018635163), 65.0);
    lib90F7C81D_gv_lastlandedphantom = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(lib90F7C81D_gv_lastlandedphantom, true);
    UnitIssueOrder(lib90F7C81D_gv_lastlandedphantom, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), PointFromId(2019557006)), c_orderQueueReplace);
    UnitSetHeight(lib90F7C81D_gv_lastlandedphantom, 3.0, 10.0);
    UnitWeaponRemove(lib90F7C81D_gv_lastlandedphantom, "PhantomTurret");
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(lib90F7C81D_gv_lastlandedphantom), ColorWithAlpha(0.00, 100.00, 100.00, 0.00), 0.0, 270.0);
    gv_chapter_1.lv_mission06PhantomPing = PingLastCreated();
    PingSetUnit(gv_chapter_1.lv_mission06PhantomPing, lib90F7C81D_gv_lastlandedphantom);
    PingSetTooltip(gv_chapter_1.lv_mission06PhantomPing, StringExternal("Param/Value/EBCEA160"));
    TextExpressionSetToken("Param/Expression/A9962F13", "A", IntToText(gv_chapter_1.lv_mission06SiloCompletedCount));
    TextExpressionSetToken("Param/Expression/A9962F13", "B", IntToText(gv_chapter_1.lv_mission06SiloMax));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/A9962F13"), StringExternal("Param/Value/76D3CC44"), c_objectiveStateActive, true);
    lib90F7C81D_gv_mainObj = ObjectiveLastCreated();
    TextExpressionSetToken("Param/Expression/C49616EF", "A", IntToText(gv_chapter_1.lv_mission06SampleCollectedCount));
    TextExpressionSetToken("Param/Expression/C49616EF", "B", IntToText(gv_chapter_1.lv_mission06SiloMax));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/C49616EF"), StringExternal("Param/Value/204721F3"), c_objectiveStateActive, true);
    lib90F7C81D_gv_secondObj = ObjectiveLastCreated();
    lv_index = gv_chapter_1.lv_mission06SiloMin;
    for ( ; ( (auto20C8698B_ai >= 0 && lv_index <= auto20C8698B_ae) || (auto20C8698B_ai < 0 && lv_index >= auto20C8698B_ae) ) ; lv_index += auto20C8698B_ai ) {
        if ((TriggerIsEnabled(TriggerGetCurrent()) == true) && (lib90F7C81D_gv_gameOver == false)) {
            lv_siloFinished = false;
            lv_siloStarted = false;
            gv_chapter_1.lv_mission06SiloCollectionTime = 0.0;
            libNtve_gf_SetDialogItemCurrentValue(gv_chapter_1.lv_mission06ProgressBar, gv_chapter_1.lv_mission06SiloCollectionTime, PlayerGroupAll());
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_chapter_1.lv_mission06SiloRegion[lv_index]), ColorWithAlpha(100.00, 50.20, 0.00, 0.00), 0.0, 270.0);
            lv_siloPing = PingLastCreated();
            PingSetTooltip(lv_siloPing, StringExternal("Param/Value/B840463B"));
            TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/02A6F22B") + IntToText(lv_index)), gv_debug.lv_gameEvents);
            while ((lv_siloFinished == false) && (TriggerIsEnabled(TriggerGetCurrent()) == true) && (lib90F7C81D_gv_gameOver == false)) {
                Wait(0.0625, c_timeGame);
                if ((libNtve_gf_UnitInRegion(gv_chapter_1.lv_mission06FarmerBlackma, gv_chapter_1.lv_mission06SiloRegion[lv_index]) == false) && (lv_siloFinished == false)) {
                    if ((UnitOrderHasAbil(gv_chapter_1.lv_mission06FarmerBlackma, "move") == false)) {
                        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/99037B19"), gv_debug.lv_gameEvents);
                        UnitIssueOrder(gv_chapter_1.lv_mission06FarmerBlackma, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(gv_chapter_1.lv_mission06SiloRegion[lv_index])), c_orderQueueReplace);
                    }
                }
                else {
                    if ((UnitHasBehavior2(gv_chapter_1.lv_mission06FarmerBlackma, "CollectingFoodSample") == false) && (lv_siloStarted == false)) {
                        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/A5867E64"), gv_debug.lv_gameEvents);
                        lv_siloStarted = true;
                        UnitBehaviorAdd(gv_chapter_1.lv_mission06FarmerBlackma, "CollectingFoodSample", gv_chapter_1.lv_mission06FarmerBlackma, 1);
                        autoB313DF6F_val = lib90F7C81D_gf_GetSkillLevel();
                        if (autoB313DF6F_val == 1) {
                            gf_SpawnUnitGroupAsync("Basic", true, 10.0, RandomFixed(3.0, 9.0));
                        }
                        else if (autoB313DF6F_val == 2) {
                            gf_SpawnUnitGroupAsync("Basic", true, 10.0, RandomFixed(3.0, 9.0));
                            gf_SpawnUnitGroupAsync("Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
                        }
                        else if (autoB313DF6F_val == 3) {
                            gf_SpawnUnitGroupAsync("Assault Basic", true, 10.0, RandomFixed(3.0, 9.0));
                            gf_SpawnUnitGroupAsync("Assault Basic Air", true, 10.0, RandomFixed(3.0, 9.0));
                        }
                        else {
                        }
                        DialogControlSendAnimationEvent(gv_chapter_1.lv_mission06ProgressFrame, PlayerGroupAll(), "Display");
                    }
                    else {
                        while ((UnitHasBehavior2(gv_chapter_1.lv_mission06FarmerBlackma, "CollectingFoodSample") == true) && (TriggerIsEnabled(TriggerGetCurrent()) == true) && (lib90F7C81D_gv_gameOver == false)) {
                            gv_chapter_1.lv_mission06SiloCollectionTime += 1.0;
                            libNtve_gf_SetDialogItemCurrentValue(gv_chapter_1.lv_mission06ProgressBar, gv_chapter_1.lv_mission06SiloCollectionTime, PlayerGroupAll());
                            if ((gv_chapter_1.lv_mission06SiloCollectionTime == 25.0)) {
                                TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/7D3C0802"), gv_debug.lv_gameEvents);
                                lv_siloFinished = true;
                                gv_chapter_1.lv_mission06SiloCompletedCount += 1;
                                TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/D231BE8E") + IntToText(gv_chapter_1.lv_mission06SiloCompletedCount)), gv_debug.lv_gameEvents);
                                TextExpressionSetToken("Param/Expression/5FBD5469", "A", IntToText(gv_chapter_1.lv_mission06SiloCompletedCount));
                                TextExpressionSetToken("Param/Expression/5FBD5469", "B", IntToText(gv_chapter_1.lv_mission06SiloMax));
                                ObjectiveSetName(lib90F7C81D_gv_mainObj, TextExpressionAssemble("Param/Expression/5FBD5469"));
                                PingDestroy(lv_siloPing);
                                lv_siloPing = c_invalidPingId;
                                DialogControlSendAnimationEvent(gv_chapter_1.lv_mission06ProgressFrame, PlayerGroupAll(), "Hide");
                                UnitCreate(1, "FoodSample", 0, 0, RegionGetCenter(gv_chapter_1.lv_mission06SiloRegion[lv_index]), 270.0);
                                lib90F7C81D_gf_MissionItemPingAddItem(UnitLastCreated());
                                UnitGroupAdd(gv_chapter_1.lv_mission06FoodItemGroup, UnitLastCreated());
                                break;
                            }
                            Wait(1.0, c_timeGame);
                        }
                    }
                }
            }
        }
        else {
            break;
        }
    }
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/A7473D6B"), gv_debug.lv_gameEvents);
    gv_chapter_1.lv_mission06SiloLoopFinished = true;
    PingDestroy(lv_siloPing);
    lv_siloPing = c_invalidPingId;
    DialogControlSendAnimationEvent(gv_chapter_1.lv_mission06ProgressFrame, PlayerGroupAll(), "Hide");
    if ((TriggerIsEnabled(gt_FarmerBlackmaDeath) == true)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/DDA1CAEE"), gv_debug.lv_gameEvents);
        libNtve_gf_MakeUnitInvulnerable(gv_chapter_1.lv_mission06FarmerBlackma, true);
        TriggerEnable(gt_FarmerBlackmaDeath, false);
        TriggerEnable(gt_FoodSampleTimerEnd, true);
        if ((lib90F7C81D_gf_DifficultyisGOE(3) == true) && (TriggerIsEnabled(gt_FarmerBlackmaDamaged) == true)) {
            lib90F7C81D_gf_AwardAchievement(59);
        }
        TriggerEnable(gt_FarmerBlackmaDamaged, false);
        lib90F7C81D_gf_RemoveMinimapPingIndex(gv_chapter_1.lv_mission06FarmerBlackma);
        UnitIssueOrder(gv_chapter_1.lv_mission06FarmerBlackma, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(197))), c_orderQueueReplace);
        gv_campaign.lv_missionCompleted += 1;
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
        TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), true);
        TimerStart(lib90F7C81D_gv_missiontimer, 75.0, false, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SiloLoop_Init () {
    gt_SiloLoop = TriggerCreate("gt_SiloLoop_Func");
    TriggerEnable(gt_SiloLoop, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reservist Escort
//--------------------------------------------------------------------------------------------------
bool gt_ReservistEscort_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    unitgroup lv_policeGroup;
    fixed lv_degrees;
    fixed lv_distance;
    point lv_holdPoint;
    bool lv_farmerCollecting;

    // Automatic Variable Declarations
    int auto3A6BE284_n;
    int auto3A6BE284_i;
    unitgroup autoC28DF1B3_g;
    int autoC28DF1B3_u;
    unit autoC28DF1B3_var;
    unitgroup auto84675955_g;
    int auto84675955_u;
    unit auto84675955_var;
    unitgroup autoD2D0A03F_g;
    int autoD2D0A03F_u;
    unit autoD2D0A03F_var;

    // Variable Initialization
    lv_policeGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto3A6BE284_n = gv_prologue.lv_mission03TotalReservists;
    for (auto3A6BE284_i = 1; auto3A6BE284_i <= auto3A6BE284_n; auto3A6BE284_i += 1) {
        UnitCreate(1, "PoliceOfficer", 0, 0, RegionGetCenter(RegionFromId(62)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_policeGroup, UnitLastCreated());
    }
    while ((gv_chapter_1.lv_mission06SiloLoopFinished == false) && (TriggerIsEnabled(gt_FarmerBlackmaDeath) == true) && (UnitGroupCount(lv_policeGroup, c_unitCountAlive) >= 1) && (lib90F7C81D_gv_gameOver == false)) {
        if ((UnitHasBehavior2(gv_chapter_1.lv_mission06FarmerBlackma, "CollectingFoodSample") == true) && (lv_farmerCollecting == false)) {
            lv_farmerCollecting = true;
            auto84675955_g = lv_policeGroup;
            auto84675955_u = UnitGroupCount(auto84675955_g, c_unitCountAll);
            for (;; auto84675955_u -= 1) {
                auto84675955_var = UnitGroupUnitFromEnd(auto84675955_g, auto84675955_u);
                if (auto84675955_var == null) { break; }
                lv_holdPoint = PointWithOffsetPolar(UnitGetPosition(gv_chapter_1.lv_mission06FarmerBlackma), RandomFixed(2.5, 4.0), libNtve_gf_RandomAngle());
                UnitIssueOrder(auto84675955_var, OrderTargetingPoint(AbilityCommand("attack", 0), lv_holdPoint), c_orderQueueReplace);
            }
        }
        else {
            if ((UnitHasBehavior2(gv_chapter_1.lv_mission06FarmerBlackma, "CollectingFoodSample") == false)) {
                lv_degrees = RandomFixed(90.0, -90.0);
                lv_distance = RandomFixed(2.5, 5.0);
                if ((DistanceBetweenPoints(UnitGetPosition(gv_chapter_1.lv_mission06FarmerBlackma), UnitGroupCenterOfGroup(lv_policeGroup)) > 6.0)) {
                    UnitGroupIssueOrder(lv_policeGroup, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(gv_chapter_1.lv_mission06FarmerBlackma), lv_distance, (UnitGetFacing(gv_chapter_1.lv_mission06FarmerBlackma) + lv_degrees))), c_orderQueueReplace);
                }
                else {
                    UnitGroupIssueOrder(lv_policeGroup, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(gv_chapter_1.lv_mission06FarmerBlackma), lv_distance, (UnitGetFacing(gv_chapter_1.lv_mission06FarmerBlackma) + lv_degrees))), c_orderQueueReplace);
                }
                autoC28DF1B3_g = lv_policeGroup;
                autoC28DF1B3_u = UnitGroupCount(autoC28DF1B3_g, c_unitCountAll);
                for (;; autoC28DF1B3_u -= 1) {
                    autoC28DF1B3_var = UnitGroupUnitFromEnd(autoC28DF1B3_g, autoC28DF1B3_u);
                    if (autoC28DF1B3_var == null) { break; }
                    if ((UnitBehaviorCount(autoC28DF1B3_var, "SprintEnergy") >= 16) && (UnitHasBehavior2(autoC28DF1B3_var, "NPCSprint") == false)) {
                        UnitIssueOrder(autoC28DF1B3_var, Order(AbilityCommand("NPCSprint", 0)), c_orderQueueReplace);
                    }
                }
                if ((lv_farmerCollecting == true)) {
                    lv_farmerCollecting = false;
                }
            }
        }
        Wait(1.5, c_timeGame);
    }
    while ((UnitGroupCount(lv_policeGroup, c_unitCountAlive) >= 1)) {
        UnitGroupIssueOrder(lv_policeGroup, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(62))), c_orderQueueReplace);
        autoD2D0A03F_g = lv_policeGroup;
        autoD2D0A03F_u = UnitGroupCount(autoD2D0A03F_g, c_unitCountAll);
        for (;; autoD2D0A03F_u -= 1) {
            autoD2D0A03F_var = UnitGroupUnitFromEnd(autoD2D0A03F_g, autoD2D0A03F_u);
            if (autoD2D0A03F_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(autoD2D0A03F_var, RegionFromId(62)) == true)) {
                UnitRemove(autoD2D0A03F_var);
                UnitGroupRemove(lv_policeGroup, autoD2D0A03F_var);
            }
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReservistEscort_Init () {
    gt_ReservistEscort = TriggerCreate("gt_ReservistEscort_Func");
    TriggerEnable(gt_ReservistEscort, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Farmer Blackma Damaged
//--------------------------------------------------------------------------------------------------
bool gt_FarmerBlackmaDamaged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FarmerBlackmaDamaged_Init () {
    gt_FarmerBlackmaDamaged = TriggerCreate("gt_FarmerBlackmaDamaged_Func");
    TriggerEnable(gt_FarmerBlackmaDamaged, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Farmer Blackma Death
//--------------------------------------------------------------------------------------------------
bool gt_FarmerBlackmaDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_endMission;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/DD361DDD"), gv_debug.lv_gameEvents);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SiloLoop, false);
    lib90F7C81D_gf_RemoveMinimapPingIndex(gv_chapter_1.lv_mission06FarmerBlackma);
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateFailed);
    DialogControlSendAnimationEvent(gv_chapter_1.lv_mission06ProgressFrame, PlayerGroupAll(), "Hide");
    if ((gv_chapter_1.lv_mission06SiloCompletedCount < 1)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/D275D621"), gv_debug.lv_gameEvents);
        lv_endMission = true;
    }
    else {
        if ((UnitGroupCount(gv_chapter_1.lv_mission06FoodItemGroup, c_unitCountAlive) >= 1)) {
            TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/9D2B9437"), gv_debug.lv_gameEvents);
            TriggerEnable(gt_FoodSampleTimerEnd, true);
            TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), true);
            TimerStart(lib90F7C81D_gv_missiontimer, 75.0, false, c_timeGame);
            lib90F7C81D_gf_MissionText(StringExternal("Param/Value/702A9617"));
        }
        else {
            lv_endMission = true;
            TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/0D6C2C64"), gv_debug.lv_gameEvents);
        }
    }
    if ((lv_endMission == true)) {
        TriggerEnable(gt_FoodSampleCollected, false);
        TriggerExecute(gt_FoodSampleTimerEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FarmerBlackmaDeath_Init () {
    gt_FarmerBlackmaDeath = TriggerCreate("gt_FarmerBlackmaDeath_Func");
    TriggerEnable(gt_FarmerBlackmaDeath, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Food Sample Collected
//--------------------------------------------------------------------------------------------------
bool gt_FoodSampleCollected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto1EBD3309_ae;
    const int auto1EBD3309_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gf_UnitHasItem("FoodSample", EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1EBD3309_ae = lib90F7C81D_gv_inventory.lv_inventorySlotMax[UnitGetOwner(EventUnit())];
    lv_index = 1;
    for ( ; ( (auto1EBD3309_ai >= 0 && lv_index <= auto1EBD3309_ae) || (auto1EBD3309_ai < 0 && lv_index >= auto1EBD3309_ae) ) ; lv_index += auto1EBD3309_ai ) {
        if ((UnitGetType(UnitInventoryItem(EventUnit(), lv_index)) == "FoodSample")) {
            UnitGroupRemove(gv_chapter_1.lv_mission06FoodItemGroup, UnitInventoryItem(EventUnit(), lv_index));
            lib90F7C81D_gf_MissionItemPingRemoveItem(UnitInventoryItem(EventUnit(), lv_index));
            UnitRemove(UnitInventoryItem(EventUnit(), lv_index));
            gv_chapter_1.lv_mission06SampleCollectedCount += 1;
            TextExpressionSetToken("Param/Expression/ADE35C5E", "A", IntToText(gv_chapter_1.lv_mission06SampleCollectedCount));
            TextExpressionSetToken("Param/Expression/ADE35C5E", "B", IntToText(gv_chapter_1.lv_mission06SiloMax));
            ObjectiveSetName(lib90F7C81D_gv_secondObj, TextExpressionAssemble("Param/Expression/ADE35C5E"));
            TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/3619627D") + IntToText(gv_chapter_1.lv_mission06SampleCollectedCount)), gv_debug.lv_gameEvents);
        }
    }
    if ((gv_chapter_1.lv_mission06SiloCompletedCount == gv_chapter_1.lv_mission06SampleCollectedCount) && (gv_chapter_1.lv_mission06SiloLoopFinished == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_FoodSampleTimerEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FoodSampleCollected_Init () {
    gt_FoodSampleCollected = TriggerCreate("gt_FoodSampleCollected_Func");
    TriggerEnable(gt_FoodSampleCollected, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Food Sample Timer End
//--------------------------------------------------------------------------------------------------
bool gt_FoodSampleTimerEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    unitgroup autoBFC1B016_g;
    int autoBFC1B016_u;
    unit autoBFC1B016_var;
    const int auto4EFFFC92_ae = 6;
    const int auto4EFFFC92_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_StopTimer(lib90F7C81D_gv_missiontimer);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), false);
    if ((TriggerIsEnabled(gt_FoodSampleCollected) == true)) {
        TriggerEnable(gt_FoodSampleCollected, false);
    }
    autoBFC1B016_g = lib90F7C81D_gv_missionItemPingItems;
    autoBFC1B016_u = UnitGroupCount(autoBFC1B016_g, c_unitCountAll);
    for (;; autoBFC1B016_u -= 1) {
        autoBFC1B016_var = UnitGroupUnitFromEnd(autoBFC1B016_g, autoBFC1B016_u);
        if (autoBFC1B016_var == null) { break; }
        lib90F7C81D_gf_MissionItemPingRemoveItem(autoBFC1B016_var);
        UnitRemove(autoBFC1B016_var);
    }
    if ((gv_chapter_1.lv_mission06SampleCollectedCount >= 1)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/8F6E3794"), gv_debug.lv_gameEvents);
        gv_chapter_1.lv_passRate[1] = true;
        gv_campaign.lv_missionCompleted += 1;
        ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateCompleted);
        gf_AddHalfHeroLevel();
        gf_XPGainGlobal(FixedToInt((gv_chapter_1.lv_mission06SampleCollectedCount * lib90F7C81D_gf_GetModeXP("c1.2 Akma"))), (StringExternal("Param/Value/F1FCE9C4") + IntToText(gv_chapter_1.lv_mission06SampleCollectedCount)));
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/9ADFA5C3"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/E3DCB128"));
    }
    else {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/939E3DEF"), gv_debug.lv_gameEvents);
        ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateFailed);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/69366916"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/7566F2B2"));
    }
    Wait(2.0, c_timeGame);
    PingDestroy(gv_chapter_1.lv_mission06PhantomPing);
    UnitIssueOrder(lib90F7C81D_gv_lastlandedphantom, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    UnitIssueOrder(lib90F7C81D_gv_lastlandedphantom, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(43))), c_orderQueueReplace);
    UnitSetHeight(lib90F7C81D_gv_lastlandedphantom, 12.0, 10.0);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateHidden);
    ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateHidden);
    Wait(7.0, c_timeGame);
    UnitRemove(lib90F7C81D_gv_lastlandedphantom);
    if ((UnitIsAlive(gv_chapter_1.lv_mission06FarmerBlackma) == true)) {
        UnitRemove(gv_chapter_1.lv_mission06FarmerBlackma);
    }
    gv_chapter_1.lv_mission06FarmerBlackma = null;
    lib90F7C81D_gv_lastlandedphantom = null;
    gv_chapter_1.lv_mission06PhantomPing = c_invalidPingId;
    gv_chapter_1.lv_mission06ProgressBar = c_invalidDialogControlId;
    lv_index = 0;
    for ( ; ( (auto4EFFFC92_ai >= 0 && lv_index <= auto4EFFFC92_ae) || (auto4EFFFC92_ai < 0 && lv_index >= auto4EFFFC92_ae) ) ; lv_index += auto4EFFFC92_ai ) {
        gv_chapter_1.lv_mission06SiloRegion[lv_index] = null;
    }
    TriggerDestroy(gt_MeetFarmerBlackma);
    TriggerDestroy(gt_FoodSampleCollected);
    TriggerDestroy(gt_FarmerBlackmaDeath);
    TriggerDestroy(gt_FarmerBlackmaDamaged);
    Wait(RandomFixed(20.0, 40.0), c_timeGame);
    if ((gv_campaign.lv_singleMission == false)) {
        TriggerEnable(gt_MassRecallSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-1.Mission3");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FoodSampleTimerEnd_Init () {
    gt_FoodSampleTimerEnd = TriggerCreate("gt_FoodSampleTimerEnd_Func");
    TriggerEnable(gt_FoodSampleTimerEnd, false);
    TriggerAddEventTimer(gt_FoodSampleTimerEnd, lib90F7C81D_gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mass Recall Setup
//--------------------------------------------------------------------------------------------------
bool gt_MassRecallSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_rand;
    region lv_indexSwap;
    region[47] lv_house;
    int lv_houseMax;
    int lv_houseMin;

    // Automatic Variable Declarations
    const int auto720C1495_ae = 46;
    const int auto720C1495_ai = 1;
    int auto5DD967AB_ae;
    const int auto5DD967AB_ai = 1;
    const int auto07DA42ED_ae = 2;
    const int auto07DA42ED_ai = 1;
    int auto1C125667_ae;
    const int auto1C125667_ai = 1;
    const int auto68ADF324_ae = 5;
    const int auto68ADF324_ai = 1;
    int autoA3A98419_ae;
    const int autoA3A98419_ai = 1;
    const int auto0DBDEFBC_ae = 13;
    const int auto0DBDEFBC_ai = 1;
    const int autoCDFCE255_ae = 12;
    const int autoCDFCE255_ai = 1;
    playergroup auto2E38E222_g;
    int auto2E38E222_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/9BC81E88"), gv_debug.lv_gameEvents);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/BFD0D99E"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/5CA6DA2D"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/21D725B2"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/17E985C8"));
    Wait(5.0, c_timeGame);
    lv_index = 1;
    for ( ; ( (auto720C1495_ai >= 0 && lv_index <= auto720C1495_ae) || (auto720C1495_ai < 0 && lv_index >= auto720C1495_ae) ) ; lv_index += auto720C1495_ai ) {
        lv_house[lv_index] = RegionFromName("C.P.House " + (IntToString(lv_index)));
    }
    lv_houseMin = 1;
    lv_houseMax = 5;
    auto5DD967AB_ae = (lv_houseMax - 1);
    lv_index = lv_houseMin;
    for ( ; ( (auto5DD967AB_ai >= 0 && lv_index <= auto5DD967AB_ae) || (auto5DD967AB_ai < 0 && lv_index >= auto5DD967AB_ae) ) ; lv_index += auto5DD967AB_ai ) {
        lv_rand = RandomInt(lv_index, lv_houseMax);
        if ((lv_rand != lv_index)) {
            lv_indexSwap = lv_house[lv_rand];
            lv_house[lv_rand] = lv_house[lv_index];
            lv_house[lv_index] = lv_indexSwap;
        }
    }
    lv_index = 1;
    for ( ; ( (auto07DA42ED_ai >= 0 && lv_index <= auto07DA42ED_ae) || (auto07DA42ED_ai < 0 && lv_index >= auto07DA42ED_ae) ) ; lv_index += auto07DA42ED_ai ) {
        gv_chapter_1.lv_mission07HouseRegion[(lv_index - 1)] = lv_house[lv_index];
        libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(gv_chapter_1.lv_mission07HouseRegion[(lv_index - 1)]));
        gv_chapter_1.lv_mission07HouseRegionActor[(lv_index - 1)] = libNtve_gf_ActorLastCreated();
        ActorSend(gv_chapter_1.lv_mission07HouseRegionActor[(lv_index - 1)], "SetScale 0.500000");
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_chapter_1.lv_mission07HouseRegion[(lv_index - 1)]), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        gv_chapter_1.lv_mission07HouseLocationPing[(lv_index - 1)] = PingLastCreated();
        PingSetTooltip(gv_chapter_1.lv_mission07HouseLocationPing[(lv_index - 1)], StringExternal("Param/Value/019ABD4B"));
        PingSetScale(gv_chapter_1.lv_mission07HouseLocationPing[(lv_index - 1)], 0.5);
    }
    lv_houseMin = 6;
    lv_houseMax = 22;
    auto1C125667_ae = (lv_houseMax - 1);
    lv_index = lv_houseMin;
    for ( ; ( (auto1C125667_ai >= 0 && lv_index <= auto1C125667_ae) || (auto1C125667_ai < 0 && lv_index >= auto1C125667_ae) ) ; lv_index += auto1C125667_ai ) {
        lv_rand = RandomInt(lv_index, lv_houseMax);
        if ((lv_rand != lv_index)) {
            lv_indexSwap = lv_house[lv_rand];
            lv_house[lv_rand] = lv_house[lv_index];
            lv_house[lv_index] = lv_indexSwap;
        }
    }
    lv_index = 3;
    for ( ; ( (auto68ADF324_ai >= 0 && lv_index <= auto68ADF324_ae) || (auto68ADF324_ai < 0 && lv_index >= auto68ADF324_ae) ) ; lv_index += auto68ADF324_ai ) {
        gv_chapter_1.lv_mission07HouseRegion[(lv_index - 1)] = lv_house[(lv_index + 3)];
        libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(gv_chapter_1.lv_mission07HouseRegion[(lv_index - 1)]));
        gv_chapter_1.lv_mission07HouseRegionActor[(lv_index - 1)] = libNtve_gf_ActorLastCreated();
        ActorSend(gv_chapter_1.lv_mission07HouseRegionActor[(lv_index - 1)], "SetScale 0.500000");
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_chapter_1.lv_mission07HouseRegion[(lv_index - 1)]), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        gv_chapter_1.lv_mission07HouseLocationPing[(lv_index - 1)] = PingLastCreated();
        PingSetTooltip(gv_chapter_1.lv_mission07HouseLocationPing[(lv_index - 1)], StringExternal("Param/Value/293E2472"));
        PingSetScale(gv_chapter_1.lv_mission07HouseLocationPing[(lv_index - 1)], 0.5);
    }
    lv_houseMin = 23;
    lv_houseMax = 46;
    autoA3A98419_ae = (lv_houseMax - 1);
    lv_index = lv_houseMin;
    for ( ; ( (autoA3A98419_ai >= 0 && lv_index <= autoA3A98419_ae) || (autoA3A98419_ai < 0 && lv_index >= autoA3A98419_ae) ) ; lv_index += autoA3A98419_ai ) {
        lv_rand = RandomInt(lv_index, lv_houseMax);
        if ((lv_rand != lv_index)) {
            lv_indexSwap = lv_house[lv_rand];
            lv_house[lv_rand] = lv_house[lv_index];
            lv_house[lv_index] = lv_indexSwap;
        }
    }
    lv_index = 6;
    for ( ; ( (auto0DBDEFBC_ai >= 0 && lv_index <= auto0DBDEFBC_ae) || (auto0DBDEFBC_ai < 0 && lv_index >= auto0DBDEFBC_ae) ) ; lv_index += auto0DBDEFBC_ai ) {
        gv_chapter_1.lv_mission07HouseRegion[(lv_index - 1)] = lv_house[(lv_index + 17)];
        libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(gv_chapter_1.lv_mission07HouseRegion[(lv_index - 1)]));
        gv_chapter_1.lv_mission07HouseRegionActor[(lv_index - 1)] = libNtve_gf_ActorLastCreated();
        ActorSend(gv_chapter_1.lv_mission07HouseRegionActor[(lv_index - 1)], "SetScale 0.500000");
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_chapter_1.lv_mission07HouseRegion[(lv_index - 1)]), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        gv_chapter_1.lv_mission07HouseLocationPing[(lv_index - 1)] = PingLastCreated();
        PingSetTooltip(gv_chapter_1.lv_mission07HouseLocationPing[(lv_index - 1)], StringExternal("Param/Value/8FEF9055"));
        PingSetScale(gv_chapter_1.lv_mission07HouseLocationPing[(lv_index - 1)], 0.5);
    }
    lv_index = 0;
    for ( ; ( (autoCDFCE255_ai >= 0 && lv_index <= autoCDFCE255_ae) || (autoCDFCE255_ai < 0 && lv_index >= autoCDFCE255_ae) ) ; lv_index += autoCDFCE255_ai ) {
        auto2E38E222_g = lib90F7C81D_gv_players;
        auto2E38E222_var = -1;
        while (true) {
            auto2E38E222_var = PlayerGroupNextPlayer(auto2E38E222_g, auto2E38E222_var);
            if (auto2E38E222_var < 0) { break; }
            TriggerAddEventUnitRegion(gt_CivilianHouseSearched, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lib90F7C81D_gv_playerHeroes[auto2E38E222_var])), gv_chapter_1.lv_mission07HouseRegion[lv_index], true);
        }
    }
    TextExpressionSetToken("Param/Expression/D4FB0D6B", "A", IntToText(gv_chapter_1.lv_mission07CivilianEscortedCount));
    TextExpressionSetToken("Param/Expression/D4FB0D6B", "B", IntToText(gv_chapter_1.lv_mission07CivilianMax));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/D4FB0D6B"), StringExternal("Param/Value/9E8CCFA1"), c_objectiveStateActive, true);
    lib90F7C81D_gv_mainObj = ObjectiveLastCreated();
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), true);
    TimerStart(lib90F7C81D_gv_missiontimer, 300.0, false, c_timeGame);
    TriggerEnable(gt_CivilianHouseSearched, true);
    TriggerEnable(gt_CivilianDies, true);
    TriggerEnable(gt_CivilianEntersDasdan, true);
    TriggerEnable(gt_CiviianChangeOwner, true);
    TriggerEnable(gt_MassRecallTimerEnd, true);
    gf_CampaignScriptedSpawns(gv_campaign_Missions.lv_mission07MassRecall);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MassRecallSetup_Init () {
    gt_MassRecallSetup = TriggerCreate("gt_MassRecallSetup_Func");
    TriggerEnable(gt_MassRecallSetup, false);
    lib90F7C81D_gf_CampaignEvent(gt_MassRecallSetup, "Chapter-1.Mission3");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Civilian House Searched
//--------------------------------------------------------------------------------------------------
bool gt_CivilianHouseSearched_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    text[3] lv_playerChat;
    int lv_rand;

    // Automatic Variable Declarations
    const int auto8D7EB96A_ae = 12;
    const int auto8D7EB96A_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerChat[0] = StringExternal("Param/Value/B22F158F");
    lv_playerChat[1] = StringExternal("Param/Value/CB422C9D");
    lv_playerChat[2] = StringExternal("Param/Value/574B3DC4");
    lv_index = 0;
    for ( ; ( (auto8D7EB96A_ai >= 0 && lv_index <= auto8D7EB96A_ae) || (auto8D7EB96A_ai < 0 && lv_index >= auto8D7EB96A_ae) ) ; lv_index += auto8D7EB96A_ai ) {
        if ((EventUnitRegion() == gv_chapter_1.lv_mission07HouseRegion[lv_index]) && (gv_chapter_1.lv_mission07CivilianHouseSearched[lv_index] == false)) {
            TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/4BD24E30") + IntToText(lv_index) + StringExternal("Param/Value/F9EC66A4")), gv_debug.lv_gameEvents);
            gv_chapter_1.lv_mission07CivilianHouseSearched[lv_index] = true;
            libNtve_gf_KillModel(gv_chapter_1.lv_mission07HouseRegionActor[lv_index]);
            gv_chapter_1.lv_mission07HouseRegionActor[lv_index] = null;
            PingDestroy(gv_chapter_1.lv_mission07HouseLocationPing[lv_index]);
            gv_chapter_1.lv_mission07HouseLocationPing[lv_index] = c_invalidPingId;
            lib90F7C81D_gf_CreateTextTagForAllPlayers(EventUnit(), lv_playerChat[RandomInt(0, 2)]);
            UnitCreate(1, "CivilianFemale", 0, UnitGetOwner(EventUnit()), RegionGetCenter(gv_chapter_1.lv_mission07HouseRegion[lv_index]), libNtve_gf_RandomAngle());
            TriggerAddEventUnitRegion(gt_CivilianEntersDasdan, UnitRefFromUnit(UnitLastCreated()), RegionFromId(47), true);
            TriggerAddEventUnitDied(gt_CivilianDies, UnitRefFromUnit(UnitLastCreated()));
            UnitGroupAdd(gv_chapter_1.lv_mission07CivilianUnitGroup, UnitLastCreated());
            UnitBehaviorRemove(UnitLastCreated(), "CivilianWander", 1);
            lib90F7C81D_gf_StoreMinimapPings(UnitLastCreated(), StringExternal("Param/Value/1FB87772"), Color(0.00, 100.00, 100.00), 0.5);
            UnitCreate(1, "Civilian", 0, UnitGetOwner(EventUnit()), RegionGetCenter(gv_chapter_1.lv_mission07HouseRegion[lv_index]), libNtve_gf_RandomAngle());
            TriggerAddEventUnitRegion(gt_CivilianEntersDasdan, UnitRefFromUnit(UnitLastCreated()), RegionFromId(47), true);
            TriggerAddEventUnitDied(gt_CivilianDies, UnitRefFromUnit(UnitLastCreated()));
            UnitGroupAdd(gv_chapter_1.lv_mission07CivilianUnitGroup, UnitLastCreated());
            lib90F7C81D_gf_StoreMinimapPings(UnitLastCreated(), StringExternal("Param/Value/4CD1522C"), Color(0.00, 100.00, 100.00), 0.5);
            UnitBehaviorRemove(UnitLastCreated(), "CivilianWander", 1);
        }
    }
    lv_playerChat[0] = null;
    lv_playerChat[1] = null;
    lv_playerChat[2] = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CivilianHouseSearched_Init () {
    gt_CivilianHouseSearched = TriggerCreate("gt_CivilianHouseSearched_Func");
    TriggerEnable(gt_CivilianHouseSearched, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Civilian Enters Dasdan
//--------------------------------------------------------------------------------------------------
bool gt_CivilianEntersDasdan_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventUnit(), 0, true);
    UnitGroupRemove(gv_chapter_1.lv_mission07CivilianUnitGroup, EventUnit());
    gv_chapter_1.lv_mission07CivilianCount += 1;
    lib90F7C81D_gf_RemoveMinimapPingIndex(EventUnit());
    gv_chapter_1.lv_mission07CivilianEscortedCount += 1;
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(47))), c_orderQueueReplace);
    TextExpressionSetToken("Param/Expression/10EEB383", "A", IntToText(gv_chapter_1.lv_mission07CivilianEscortedCount));
    TextExpressionSetToken("Param/Expression/10EEB383", "B", IntToText(gv_chapter_1.lv_mission07CivilianMax));
    ObjectiveSetName(lib90F7C81D_gv_mainObj, TextExpressionAssemble("Param/Expression/10EEB383"));
    TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/E0DBDD38") + IntToText(gv_chapter_1.lv_mission07CivilianEscortedCount)), gv_debug.lv_gameEvents);
    if ((gv_chapter_1.lv_mission07CivilianCount == gv_chapter_1.lv_mission07CivilianMax)) {
        TriggerExecute(gt_MassRecallTimerEnd, true, false);
    }
    UnitWaitUntilIdle(EventUnit(), true);
    UnitBehaviorAdd(EventUnit(), "CivilianWander", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CivilianEntersDasdan_Init () {
    gt_CivilianEntersDasdan = TriggerCreate("gt_CivilianEntersDasdan_Func");
    TriggerEnable(gt_CivilianEntersDasdan, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Civiian Change Owner
//--------------------------------------------------------------------------------------------------
bool gt_CiviianChangeOwner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto24921552_g;
    int auto24921552_u;
    unit auto24921552_var;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto24921552_g = gv_chapter_1.lv_mission07CivilianUnitGroup;
    auto24921552_u = UnitGroupCount(auto24921552_g, c_unitCountAll);
    for (;; auto24921552_u -= 1) {
        auto24921552_var = UnitGroupUnitFromEnd(auto24921552_g, auto24921552_u);
        if (auto24921552_var == null) { break; }
        if ((UnitGetOwner(auto24921552_var) == EventPlayer())) {
            UnitSetOwner(auto24921552_var, 0, true);
            UnitIssueOrder(auto24921552_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(47))), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CiviianChangeOwner_Init () {
    gt_CiviianChangeOwner = TriggerCreate("gt_CiviianChangeOwner_Func");
    TriggerEnable(gt_CiviianChangeOwner, false);
    TriggerAddEventPlayerLeft(gt_CiviianChangeOwner, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Civilian Dies
//--------------------------------------------------------------------------------------------------
bool gt_CivilianDies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gf_RemoveMinimapPingIndex(EventUnit());
    UnitGroupRemove(gv_chapter_1.lv_mission07CivilianUnitGroup, EventUnit());
    gv_chapter_1.lv_mission07CivilianCount += 1;
    if ((gv_chapter_1.lv_mission07CivilianCount == gv_chapter_1.lv_mission07CivilianMax)) {
        TriggerExecute(gt_MassRecallTimerEnd, true, false);
    }
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/40875829"), gv_debug.lv_gameEvents);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CivilianDies_Init () {
    gt_CivilianDies = TriggerCreate("gt_CivilianDies_Func");
    TriggerEnable(gt_CivilianDies, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mass Recall Timer End
//--------------------------------------------------------------------------------------------------
bool gt_MassRecallTimerEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    unitgroup autoC52C173B_g;
    int autoC52C173B_u;
    unit autoC52C173B_var;
    const int auto262C0A3F_ae = 12;
    const int auto262C0A3F_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_CivilianDies, false);
    TriggerEnable(gt_CivilianHouseSearched, false);
    TriggerEnable(gt_CivilianEntersDasdan, false);
    TriggerEnable(gt_CiviianChangeOwner, false);
    libNtve_gf_StopTimer(lib90F7C81D_gv_missiontimer);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), false);
    if ((UnitGroupCount(gv_chapter_1.lv_mission07CivilianUnitGroup, c_unitCountAlive) >= 1)) {
        autoC52C173B_g = gv_chapter_1.lv_mission07CivilianUnitGroup;
        autoC52C173B_u = UnitGroupCount(autoC52C173B_g, c_unitCountAll);
        for (;; autoC52C173B_u -= 1) {
            autoC52C173B_var = UnitGroupUnitFromEnd(autoC52C173B_g, autoC52C173B_u);
            if (autoC52C173B_var == null) { break; }
            UnitGroupRemove(gv_chapter_1.lv_mission07CivilianUnitGroup, autoC52C173B_var);
            UnitSetOwner(autoC52C173B_var, 0, true);
            UnitIssueOrder(autoC52C173B_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(47))), c_orderQueueReplace);
            lib90F7C81D_gf_RemoveMinimapPingIndex(autoC52C173B_var);
        }
    }
    if ((gv_chapter_1.lv_mission07CivilianEscortedCount >= 1)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/D21F1FA2"), gv_debug.lv_gameEvents);
        if ((gv_chapter_1.lv_mission07CivilianEscortedCount == gv_chapter_1.lv_mission07CivilianMax)) {
            lib90F7C81D_gf_AwardAchievement(60);
        }
        gv_chapter_1.lv_passRate[2] = true;
        gv_campaign.lv_missionCompleted += 1;
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
        gf_AddHalfHeroLevel();
        gf_XPGainGlobal(FixedToInt(Ceiling((IntToFixed(gv_chapter_1.lv_mission07CivilianEscortedCount) * lib90F7C81D_gf_GetModeXP("c1.3 Civs")))), (StringExternal("Param/Value/01F819DC") + IntToText(gv_chapter_1.lv_mission07CivilianEscortedCount)));
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/87CE052A"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/74CD67B0"));
    }
    else {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/AFE02155"), gv_debug.lv_gameEvents);
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateFailed);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/293B3975"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/0154C156"));
    }
    lv_index = 0;
    for ( ; ( (auto262C0A3F_ai >= 0 && lv_index <= auto262C0A3F_ae) || (auto262C0A3F_ai < 0 && lv_index >= auto262C0A3F_ae) ) ; lv_index += auto262C0A3F_ai ) {
        if ((gv_chapter_1.lv_mission07HouseRegionActor[lv_index] != null)) {
            libNtve_gf_KillModel(gv_chapter_1.lv_mission07HouseRegionActor[lv_index]);
            gv_chapter_1.lv_mission07HouseRegionActor[lv_index] = null;
        }
        if ((gv_chapter_1.lv_mission07HouseLocationPing[lv_index] != c_invalidPingId)) {
            PingDestroy(gv_chapter_1.lv_mission07HouseLocationPing[lv_index]);
            gv_chapter_1.lv_mission07HouseLocationPing[lv_index] = c_invalidPingId;
        }
        gv_chapter_1.lv_mission07HouseRegion[lv_index] = null;
        TriggerDestroy(gt_CivilianEntersDasdan);
        TriggerDestroy(gt_CivilianDies);
        TriggerDestroy(gt_CivilianHouseSearched);
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateHidden);
    Wait(RandomFixed(20.0, 40.0), c_timeGame);
    if ((gv_campaign.lv_singleMission == false)) {
        TriggerEnable(gt_SpiderEggSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-1.Mission4");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MassRecallTimerEnd_Init () {
    gt_MassRecallTimerEnd = TriggerCreate("gt_MassRecallTimerEnd_Func");
    TriggerEnable(gt_MassRecallTimerEnd, false);
    TriggerAddEventTimer(gt_MassRecallTimerEnd, lib90F7C81D_gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spider Egg Setup
//--------------------------------------------------------------------------------------------------
bool gt_SpiderEggSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    region lv_indexSwap;
    int lv_rand;
    int lv_zones;
    int lv_players;

    // Automatic Variable Declarations
    int auto0DB00634_val;
    int auto404D54B2_ae;
    const int auto404D54B2_ai = 1;

    // Variable Initialization
    lv_zones = 4;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_UndeadGroupFilter(ge_UndeadUnitFilter_Cloaked, true);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/0D51BD52"), gv_debug.lv_gameEvents);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/E507B7AD"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/BF64BB22"));
    Wait(5.0, c_timeGame);
    auto0DB00634_val = lib90F7C81D_gf_GameMode();
    if (auto0DB00634_val == 2) {
        gv_chapter_1.lv_mission08SpiderEggMax = 6;
    }
    else if (auto0DB00634_val == 3) {
        gv_chapter_1.lv_mission08SpiderEggMax = 7;
    }
    else if (auto0DB00634_val == 4) {
        gv_chapter_1.lv_mission08SpiderEggMax = 9;
    }
    else if (auto0DB00634_val == 5) {
        gv_chapter_1.lv_mission08SpiderEggMax = 12;
    }
    else {
        gv_chapter_1.lv_mission08SpiderEggMax = 5;
    }
    TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/32D3C759") + IntToText(gv_chapter_1.lv_mission08SpiderEggMax)), gv_debug.lv_gameEvents);
    gv_chapter_1.lv_mission08SpiderEggRegion[0] = RegionFromId(185);
    gv_chapter_1.lv_mission08SpiderEggRegion[1] = RegionFromId(186);
    gv_chapter_1.lv_mission08SpiderEggRegion[2] = RegionFromId(187);
    gv_chapter_1.lv_mission08SpiderEggRegion[3] = RegionFromId(188);
    lv_players = PlayerGroupCount(lib90F7C81D_gv_players);
    if ((lv_players <= 4)) {
        lv_zones = 2;
    }
    else if ((lv_players > 4) && (lv_players < 9)) {
        lv_zones = 3;
    }
    TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/C5926EA3") + IntToText(lv_zones)), gv_debug.lv_gameEvents);
    auto404D54B2_ae = (3 - 1);
    lv_index = 0;
    for ( ; ( (auto404D54B2_ai >= 0 && lv_index <= auto404D54B2_ae) || (auto404D54B2_ai < 0 && lv_index >= auto404D54B2_ae) ) ; lv_index += auto404D54B2_ai ) {
        lv_rand = RandomInt(lv_index, 3);
        if ((lv_rand != lv_index)) {
            lv_indexSwap = gv_chapter_1.lv_mission08SpiderEggRegion[lv_rand];
            gv_chapter_1.lv_mission08SpiderEggRegion[lv_rand] = gv_chapter_1.lv_mission08SpiderEggRegion[lv_index];
            gv_chapter_1.lv_mission08SpiderEggRegion[lv_index] = lv_indexSwap;
        }
    }
    gf_SpawnSpiderEggs(gv_chapter_1.lv_mission08SpiderEggMax, lv_zones);
    TextExpressionSetToken("Param/Expression/8E17CAA9", "A", IntToText(gv_chapter_1.lv_mission08SpiderEggKilled));
    TextExpressionSetToken("Param/Expression/8E17CAA9", "B", IntToText(gv_chapter_1.lv_mission08SpiderEggMax));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/8E17CAA9"), StringExternal("Param/Value/47718DA9"), c_objectiveStateActive, true);
    lib90F7C81D_gv_mainObj = ObjectiveLastCreated();
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), true);
    TimerStart(lib90F7C81D_gv_missiontimer, 240.0, false, c_timeGame);
    TriggerEnable(gt_SpiderEggDeath, true);
    TriggerEnable(gt_SpiderEggTimerEnd, true);
    gf_CampaignScriptedSpawns(gv_campaign_Missions.lv_mission08Spiders);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpiderEggSetup_Init () {
    gt_SpiderEggSetup = TriggerCreate("gt_SpiderEggSetup_Func");
    TriggerEnable(gt_SpiderEggSetup, false);
    lib90F7C81D_gf_CampaignEvent(gt_SpiderEggSetup, "Chapter-1.Mission4");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spider Egg Death
//--------------------------------------------------------------------------------------------------
bool gt_SpiderEggDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_SpiderEggTimerEnd) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_chapter_1.lv_mission08SpiderEggKilled += 1;
    lib90F7C81D_gf_RemoveMinimapPingIndex(EventUnit());
    UnitGroupRemove(gv_chapter_1.lv_mission08SpiderEggGroup, EventUnit());
    TextExpressionSetToken("Param/Expression/9EA19D78", "A", IntToText(gv_chapter_1.lv_mission08SpiderEggKilled));
    TextExpressionSetToken("Param/Expression/9EA19D78", "B", IntToText(gv_chapter_1.lv_mission08SpiderEggMax));
    ObjectiveSetName(lib90F7C81D_gv_mainObj, TextExpressionAssemble("Param/Expression/9EA19D78"));
    if ((gv_chapter_1.lv_mission08SpiderEggKilled == gv_chapter_1.lv_mission08SpiderEggMax)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/585EB86C"), gv_debug.lv_gameEvents);
        gv_chapter_1.lv_mission08Bonus = true;
        TriggerExecute(gt_SpiderEggTimerEnd, true, false);
    }
    TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/FE15A17A") + IntToText(gv_chapter_1.lv_mission08SpiderEggKilled)), gv_debug.lv_gameEvents);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpiderEggDeath_Init () {
    gt_SpiderEggDeath = TriggerCreate("gt_SpiderEggDeath_Func");
    TriggerEnable(gt_SpiderEggDeath, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spider Egg Timer End
//--------------------------------------------------------------------------------------------------
bool gt_SpiderEggTimerEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_index;
    point lv_point;

    // Automatic Variable Declarations
    unitgroup auto26207E72_g;
    int auto26207E72_u;
    unitgroup autoDB7554B0_g;
    int autoDB7554B0_u;
    int auto4546B1A5_ae;
    const int auto4546B1A5_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SpiderEggDeath, false);
    libNtve_gf_StopTimer(lib90F7C81D_gv_missiontimer);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), false);
    if ((gv_chapter_1.lv_mission08Bonus == false)) {
        auto26207E72_g = gv_chapter_1.lv_mission08SpiderEggGroup;
        auto26207E72_u = UnitGroupCount(auto26207E72_g, c_unitCountAll);
        for (;; auto26207E72_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto26207E72_g, auto26207E72_u);
            if (lv_unit == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(lv_unit, true);
            lib90F7C81D_gf_RemoveMinimapPingIndex(lv_unit);
        }
    }
    if ((gv_chapter_1.lv_mission08SpiderEggKilled >= 1)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/87696815"), gv_debug.lv_gameEvents);
        gv_chapter_1.lv_passRate[3] = true;
        gv_campaign.lv_missionCompleted += 1;
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
        gf_AddHalfHeroLevel();
        gf_XPGainGlobal(FixedToInt((gv_chapter_1.lv_mission08SpiderEggKilled * lib90F7C81D_gf_GetModeXP("c1.4 Spiders"))), (StringExternal("Param/Value/79916F71") + IntToText(gv_chapter_1.lv_mission08SpiderEggKilled)));
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/30FB5D66"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/5B863451"));
    }
    else {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/336751AB"), gv_debug.lv_gameEvents);
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateFailed);
        if ((RandomInt(0, 1) == 1)) {
            lib90F7C81D_gf_MissionText(StringExternal("Param/Value/85CC2B1F"));
            Wait(6.5, c_timeGame);
            lib90F7C81D_gf_MissionText(StringExternal("Param/Value/AE41681B"));
        }
        else {
            lib90F7C81D_gf_MissionText(StringExternal("Param/Value/3E2ACC08"));
            Wait(6.5, c_timeGame);
            lib90F7C81D_gf_MissionText(StringExternal("Param/Value/F8CCEF4F"));
        }
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateHidden);
    if ((gv_chapter_1.lv_mission08Bonus == false)) {
        autoDB7554B0_g = gv_chapter_1.lv_mission08SpiderEggGroup;
        autoDB7554B0_u = UnitGroupCount(autoDB7554B0_g, c_unitCountAll);
        for (;; autoDB7554B0_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(autoDB7554B0_g, autoDB7554B0_u);
            if (lv_unit == null) { break; }
            lv_point = UnitGetPosition(lv_unit);
            UnitKill(lv_unit);
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(lv_unit));
            UnitGroupRemove(gv_chapter_1.lv_mission08SpiderEggGroup, lv_unit);
            gf_SpawnUnitsAtLocation("SpittingSpider", lv_point, (RandomInt(1, 2) + lib90F7C81D_gf_GameMode()));
        }
        lv_unit = null;
        lv_point = null;
        UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/AC20E39A"), StringExternal("Param/Value/942ED8E2"), 0.0, SoundLink("UI_Nova_BriefingTextCallout_Open", -1), SoundLink("UI_TextPrintout", -1));
        Wait(7.0, c_timeGame);
        UIHideTextCrawl(PlayerGroupAll());
        if ((gv_campaign.lv_singleMission == false)) {
            TriggerEnable(gt_EscalationSetup, true);
            lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission1");
        }
    }
    else {
        Wait(RandomFixed(5.0, 10.0), c_timeGame);
        if ((gv_campaign.lv_singleMission == false)) {
            TriggerEnable(gt_SpiderKingSetup, true);
            lib90F7C81D_gf_RunCampaignEvent("Chapter-1.Mission5");
        }
    }
    auto4546B1A5_ae = gv_chapter_1.lv_mission08SpiderEggMax;
    lv_index = 0;
    for ( ; ( (auto4546B1A5_ai >= 0 && lv_index <= auto4546B1A5_ae) || (auto4546B1A5_ai < 0 && lv_index >= auto4546B1A5_ae) ) ; lv_index += auto4546B1A5_ai ) {
        UnitRemove(gv_chapter_1.lv_mission08SpiderEgg[lv_index]);
        gv_chapter_1.lv_mission08SpiderEgg[lv_index] = null;
    }
    TriggerDestroy(gt_SpiderEggDeath);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpiderEggTimerEnd_Init () {
    gt_SpiderEggTimerEnd = TriggerCreate("gt_SpiderEggTimerEnd_Func");
    TriggerEnable(gt_SpiderEggTimerEnd, false);
    TriggerAddEventTimer(gt_SpiderEggTimerEnd, lib90F7C81D_gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spider King Setup
//--------------------------------------------------------------------------------------------------
bool gt_SpiderKingSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_players;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/CE74A1D9"), gv_debug.lv_gameEvents);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/FE812ADB"));
    Wait(2.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/06F8E26C"));
    lv_players = PlayerGroupCount(lib90F7C81D_gv_players);
    if ((lib90F7C81D_gf_DifficultyisLOE(2) == true)) {
        if ((lv_players <= 4)) {
            CatalogFieldValueModify(c_gameCatalogUnit, "Widower", "LifeStart", 14, FixedToString(0.6, c_fixedPrecisionAny), c_upgradeOperationMultiply);
            CatalogFieldValueModify(c_gameCatalogUnit, "Widower", "LifeMax", 14, FixedToString(0.6, c_fixedPrecisionAny), c_upgradeOperationMultiply);
            CatalogFieldValueModify(c_gameCatalogUnit, "Widower", "ShieldsStart", 14, FixedToString(0.6, c_fixedPrecisionAny), c_upgradeOperationMultiply);
            CatalogFieldValueModify(c_gameCatalogUnit, "Widower", "ShieldsMax", 14, FixedToString(0.6, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        }
        else if ((lv_players > 4) && (lv_players < 9)) {
            CatalogFieldValueModify(c_gameCatalogUnit, "Widower", "LifeStart", 14, FixedToString(0.8, c_fixedPrecisionAny), c_upgradeOperationMultiply);
            CatalogFieldValueModify(c_gameCatalogUnit, "Widower", "LifeMax", 14, FixedToString(0.8, c_fixedPrecisionAny), c_upgradeOperationMultiply);
            CatalogFieldValueModify(c_gameCatalogUnit, "Widower", "ShieldsStart", 14, FixedToString(0.8, c_fixedPrecisionAny), c_upgradeOperationMultiply);
            CatalogFieldValueModify(c_gameCatalogUnit, "Widower", "ShieldsMax", 14, FixedToString(0.8, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        }
    }
    UnitCreate(1, "Widower", 0, 14, RegionGetCenter(gv_t2Ground[RandomInt(4, 8)]), 270.0);
    gv_chapter_1.lv_mission09SpiderKing = UnitLastCreated();
    TriggerAddEventUnitDied(gt_SpiderKingDeath, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(gv_chapter_1.lv_mission09SpiderKing)));
    UnitGroupAdd(lib90F7C81D_gv_undeadGroup, gv_chapter_1.lv_mission09SpiderKing);
    UnitIssueOrder(gv_chapter_1.lv_mission09SpiderKing, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(lib90F7C81D_gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    ObjectiveCreate(StringExternal("Param/Value/357AC624"), StringExternal("Param/Value/B7EF5D73"), c_objectiveStateActive, true);
    lib90F7C81D_gv_mainObj = ObjectiveLastCreated();
    HookupBossBarUAD(gv_chapter_1.lv_mission09SpiderKing, StringExternal("Param/Value/126CE23D"));
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), true);
    TimerStart(lib90F7C81D_gv_missiontimer, 180.0, false, c_timeGame);
    TriggerEnable(gt_SpiderKingDeath, true);
    TriggerEnable(gt_SpiderKingTimerEnd, true);
    TriggerEnable(gt_SpiderKingMinimapPing, true);
    TriggerExecute(gt_SpiderKingMinimapPing, true, false);
    gf_CampaignScriptedSpawns(gv_campaign_Missions.lv_mission09SpiderKing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpiderKingSetup_Init () {
    gt_SpiderKingSetup = TriggerCreate("gt_SpiderKingSetup_Func");
    TriggerEnable(gt_SpiderKingSetup, false);
    lib90F7C81D_gf_CampaignEvent(gt_SpiderKingSetup, "Chapter-1.Mission5");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spider King Minimap Ping
//--------------------------------------------------------------------------------------------------
bool gt_SpiderKingMinimapPing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ping;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ping = c_invalidPingId;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((TriggerIsEnabled(TriggerGetCurrent()) == true) && (UnitIsAlive(gv_chapter_1.lv_mission09SpiderKing) == true) && (lib90F7C81D_gv_gameOver == false)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_chapter_1.lv_mission09SpiderKing), ColorWithAlpha(100.00, 0.00, 100.00, 0.00), 3.0, 270.0);
        lv_ping = PingLastCreated();
        PingSetTooltip(lv_ping, UnitGetName(gv_chapter_1.lv_mission09SpiderKing));
        Wait(8.0, c_timeGame);
        lv_ping = c_invalidPingId;
    }
    PingDestroy(lv_ping);
    lv_ping = c_invalidPingId;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpiderKingMinimapPing_Init () {
    gt_SpiderKingMinimapPing = TriggerCreate("gt_SpiderKingMinimapPing_Func");
    TriggerEnable(gt_SpiderKingMinimapPing, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spider King Death
//--------------------------------------------------------------------------------------------------
bool gt_SpiderKingDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(gt_SpiderKingTimerEnd) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/4D0B11F8"), gv_debug.lv_gameEvents);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerExecute(gt_SpiderKingTimerEnd, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpiderKingDeath_Init () {
    gt_SpiderKingDeath = TriggerCreate("gt_SpiderKingDeath_Func");
    TriggerEnable(gt_SpiderKingDeath, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spider King Timer End
//--------------------------------------------------------------------------------------------------
bool gt_SpiderKingTimerEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SpiderKingMinimapPing, false);
    libNtve_gf_StopTimer(lib90F7C81D_gv_missiontimer);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), false);
    BossBarHideUAD();
    if ((UnitIsAlive(gv_chapter_1.lv_mission09SpiderKing) == false)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/5A532048"), gv_debug.lv_gameEvents);
        if ((lib90F7C81D_gf_DifficultyisGOE(3) == true)) {
            lib90F7C81D_gf_AwardAchievement(61);
        }
        gv_chapter_1.lv_passRate[4] = true;
        gv_campaign.lv_missionCompleted += 1;
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
        gf_XPGainGlobal(FixedToInt(lib90F7C81D_gf_GetModeXP("c1.5 Widower")), StringExternal("Param/Value/8C10652D"));
        gf_AddHalfHeroLevel();
        if ((gv_campaign.lv_missionCompleted == 6)) {
            lib90F7C81D_gf_AwardAchievement(62);
        }
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/BD50939A"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/DCD120F8"));
    }
    else {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/C5B8E4E3"), gv_debug.lv_gameEvents);
        TriggerEnable(gt_SpiderKingDeath, false);
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateFailed);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/00D33F3B"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/0B985598"));
    }
    Wait(2.0, c_timeGame);
    gv_chapter_1.lv_mission09SpiderKing = null;
    TriggerDestroy(gt_SpiderKingDeath);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateHidden);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/4F12637C"), StringExternal("Param/Value/27DC65A2"), 0.0, SoundLink("UI_Nova_BriefingTextCallout_Open", -1), SoundLink("UI_TextPrintout", -1));
    Wait(7.0, c_timeGame);
    UIHideTextCrawl(PlayerGroupAll());
    Wait(RandomFixed(20.0, 30.0), c_timeGame);
    if ((gv_campaign.lv_singleMission == false)) {
        TriggerEnable(gt_EscalationSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission1");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpiderKingTimerEnd_Init () {
    gt_SpiderKingTimerEnd = TriggerCreate("gt_SpiderKingTimerEnd_Func");
    TriggerEnable(gt_SpiderKingTimerEnd, false);
    TriggerAddEventTimer(gt_SpiderKingTimerEnd, lib90F7C81D_gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escalation Setup
//--------------------------------------------------------------------------------------------------
bool gt_EscalationSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_saber6SpawnLocation;
    int lv_routeIndex;
    int lv_unitCount;

    // Automatic Variable Declarations
    const int auto25CDDAE4_n = 12;
    int auto25CDDAE4_i;
    const int auto450B5937_n = 2;
    int auto450B5937_i;
    const int autoE899875D_n = 2;
    int autoE899875D_i;
    const int autoBD0DCF13_n = 2;
    int autoBD0DCF13_i;
    unitgroup auto189919FE_g;
    int auto189919FE_u;
    unit auto189919FE_var;
    playergroup auto402DD04E_g;
    int auto402DD04E_var;
    unitgroup auto789454B3_g;
    int auto789454B3_u;
    unit auto789454B3_var;
    unitgroup auto136CB3C5_g;
    int auto136CB3C5_u;
    unit auto136CB3C5_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_campaign.lv_missionCompleted = 0;
    gf_AddHeroLevels(1);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/50E75059"), gv_debug.lv_gameEvents);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/6283C18F"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/6DB3A470"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/C7603CF9"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/3CB990E9"));
    Wait(6.5, c_timeGame);
    ObjectiveCreate(StringExternal("Param/Value/9FF0AFA8"), StringExternal("Param/Value/EFBB2BEF"), c_objectiveStateActive, true);
    lib90F7C81D_gv_mainObj = ObjectiveLastCreated();
    if ((RandomInt(0, 1) == 0)) {
        lv_saber6SpawnLocation = RegionFromId(201);
        gv_chapter_2.lv_mission10SpawnLocation = RegionFromId(201);
    }
    else {
        lv_saber6SpawnLocation = RegionFromId(202);
        gv_chapter_2.lv_mission10SpawnLocation = RegionFromId(202);
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryCommander", 0, 0, RegionRandomPoint(lv_saber6SpawnLocation));
    gv_chapter_2.lv_mission10Saber6Commander = UnitLastCreated();
    TriggerAddEventUnitDied(gt_Saber6CommanderDeath, UnitRefFromVariable("gv_chapter_2.lv_mission10Saber6Commander"));
    TriggerAddEventUnitRegion(gt_Saber6ArrivesAtMayor, UnitRefFromVariable("gv_chapter_2.lv_mission10Saber6Commander"), RegionFromId(204), true);
    TriggerAddEventUnitRegion(gt_Saber6ArrivesAtWestTCP, UnitRefFromVariable("gv_chapter_2.lv_mission10Saber6Commander"), RegionFromId(205), true);
    TriggerAddEventUnitRegion(gt_SquadMovement, UnitRefFromVariable("gv_chapter_2.lv_mission10Saber6Commander"), RegionFromId(206), true);
    libHots_gf_StorePingForUnit(UnitLastCreated(), 1, PingLastCreated());
    lib90F7C81D_gf_StoreMinimapPings(gv_chapter_2.lv_mission10Saber6Commander, StringExternal("Param/Value/7B63DB99"), Color(0.00, 25.10, 0.00), 0.65);
    for (auto25CDDAE4_i = 1; auto25CDDAE4_i <= auto25CDDAE4_n; auto25CDDAE4_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryRifleman", 0, 0, RegionRandomPoint(lv_saber6SpawnLocation));
        UnitGroupAdd(gv_chapter_2.lv_mission10Saber6Group, UnitLastCreated());
    }
    for (auto450B5937_i = 1; auto450B5937_i <= auto450B5937_n; auto450B5937_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryAutomaticRifleman", 0, 0, RegionRandomPoint(lv_saber6SpawnLocation));
        UnitGroupAdd(gv_chapter_2.lv_mission10Saber6Group, UnitLastCreated());
    }
    for (autoE899875D_i = 1; autoE899875D_i <= autoE899875D_n; autoE899875D_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryMedic", 0, 0, RegionRandomPoint(lv_saber6SpawnLocation));
        UnitGroupAdd(gv_chapter_2.lv_mission10Saber6Group, UnitLastCreated());
    }
    for (autoBD0DCF13_i = 1; autoBD0DCF13_i <= autoBD0DCF13_n; autoBD0DCF13_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "InfantryMarksman", 0, 0, RegionRandomPoint(lv_saber6SpawnLocation));
        UnitGroupAdd(gv_chapter_2.lv_mission10Saber6Group, UnitLastCreated());
    }
    auto189919FE_g = gv_chapter_2.lv_mission10Saber6Group;
    auto189919FE_u = UnitGroupCount(auto189919FE_g, c_unitCountAll);
    for (;; auto189919FE_u -= 1) {
        auto189919FE_var = UnitGroupUnitFromEnd(auto189919FE_g, auto189919FE_u);
        if (auto189919FE_var == null) { break; }
        TriggerAddEventUnitDied(gt_Saber6SquadDeath, UnitRefFromUnit(auto189919FE_var));
        TriggerAddEventUnitRegion(gt_Saber6ArrivesAtWestTCP, UnitRefFromUnit(auto189919FE_var), RegionFromId(205), true);
    }
    auto402DD04E_g = lib90F7C81D_gv_players;
    auto402DD04E_var = -1;
    while (true) {
        auto402DD04E_var = PlayerGroupNextPlayer(auto402DD04E_g, auto402DD04E_var);
        if (auto402DD04E_var < 0) { break; }
        auto789454B3_g = gv_chapter_2.lv_mission10Saber6Group;
        auto789454B3_u = UnitGroupCount(auto789454B3_g, c_unitCountAll);
        for (;; auto789454B3_u -= 1) {
            auto789454B3_var = UnitGroupUnitFromEnd(auto789454B3_g, auto789454B3_u);
            if (auto789454B3_var == null) { break; }
            libNtve_gf_ShareVisionofUnit(auto789454B3_var, true, auto402DD04E_var);
        }
    }
    TriggerEnable(gt_SquadMovement, true);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/16D3F2BF"));
    if ((lv_saber6SpawnLocation == RegionFromId(201))) {
        RegionSetCenter(gv_chapter_2.lv_mission10Leash, PointFromName(("CPM10.N.0" + IntToString(gv_chapter_2.lv_mission10PointCurrent))));
    }
    else {
        RegionSetCenter(gv_chapter_2.lv_mission10Leash, PointFromName(("CPM10.E.0" + IntToString(gv_chapter_2.lv_mission10PointCurrent))));
    }
    auto136CB3C5_g = gv_chapter_2.lv_mission10Saber6Group;
    auto136CB3C5_u = UnitGroupCount(auto136CB3C5_g, c_unitCountAll);
    for (;; auto136CB3C5_u -= 1) {
        auto136CB3C5_var = UnitGroupUnitFromEnd(auto136CB3C5_g, auto136CB3C5_u);
        if (auto136CB3C5_var == null) { break; }
        UnitIssueOrder(auto136CB3C5_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_chapter_2.lv_mission10Leash)), c_orderQueueReplace);
    }
    UnitIssueOrder(gv_chapter_2.lv_mission10Saber6Commander, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_chapter_2.lv_mission10Leash)), c_orderQueueReplace);
    gv_chapter_2.lv_mission10AresSpawnRegion = RegionFromId(1);
    RegionAddRegion(gv_chapter_2.lv_mission10AresSpawnRegion, RegionFromId(1));
    RegionAddRegion(gv_chapter_2.lv_mission10AresSpawnRegion, RegionFromId(5));
    RegionAddRegion(gv_chapter_2.lv_mission10AresSpawnRegion, RegionFromId(6));
    if ((lib90F7C81D_gf_DifficultyisGOE(3) == true)) {
        UnitCreate(1, "Ares", 0, 14, RegionRandomPoint(gv_chapter_2.lv_mission10AresSpawnRegion), 270.0);
        UnitGroupAdd(lib90F7C81D_gv_undeadGroup, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_chapter_2.lv_mission10Saber6Group, c_unitCountAlive))), c_orderQueueReplace);
    }
    TriggerEnable(gt_Saber6CommanderDeath, true);
    TriggerEnable(gt_Saber6SquadDeath, true);
    TriggerEnable(gt_Saber6ArrivesAtMayor, true);
    gf_CampaignScriptedSpawns(gv_campaign_Missions.lv_mission10Saber6);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscalationSetup_Init () {
    gt_EscalationSetup = TriggerCreate("gt_EscalationSetup_Func");
    TriggerEnable(gt_EscalationSetup, false);
    lib90F7C81D_gf_CampaignEvent(gt_EscalationSetup, "Chapter-2.Mission1");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Saber 6 Commander Death
//--------------------------------------------------------------------------------------------------
bool gt_Saber6CommanderDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_routeIndex;

    // Automatic Variable Declarations
    const int autoAC77EFC1_ae = 18;
    const int autoAC77EFC1_ai = -1;
    const int auto17393D9A_ae = 2;
    const int auto17393D9A_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/2886D0A7"), gv_debug.lv_gameEvents);
    TriggerEnable(TriggerGetCurrent(), false);
    gv_chapter_2.lv_mission10Saber6CommanderKilled = true;
    lib90F7C81D_gf_RemoveMinimapPingIndex(EventUnit());
    Wait(2.0, c_timeGame);
    if ((libNtve_gf_UnitGroupIsDead(gv_chapter_2.lv_mission10Saber6Group) == true)) {
        TriggerExecute(gt_EscalationEnd, true, false);
    }
    else {
        if ((gv_chapter_2.lv_mission10ReachedDasdan == false)) {
            lib90F7C81D_gf_MissionText(StringExternal("Param/Value/9EE3D9CF"));
            Wait(2.0, c_timeGame);
            lv_routeIndex = 25;
            for ( ; ( (autoAC77EFC1_ai >= 0 && lv_routeIndex <= autoAC77EFC1_ae) || (autoAC77EFC1_ai < 0 && lv_routeIndex >= autoAC77EFC1_ae) ) ; lv_routeIndex += autoAC77EFC1_ai ) {
                UnitGroupIssueOrder(gv_chapter_2.lv_mission10Saber6Group, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromName(("CPM10_East_" + IntToString(lv_routeIndex))))), c_orderQueueAddToEnd);
            }
            lv_routeIndex = 1;
            for ( ; ( (auto17393D9A_ai >= 0 && lv_routeIndex <= auto17393D9A_ae) || (auto17393D9A_ai < 0 && lv_routeIndex >= auto17393D9A_ae) ) ; lv_routeIndex += auto17393D9A_ai ) {
                UnitGroupIssueOrder(gv_chapter_2.lv_mission10Saber6Group, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromName(("CPM10_Exit_" + IntToString(lv_routeIndex))))), c_orderQueueAddToEnd);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Saber6CommanderDeath_Init () {
    gt_Saber6CommanderDeath = TriggerCreate("gt_Saber6CommanderDeath_Func");
    TriggerEnable(gt_Saber6CommanderDeath, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Squad Movement
//--------------------------------------------------------------------------------------------------
bool gt_SquadMovement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA736614A_g;
    int autoA736614A_u;
    unit autoA736614A_var;
    unitgroup auto06311A95_g;
    int auto06311A95_u;
    unit auto06311A95_var;
    unitgroup auto361DB707_g;
    int auto361DB707_u;
    unit auto361DB707_var;
    unitgroup auto635BFFED_g;
    int auto635BFFED_u;
    unit auto635BFFED_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "InfantryCommander"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(IntToFixed(RandomInt(5, 10)), c_timeGame);
    if ((gv_chapter_2.lv_mission10SpawnLocation == RegionFromId(201))) {
        if ((gv_chapter_2.lv_mission10PointCurrent == 9)) {
            RegionSetCenter(gv_chapter_2.lv_mission10Leash, RegionGetCenter(RegionFromId(204)));
            UnitIssueOrder(gv_chapter_2.lv_mission10Saber6Commander, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_chapter_2.lv_mission10Leash)), c_orderQueueReplace);
            auto06311A95_g = gv_chapter_2.lv_mission10Saber6Group;
            auto06311A95_u = UnitGroupCount(auto06311A95_g, c_unitCountAll);
            for (;; auto06311A95_u -= 1) {
                auto06311A95_var = UnitGroupUnitFromEnd(auto06311A95_g, auto06311A95_u);
                if (auto06311A95_var == null) { break; }
                UnitIssueOrder(auto06311A95_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_chapter_2.lv_mission10Leash)), c_orderQueueAddToEnd);
            }
            TriggerEnable(TriggerGetCurrent(), false);
        }
        else {
            gv_chapter_2.lv_mission10PointCurrent += 1;
            RegionSetCenter(gv_chapter_2.lv_mission10Leash, PointFromName(("CPM10.N.0" + IntToString(gv_chapter_2.lv_mission10PointCurrent))));
            UnitIssueOrder(gv_chapter_2.lv_mission10Saber6Commander, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_chapter_2.lv_mission10Leash)), c_orderQueueReplace);
            autoA736614A_g = gv_chapter_2.lv_mission10Saber6Group;
            autoA736614A_u = UnitGroupCount(autoA736614A_g, c_unitCountAll);
            for (;; autoA736614A_u -= 1) {
                autoA736614A_var = UnitGroupUnitFromEnd(autoA736614A_g, autoA736614A_u);
                if (autoA736614A_var == null) { break; }
                UnitIssueOrder(autoA736614A_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_chapter_2.lv_mission10Leash)), c_orderQueueAddToEnd);
            }
        }
    }
    else {
        if ((gv_chapter_2.lv_mission10PointCurrent == 7)) {
            RegionSetCenter(gv_chapter_2.lv_mission10Leash, RegionGetCenter(RegionFromId(204)));
            UnitIssueOrder(gv_chapter_2.lv_mission10Saber6Commander, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_chapter_2.lv_mission10Leash)), c_orderQueueReplace);
            auto635BFFED_g = gv_chapter_2.lv_mission10Saber6Group;
            auto635BFFED_u = UnitGroupCount(auto635BFFED_g, c_unitCountAll);
            for (;; auto635BFFED_u -= 1) {
                auto635BFFED_var = UnitGroupUnitFromEnd(auto635BFFED_g, auto635BFFED_u);
                if (auto635BFFED_var == null) { break; }
                UnitIssueOrder(auto635BFFED_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_chapter_2.lv_mission10Leash)), c_orderQueueAddToEnd);
            }
            TriggerEnable(TriggerGetCurrent(), false);
        }
        else {
            gv_chapter_2.lv_mission10PointCurrent += 1;
            RegionSetCenter(gv_chapter_2.lv_mission10Leash, PointFromName(("CPM10.E.0" + IntToString(gv_chapter_2.lv_mission10PointCurrent))));
            UnitIssueOrder(gv_chapter_2.lv_mission10Saber6Commander, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(gv_chapter_2.lv_mission10Leash)), c_orderQueueReplace);
            auto361DB707_g = gv_chapter_2.lv_mission10Saber6Group;
            auto361DB707_u = UnitGroupCount(auto361DB707_g, c_unitCountAll);
            for (;; auto361DB707_u -= 1) {
                auto361DB707_var = UnitGroupUnitFromEnd(auto361DB707_g, auto361DB707_u);
                if (auto361DB707_var == null) { break; }
                UnitIssueOrder(auto361DB707_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_chapter_2.lv_mission10Leash)), c_orderQueueAddToEnd);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SquadMovement_Init () {
    gt_SquadMovement = TriggerCreate("gt_SquadMovement_Func");
    TriggerEnable(gt_SquadMovement, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Saber 6 Arrives At Mayor
//--------------------------------------------------------------------------------------------------
bool gt_Saber6ArrivesAtMayor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_routeIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/74AE57D2"), gv_debug.lv_gameEvents);
    if (true) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_chapter_2.lv_mission10ReachedDasdan = true;
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/ACDA3585"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/6D4A90E8"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/256A7DED"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/0AC1E4D5"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/6C065281"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/D6CC4D11"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/AFD42EDA"));
        Wait(6.5, c_timeGame);
        UnitIssueOrder(gv_chapter_2.lv_mission10Saber6Commander, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(205))), c_orderQueueAddToEnd);
        UnitGroupIssueOrder(gv_chapter_2.lv_mission10Saber6Group, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(205))), c_orderQueueAddToEnd);
        TriggerEnable(gt_Saber6ArrivesAtWestTCP, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Saber6ArrivesAtMayor_Init () {
    gt_Saber6ArrivesAtMayor = TriggerCreate("gt_Saber6ArrivesAtMayor_Func");
    TriggerEnable(gt_Saber6ArrivesAtMayor, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Saber 6 Squad Death
//--------------------------------------------------------------------------------------------------
bool gt_Saber6SquadDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/A551E141"), gv_debug.lv_gameEvents);
    if ((gv_chapter_2.lv_mission10Saber6SoldierKilled == false)) {
        gv_chapter_2.lv_mission10Saber6SoldierKilled = true;
    }
    if ((libNtve_gf_UnitGroupIsDead(gv_chapter_2.lv_mission10Saber6Group) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        if ((UnitIsAlive(gv_chapter_2.lv_mission10Saber6Commander) == false)) {
            TriggerExecute(gt_EscalationEnd, true, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Saber6SquadDeath_Init () {
    gt_Saber6SquadDeath = TriggerCreate("gt_Saber6SquadDeath_Func");
    TriggerEnable(gt_Saber6SquadDeath, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Saber 6 Arrives At West TCP
//--------------------------------------------------------------------------------------------------
bool gt_Saber6ArrivesAtWestTCP_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/FE97E2D3"), gv_debug.lv_gameEvents);
    if ((EventUnit() == gv_chapter_2.lv_mission10Saber6Commander)) {
        gv_chapter_2.lv_mission10ReachedWestTCP = true;
        lib90F7C81D_gf_RemoveMinimapPingIndex(EventUnit());
    }
    else {
        gv_chapter_2.lv_mission10SquadReachedWestTCP += 1;
    }
    UnitRemove(EventUnit());
    if ((UnitIsAlive(gv_chapter_2.lv_mission10Saber6Commander) == false) && (libNtve_gf_UnitGroupIsDead(gv_chapter_2.lv_mission10Saber6Group) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_EscalationEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Saber6ArrivesAtWestTCP_Init () {
    gt_Saber6ArrivesAtWestTCP = TriggerCreate("gt_Saber6ArrivesAtWestTCP_Func");
    TriggerEnable(gt_Saber6ArrivesAtWestTCP, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escalation End
//--------------------------------------------------------------------------------------------------
bool gt_EscalationEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_xpGained;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/2AF1BFBA"), gv_debug.lv_gameEvents);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Saber6CommanderDeath, false);
    TriggerEnable(gt_Saber6SquadDeath, false);
    TriggerEnable(gt_Saber6ArrivesAtMayor, false);
    TriggerEnable(gt_Saber6ArrivesAtWestTCP, false);
    if ((gv_chapter_2.lv_mission10ReachedDasdan == true)) {
        lv_xpGained += lib90F7C81D_gf_GetModeXP("c2.1 Escalation (Enter Dasdan)");
    }
    if ((gv_chapter_2.lv_mission10ReachedWestTCP == true)) {
        lv_xpGained += lib90F7C81D_gf_GetModeXP("c2.1 Escalation (Leave For Thalim)");
    }
    lv_xpGained += (IntToFixed(gv_chapter_2.lv_mission10SquadReachedWestTCP) * lib90F7C81D_gf_GetModeXP("c2.1 Soldiers"));
    if (((gv_chapter_2.lv_mission10SquadReachedWestTCP > 0))) {
    }
    else {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/DD92A114"), gv_debug.lv_gameEvents);
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateFailed);
    }
    if ((gv_chapter_2.lv_mission10ReachedWestTCP == true)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/7A2BE353"), gv_debug.lv_gameEvents);
        if ((gv_chapter_2.lv_mission10Saber6CommanderKilled == false) && (gv_chapter_2.lv_mission10Saber6SoldierKilled == false)) {
            lib90F7C81D_gf_AwardAchievement(63);
        }
        gv_chapter_2.lv_passRate[0] = true;
        gv_campaign.lv_missionCompleted += 1;
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
        gf_AddHalfHeroLevel();
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/0278D68A"));
        Wait(4.0, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/7065B91B"));
    }
    else {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/B28AA06F"), gv_debug.lv_gameEvents);
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
        if ((libNtve_gf_UnitGroupIsDead(gv_chapter_2.lv_mission10Saber6Group) == true)) {
            lib90F7C81D_gf_MissionText(StringExternal("Param/Value/F8C97283"));
            Wait(4.0, c_timeGame);
            lib90F7C81D_gf_MissionText(StringExternal("Param/Value/A5D9F8C4"));
        }
    }
    Wait(2.0, c_timeGame);
    gf_XPGainGlobal(FixedToInt(lv_xpGained), StringExternal("Param/Value/FDEFA47B"));
    TriggerDestroy(gt_Saber6CommanderDeath);
    TriggerDestroy(gt_Saber6SquadDeath);
    TriggerDestroy(gt_Saber6ArrivesAtMayor);
    TriggerDestroy(gt_Saber6ArrivesAtWestTCP);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateHidden);
    Wait(RandomFixed(20.0, 40.0), c_timeGame);
    if ((gv_campaign.lv_singleMission == false)) {
        TriggerEnable(gt_BulwarkSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission2");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscalationEnd_Init () {
    gt_EscalationEnd = TriggerCreate("gt_EscalationEnd_Func");
    TriggerEnable(gt_EscalationEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bulwark Setup
//--------------------------------------------------------------------------------------------------
bool gt_BulwarkSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pointLocation;

    // Automatic Variable Declarations
    const int auto630998F5_ae = 32;
    const int auto630998F5_ai = 1;
    const int auto84AF3EEC_ae = 20;
    const int auto84AF3EEC_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/846D7001"), gv_debug.lv_gameEvents);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/64C59E75"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/C379A46D"));
    Wait(6.5, c_timeGame);
    TextExpressionSetToken("Param/Expression/6D972EA7", "A", IntToText(gv_chapter_2.lv_mission11RefugeeWave));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/6D972EA7"), StringExternal("Param/Value/3DF17171"), c_objectiveStateActive, true);
    lib90F7C81D_gv_mainObj = ObjectiveLastCreated();
    lv_pointLocation = 0;
    for ( ; ( (auto630998F5_ai >= 0 && lv_pointLocation <= auto630998F5_ae) || (auto630998F5_ai < 0 && lv_pointLocation >= auto630998F5_ae) ) ; lv_pointLocation += auto630998F5_ai ) {
        gv_chapter_2.lv_mission11EastRefugeeRoute[lv_pointLocation] = PointFromName(("CPM4-3_" + IntToString((lv_pointLocation + 1))));
    }
    lv_pointLocation = 0;
    for ( ; ( (auto84AF3EEC_ai >= 0 && lv_pointLocation <= auto84AF3EEC_ae) || (auto84AF3EEC_ai < 0 && lv_pointLocation >= auto84AF3EEC_ae) ) ; lv_pointLocation += auto84AF3EEC_ai ) {
        gv_chapter_2.lv_mission11SouthRefugeeRoute[lv_pointLocation] = PointFromName(("CPM4-2_" + IntToString((lv_pointLocation + 1))));
    }
    Wait(15.0, c_timeGame);
    TriggerEnable(gt_SpawnRefugees, true);
    TriggerExecute(gt_SpawnRefugees, true, false);
    TriggerEnable(gt_BulwarkUnstuck, true);
    TriggerEnable(gt_RefugeeDeath, true);
    TriggerEnable(gt_RefugeeEntersDasdan, true);
    TriggerEnable(gt_RefugeeEnd, true);
    Wait(60.0, c_timeGame);
    if ((gv_campaign.lv_singleMission == false)) {
        TriggerEnable(gt_PestControlSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission3");
    }
    while (!((gv_chapter_2.lv_mission12ApiaryFinished == true))) {
        Wait(3.0, c_timeGame);
    }
    Wait(RandomFixed(25.0, 40.0), c_timeGame);
    if ((gv_campaign.lv_singleMission == false)) {
        TriggerEnable(gt_AbdulSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission4");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BulwarkSetup_Init () {
    gt_BulwarkSetup = TriggerCreate("gt_BulwarkSetup_Func");
    TriggerEnable(gt_BulwarkSetup, false);
    lib90F7C81D_gf_CampaignEvent(gt_BulwarkSetup, "Chapter-2.Mission2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bulwark Unstuck
//--------------------------------------------------------------------------------------------------
bool gt_BulwarkUnstuck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitCaster), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(47))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BulwarkUnstuck_Init () {
    gt_BulwarkUnstuck = TriggerCreate("gt_BulwarkUnstuck_Func");
    TriggerEnable(gt_BulwarkUnstuck, false);
    TriggerAddEventPlayerEffectUsed(gt_BulwarkUnstuck, 0, "BulwarkAntiStuck");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Refugees
//--------------------------------------------------------------------------------------------------
bool gt_SpawnRefugees_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_tCPSpawn;
    int lv_spawnCount;
    int lv_temp;

    // Automatic Variable Declarations
    const int auto173DF61C_ae = 7;
    const int auto173DF61C_ai = 1;
    const int auto1632AA7E_ae = 3;
    const int auto1632AA7E_ai = 1;
    playergroup autoD30AEC9D_g;
    int autoD30AEC9D_var;
    unitgroup autoF0CD4ACA_g;
    int autoF0CD4ACA_u;
    unit autoF0CD4ACA_var;
    const int auto27DECCB7_ae = 31;
    const int auto27DECCB7_ai = 1;
    const int auto3D5FC6F2_ae = 19;
    const int auto3D5FC6F2_ai = 1;
    unitgroup auto1700C63B_g;
    int auto1700C63B_u;
    unit auto1700C63B_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_chapter_2.lv_mission11LastTCPSpawn == 1)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/953E8EBF"), gv_debug.lv_gameEvents);
        lv_tCPSpawn = RegionFromId(50);
        gv_chapter_2.lv_mission11LastTCPSpawn = 0;
    }
    else {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/3DDA25B1"), gv_debug.lv_gameEvents);
        lv_tCPSpawn = RegionFromId(51);
        gv_chapter_2.lv_mission11LastTCPSpawn = 1;
    }
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(lv_tCPSpawn), ColorWithAlpha(0.00, 25.10, 0.00, 0.00), 5.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/B02D5508"));
    lv_spawnCount = 1;
    for ( ; ( (auto173DF61C_ai >= 0 && lv_spawnCount <= auto173DF61C_ae) || (auto173DF61C_ai < 0 && lv_spawnCount >= auto173DF61C_ae) ) ; lv_spawnCount += auto173DF61C_ai ) {
        if ((RandomInt(0, 1) == 1)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "CivilianFemale", 0, 0, RegionRandomPoint(lv_tCPSpawn));
        }
        else {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Civilian", 0, 0, RegionRandomPoint(lv_tCPSpawn));
        }
        TriggerAddEventUnitDied(gt_RefugeeDeath, UnitRefFromUnit(UnitLastCreated()));
        TriggerAddEventUnitRegion(gt_RefugeeEntersDasdan, UnitRefFromUnit(UnitLastCreated()), RegionFromId(47), true);
        UnitBehaviorRemove(UnitLastCreated(), "CivilianWander", 1);
        UnitBehaviorAdd(UnitLastCreated(), "RefugeeSpeed", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "BulwarkAntiStuck", UnitLastCreated(), 1);
        UnitGroupAdd(gv_chapter_2.lv_mission11RefugeeGroups[gv_chapter_2.lv_mission11RefugeeWave], UnitLastCreated());
    }
    lv_spawnCount = 1;
    for ( ; ( (auto1632AA7E_ai >= 0 && lv_spawnCount <= auto1632AA7E_ae) || (auto1632AA7E_ai < 0 && lv_spawnCount >= auto1632AA7E_ae) ) ; lv_spawnCount += auto1632AA7E_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "PoliceOfficer", 0, 0, RegionRandomPoint(lv_tCPSpawn));
        TriggerAddEventUnitDied(gt_RefugeeDeath, UnitRefFromUnit(UnitLastCreated()));
        TriggerAddEventUnitRegion(gt_RefugeeEntersDasdan, UnitRefFromUnit(UnitLastCreated()), RegionFromId(47), true);
        UnitBehaviorAdd(UnitLastCreated(), "RefugeeSpeed", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "SelfAidDisable", UnitLastCreated(), 1);
        UnitGroupAdd(gv_chapter_2.lv_mission11RefugeeGroups[gv_chapter_2.lv_mission11RefugeeWave], UnitLastCreated());
    }
    autoD30AEC9D_g = lib90F7C81D_gv_players;
    autoD30AEC9D_var = -1;
    while (true) {
        autoD30AEC9D_var = PlayerGroupNextPlayer(autoD30AEC9D_g, autoD30AEC9D_var);
        if (autoD30AEC9D_var < 0) { break; }
        autoF0CD4ACA_g = gv_chapter_2.lv_mission11RefugeeGroups[gv_chapter_2.lv_mission11RefugeeWave];
        autoF0CD4ACA_u = UnitGroupCount(autoF0CD4ACA_g, c_unitCountAll);
        for (;; autoF0CD4ACA_u -= 1) {
            autoF0CD4ACA_var = UnitGroupUnitFromEnd(autoF0CD4ACA_g, autoF0CD4ACA_u);
            if (autoF0CD4ACA_var == null) { break; }
            libNtve_gf_ShareVisionofUnit(autoF0CD4ACA_var, true, autoD30AEC9D_var);
        }
    }
    if ((lv_tCPSpawn == RegionFromId(50))) {
        lv_temp = 0;
        for ( ; ( (auto3D5FC6F2_ai >= 0 && lv_temp <= auto3D5FC6F2_ae) || (auto3D5FC6F2_ai < 0 && lv_temp >= auto3D5FC6F2_ae) ) ; lv_temp += auto3D5FC6F2_ai ) {
            UnitGroupIssueOrder(gv_chapter_2.lv_mission11RefugeeGroups[gv_chapter_2.lv_mission11RefugeeWave], OrderTargetingPoint(AbilityCommand("attack", 0), gv_chapter_2.lv_mission11SouthRefugeeRoute[lv_temp]), c_orderQueueAddToEnd);
        }
    }
    else {
        lv_temp = 0;
        for ( ; ( (auto27DECCB7_ai >= 0 && lv_temp <= auto27DECCB7_ae) || (auto27DECCB7_ai < 0 && lv_temp >= auto27DECCB7_ae) ) ; lv_temp += auto27DECCB7_ai ) {
            UnitGroupIssueOrder(gv_chapter_2.lv_mission11RefugeeGroups[gv_chapter_2.lv_mission11RefugeeWave], OrderTargetingPoint(AbilityCommand("attack", 0), gv_chapter_2.lv_mission11EastRefugeeRoute[lv_temp]), c_orderQueueAddToEnd);
        }
    }
    gv_chapter_2.lv_mission11RefugeeWave += 1;
    TextExpressionSetToken("Param/Expression/57851949", "A", IntToText(gv_chapter_2.lv_mission11RefugeeWave));
    ObjectiveSetName(lib90F7C81D_gv_mainObj, TextExpressionAssemble("Param/Expression/57851949"));
    if ((gv_chapter_2.lv_mission11RefugeeWave == 10)) {
        TriggerEnable(gt_SpawnRefugees, false);
    }
    if ((gv_chapter_2.lv_mission11RefugeeWave == 3)) {
        auto1700C63B_g = gv_chapter_2.lv_mission11RefugeeGroups[0];
        auto1700C63B_u = UnitGroupCount(auto1700C63B_g, c_unitCountAll);
        for (;; auto1700C63B_u -= 1) {
            auto1700C63B_var = UnitGroupUnitFromEnd(auto1700C63B_g, auto1700C63B_u);
            if (auto1700C63B_var == null) { break; }
            UnitBehaviorAdd(auto1700C63B_var, "CivilianWander", auto1700C63B_var, 1);
        }
    }
    gf_CampaignScriptedSpawns(gv_campaign_Missions.lv_mission11Bulwark);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnRefugees_Init () {
    gt_SpawnRefugees = TriggerCreate("gt_SpawnRefugees_Func");
    TriggerEnable(gt_SpawnRefugees, false);
    TriggerAddEventTimePeriodic(gt_SpawnRefugees, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refugee Death
//--------------------------------------------------------------------------------------------------
bool gt_RefugeeDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_chapter_2.lv_mission11RefugeeWave == 10) && (libNtve_gf_UnitGroupIsDead(gv_chapter_2.lv_mission11RefugeeGroups[9]) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_RefugeeEntersDasdan, false);
        TriggerExecute(gt_RefugeeEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefugeeDeath_Init () {
    gt_RefugeeDeath = TriggerCreate("gt_RefugeeDeath_Func");
    TriggerEnable(gt_RefugeeDeath, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refugee Enters Dasdan
//--------------------------------------------------------------------------------------------------
bool gt_RefugeeEntersDasdan_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_arrayPosition;

    // Automatic Variable Declarations
    playergroup auto56328A18_g;
    int auto56328A18_var;
    const int autoF15D0C3A_ae = 9;
    const int autoF15D0C3A_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(199))), c_orderQueueReplace);
    UnitBehaviorRemove(EventUnit(), "RefugeeSpeed", 1);
    UnitBehaviorRemove(EventUnit(), "BulwarkAntiStuck", 1);
    auto56328A18_g = lib90F7C81D_gv_players;
    auto56328A18_var = -1;
    while (true) {
        auto56328A18_var = PlayerGroupNextPlayer(auto56328A18_g, auto56328A18_var);
        if (auto56328A18_var < 0) { break; }
        libNtve_gf_ShareVisionofUnit(EventUnit(), false, auto56328A18_var);
    }
    lv_arrayPosition = 0;
    for ( ; ( (autoF15D0C3A_ai >= 0 && lv_arrayPosition <= autoF15D0C3A_ae) || (autoF15D0C3A_ai < 0 && lv_arrayPosition >= autoF15D0C3A_ae) ) ; lv_arrayPosition += autoF15D0C3A_ai ) {
        if ((UnitGroupHasUnit(gv_chapter_2.lv_mission11RefugeeGroups[lv_arrayPosition], EventUnit()) == true) && (gv_chapter_2.lv_mission11RefugeeWaveEscorted[lv_arrayPosition] == 0)) {
            gv_chapter_2.lv_mission11RefugeeWaveEscorted[lv_arrayPosition] = 1;
            gv_chapter_2.lv_mission11WavesEscorted += 1;
            break;
        }
    }
    UnitBehaviorRemove(EventUnit(), "SelfAidDisable", 1);
    if ((UnitGetType(EventUnit()) != "PoliceOfficer")) {
        UnitBehaviorRemove(EventUnit(), "CivilianWander", 1);
        UnitWaitUntilIdle(EventUnit(), true);
        UnitBehaviorAdd(EventUnit(), "CivilianWander", EventUnit(), 1);
    }
    if ((gv_chapter_2.lv_mission11RefugeeWaveEscorted[9] == 1) && (TriggerIsEnabled(gt_RefugeeEnd) == true)) {
        TriggerExecute(gt_RefugeeEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefugeeEntersDasdan_Init () {
    gt_RefugeeEntersDasdan = TriggerCreate("gt_RefugeeEntersDasdan_Func");
    TriggerEnable(gt_RefugeeEntersDasdan, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refugee End
//--------------------------------------------------------------------------------------------------
bool gt_RefugeeEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_waveNumber;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/059151C5"), gv_debug.lv_gameEvents);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(15.0, c_timeGame);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/E8BDEC38"), gv_debug.lv_gameEvents);
    TriggerEnable(gt_RefugeeDeath, false);
    TriggerEnable(gt_RefugeeEntersDasdan, false);
    TriggerEnable(gt_BulwarkUnstuck, false);
    if ((gv_chapter_2.lv_mission11WavesEscorted > 0)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/765EA894"), gv_debug.lv_gameEvents);
        gv_chapter_2.lv_passRate[1] = true;
        gv_campaign.lv_missionCompleted += 1;
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
        TextExpressionSetToken("Param/Expression/40115253", "A", IntToText(gv_chapter_2.lv_mission11WavesEscorted));
        gf_XPGainGlobal(FixedToInt((gv_chapter_2.lv_mission11WavesEscorted * lib90F7C81D_gf_GetModeXP("c2.2 Refugees"))), TextExpressionAssemble("Param/Expression/40115253"));
        gf_AddHalfHeroLevel();
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/05E8CA50"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/E4D16093"));
    }
    else {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/AD85F20E"), gv_debug.lv_gameEvents);
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateFailed);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/37C1A54A"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/AFC3B2AF"));
    }
    Wait(5.0, c_timeGame);
    TriggerDestroy(gt_RefugeeDeath);
    TriggerDestroy(gt_BulwarkUnstuck);
    TriggerDestroy(gt_RefugeeEntersDasdan);
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateHidden);
    ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateHidden);
    ObjectiveSetState(lib90F7C81D_gv_thirdObj, c_objectiveStateHidden);
    Wait(RandomFixed(20.0, 40.0), c_timeGame);
    if ((gv_campaign.lv_singleMission == false)) {
        TriggerEnable(gt_TheGreatEscapeSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission5");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefugeeEnd_Init () {
    gt_RefugeeEnd = TriggerCreate("gt_RefugeeEnd_Func");
    TriggerEnable(gt_RefugeeEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pest Control Setup
//--------------------------------------------------------------------------------------------------
bool gt_PestControlSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/C361265A"), gv_debug.lv_gameEvents);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/FE4A2CD4"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/44CF2776"));
    Wait(3.0, c_timeGame);
    if ((PlayerGroupCount(lib90F7C81D_gv_players) <= 4)) {
        gv_chapter_2.lv_mission12ApiaryCount = 5;
    }
    else if ((PlayerGroupCount(lib90F7C81D_gv_players) >= 5) && (PlayerGroupCount(lib90F7C81D_gv_players) <= 8)) {
        gv_chapter_2.lv_mission12ApiaryCount = 7;
    }
    else if ((PlayerGroupCount(lib90F7C81D_gv_players) >= 9)) {
        gv_chapter_2.lv_mission12ApiaryCount = 9;
    }
    TextExpressionSetToken("Param/Expression/440E749A", "A", IntToText(gv_chapter_2.lv_mission12ApiariesKilled));
    TextExpressionSetToken("Param/Expression/440E749A", "B", IntToText(gv_chapter_2.lv_mission12ApiaryCount));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/440E749A"), StringExternal("Param/Value/E9A54644"), c_objectiveStateActive, true);
    lib90F7C81D_gv_secondObj = ObjectiveLastCreated();
    gf_SpawnApiaries();
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), true);
    TimerStart(lib90F7C81D_gv_missiontimer, 270.0, false, c_timeGame);
    TriggerEnable(gt_ApiaryDeath, true);
    TriggerEnable(gt_ApiaryEnd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PestControlSetup_Init () {
    gt_PestControlSetup = TriggerCreate("gt_PestControlSetup_Func");
    TriggerEnable(gt_PestControlSetup, false);
    lib90F7C81D_gf_CampaignEvent(gt_PestControlSetup, "Chapter-2.Mission3");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apiary Death
//--------------------------------------------------------------------------------------------------
bool gt_ApiaryDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_chapter_2.lv_mission12ApiariesKilled += 1;
    TextExpressionSetToken("Param/Expression/FB2A9C56", "A", IntToText(gv_chapter_2.lv_mission12ApiariesKilled));
    TextExpressionSetToken("Param/Expression/FB2A9C56", "B", IntToText(gv_chapter_2.lv_mission12ApiaryCount));
    ObjectiveSetName(lib90F7C81D_gv_secondObj, TextExpressionAssemble("Param/Expression/FB2A9C56"));
    if ((libNtve_gf_UnitGroupIsDead(gv_chapter_2.lv_mission12ApiaryGroup) == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        if ((lib90F7C81D_gf_DifficultyisGOE(3) == true)) {
            lib90F7C81D_gf_AwardAchievement(64);
        }
        TriggerExecute(gt_ApiaryEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApiaryDeath_Init () {
    gt_ApiaryDeath = TriggerCreate("gt_ApiaryDeath_Func");
    TriggerEnable(gt_ApiaryDeath, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apiary End
//--------------------------------------------------------------------------------------------------
bool gt_ApiaryEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ApiaryDeath, false);
    libNtve_gf_StopTimer(lib90F7C81D_gv_missiontimer);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), false);
    if ((gv_chapter_2.lv_mission12ApiariesKilled > 0)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/18840649"), gv_debug.lv_gameEvents);
        gv_chapter_2.lv_passRate[2] = true;
        ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateCompleted);
        gv_campaign.lv_missionCompleted += 1;
        gf_AddHalfHeroLevel();
        gf_XPGainGlobal(FixedToInt(Ceiling((IntToFixed(gv_chapter_2.lv_mission12ApiariesKilled) * lib90F7C81D_gf_GetModeXP("c2.3 Apiaries")))), (StringExternal("Param/Value/8736125B") + IntToText(gv_chapter_2.lv_mission12ApiariesKilled)));
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/EB2CC9B7"));
    }
    else {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/3B89716A"), gv_debug.lv_gameEvents);
        ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateFailed);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/C87744E8"));
        Wait(5.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/ACA74005"));
    }
    Wait(5.0, c_timeGame);
    gv_chapter_2.lv_mission12ApiaryFinished = true;
    TriggerDestroy(gt_ApiaryDeath);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApiaryEnd_Init () {
    gt_ApiaryEnd = TriggerCreate("gt_ApiaryEnd_Func");
    TriggerEnable(gt_ApiaryEnd, false);
    TriggerAddEventTimer(gt_ApiaryEnd, lib90F7C81D_gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Abdul Setup
//--------------------------------------------------------------------------------------------------
bool gt_AbdulSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_truckSpawnRegion;
    int lv_missionTime;

    // Automatic Variable Declarations
    fixed autoDCDE9385_at;

    // Variable Initialization
    lv_truckSpawnRegion = RegionFromId(23);

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/A172BA0A"), gv_debug.lv_gameEvents);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/E366C282"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/60ACF5D0"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/244EB628"));
    Wait(6.5, c_timeGame);
    ObjectiveCreate(StringExternal("Param/Value/C8899E52"), StringExternal("Param/Value/432E224E"), c_objectiveStateActive, true);
    lib90F7C81D_gv_thirdObj = ObjectiveLastCreated();
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), true);
    if ((lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (5) == true)) {
        lv_missionTime = 150;
    }
    else if ((lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (4) == true)) {
        lv_missionTime = 180;
    }
    else if ((lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (3) == true)) {
        lv_missionTime = 200;
    }
    else if (true) {
        lv_missionTime = 210;
    }
    TimerStart(lib90F7C81D_gv_missiontimer, lv_missionTime, false, c_timeGame);
    while (true) {
        gv_chapter_2.lv_mission13BreakdownPoint = RegionRandomPoint(RegionFromId(203));
        if ((PointPathingPassable(gv_chapter_2.lv_mission13BreakdownPoint) == true) && (PointPathingIsConnected(gv_chapter_2.lv_mission13BreakdownPoint, PointFromId(1254458203)) == true)) {
            break;
        }

        Wait(0.0625, c_timeGame);
    }
    RegionAddRegion(lv_truckSpawnRegion, RegionFromId(24));
    UnitCreate(1, "LMTV", 0, 0, RegionRandomPoint(lv_truckSpawnRegion), 270.0);
    gv_chapter_2.lv_mission13AbdulsTruck = UnitLastCreated();
    TriggerAddEventUnitRegion(gt_AbdulExit, UnitRefFromVariable("gv_chapter_2.lv_mission13AbdulsTruck"), RegionFromId(6), true);
    UnitBehaviorAdd(gv_chapter_2.lv_mission13AbdulsTruck, "AbdulTruckOverheat", gv_chapter_2.lv_mission13AbdulsTruck, 1);
    lib90F7C81D_gf_StoreMinimapPings(gv_chapter_2.lv_mission13AbdulsTruck, StringExternal("Param/Value/92859740"), Color(0.00, 25.10, 0.00), 0.65);
    libNtve_gf_MakeUnitInvulnerable(gv_chapter_2.lv_mission13AbdulsTruck, true);
    CatalogFieldValueModify(c_gameCatalogUnit, "LMTV", "Name", 0, "Abdul's Truck", c_upgradeOperationSet);
    UnitSetPropertyFixed(gv_chapter_2.lv_mission13AbdulsTruck, c_unitPropLifePercent, 30.0);
    UnitIssueOrder(gv_chapter_2.lv_mission13AbdulsTruck, OrderTargetingPoint(AbilityCommand("move", 0), gv_chapter_2.lv_mission13BreakdownPoint), c_orderQueueReplace);
    autoDCDE9385_at = 0;
    while (!((DistanceBetweenPoints(UnitGetPosition(gv_chapter_2.lv_mission13AbdulsTruck), gv_chapter_2.lv_mission13BreakdownPoint) <= 2.0)) && autoDCDE9385_at <= 30.0) {
        Wait(1.0, c_timeGame);
        autoDCDE9385_at = autoDCDE9385_at + 1.0;
    }
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/240B48F8"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/D9E604AF"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/CAC1B875"));
    UnitCreate(1, "RepairKit", 0, 0, PointFromId(1803363451), 270.0);
    gv_chapter_2.lv_mission13RepairKit = UnitLastCreated();
    lib90F7C81D_gf_MissionItemPingAddItem(UnitLastCreated());
    TriggerEnable(gt_AbdulEnd, true);
    TriggerEnable(gt_AbdulExit, true);
    TriggerEnable(gt_AbdulVehicleRepaired, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AbdulSetup_Init () {
    gt_AbdulSetup = TriggerCreate("gt_AbdulSetup_Func");
    TriggerEnable(gt_AbdulSetup, false);
    lib90F7C81D_gf_CampaignEvent(gt_AbdulSetup, "Chapter-2.Mission4");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Abdul Vehicle Repaired
//--------------------------------------------------------------------------------------------------
bool gt_AbdulVehicleRepaired_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    region lv_spawnRegion;
    fixed lv_chargecount;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/46750949"), gv_debug.lv_gameEvents);
    lib90F7C81D_gf_MissionItemPingRemoveItem(gv_chapter_2.lv_mission13RepairKit);
    gv_chapter_2.lv_mission13TruckRepaired = true;
    lv_spawnRegion = RegionCircle(gv_chapter_2.lv_mission13BreakdownPoint, 3.0);
    gf_SupplyCacheSpawnItem("AmmoCase", 1, lv_spawnRegion);
    UnitAddChargeUsed(UnitLastCreated(), "AmmoCharges", -6.0);
    lv_chargecount = lib90F7C81D_gf_ItemChargesRemaining(UnitLastCreated(), "AmmoCharges", 10.0);
    UnitSetInfoText(UnitLastCreated(), StringToText(""), (StringExternal("Param/Value/D207904E") + UnitGetName(UnitLastCreated()) + StringExternal("Param/Value/15B12A88") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/C0C42B67")), StringToText(""));
    gf_SupplyCacheSpawnItem("FirstAidKit", 1, lv_spawnRegion);
    UnitAddChargeUsed(UnitLastCreated(), "ItemCharges", -2.0);
    lv_chargecount = lib90F7C81D_gf_ItemChargesRemaining(UnitLastCreated(), "AmmoCharges", 5.0);
    UnitSetInfoText(UnitLastCreated(), StringToText(""), (StringExternal("Param/Value/6956AB77") + UnitGetName(UnitLastCreated()) + StringExternal("Param/Value/BA73A6BE") + FixedToText(lv_chargecount, c_fixedPrecisionAny) + StringExternal("Param/Value/642C5F99")), StringToText(""));
    gf_SupplyCacheSpawnItem("Flashlight", 1, lv_spawnRegion);
    UnitSetPropertyFixed(gv_chapter_2.lv_mission13AbdulsTruck, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(gv_chapter_2.lv_mission13AbdulsTruck, c_unitPropBaseMovementSpeed, 5.0);
    UnitIssueOrder(gv_chapter_2.lv_mission13AbdulsTruck, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(180080983)), c_orderQueueReplace);
    UnitIssueOrder(gv_chapter_2.lv_mission13AbdulsTruck, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(335333729)), c_orderQueueAddToEnd);
    lib90F7C81D_gf_AwardAchievement(65);
    TriggerExecute(gt_AbdulEnd, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AbdulVehicleRepaired_Init () {
    gt_AbdulVehicleRepaired = TriggerCreate("gt_AbdulVehicleRepaired_Func");
    TriggerEnable(gt_AbdulVehicleRepaired, false);
    TriggerAddEventUnitBehaviorChange(gt_AbdulVehicleRepaired, null, "TruckRepaired", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Abdul Exit
//--------------------------------------------------------------------------------------------------
bool gt_AbdulExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/FF11EA94"), gv_debug.lv_gameEvents);
    TriggerEnable(TriggerGetCurrent(), false);
    lib90F7C81D_gf_RemoveMinimapPingIndex(gv_chapter_2.lv_mission13AbdulsTruck);
    UnitRemove(EventUnit());
    gv_chapter_2.lv_mission13AbdulsTruck = null;
    TriggerDestroy(TriggerGetCurrent());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AbdulExit_Init () {
    gt_AbdulExit = TriggerCreate("gt_AbdulExit_Func");
    TriggerEnable(gt_AbdulExit, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Abdul End
//--------------------------------------------------------------------------------------------------
bool gt_AbdulEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_AbdulVehicleRepaired, false);
    libNtve_gf_StopTimer(lib90F7C81D_gv_missiontimer);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), false);
    if ((gv_chapter_2.lv_mission13TruckRepaired == true)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/0532F552"), gv_debug.lv_gameEvents);
        gv_chapter_2.lv_passRate[3] = true;
        gv_campaign.lv_missionCompleted += 1;
        ObjectiveSetState(lib90F7C81D_gv_thirdObj, c_objectiveStateCompleted);
        gf_AddHalfHeroLevel();
        gf_XPGainGlobal(FixedToInt(lib90F7C81D_gf_GetModeXP("c2.4 Abdul")), lib90F7C81D_gf_GetModeText("c2.4 Abdul"));
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/0E457F83"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/91AA444B"));
        Wait(5.0, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/FBAAAA8E"));
    }
    else {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/179F2378"), gv_debug.lv_gameEvents);
        TriggerEnable(gt_AbdulExit, false);
        TriggerDestroy(gt_AbdulExit);
        ObjectiveSetState(lib90F7C81D_gv_thirdObj, c_objectiveStateFailed);
        lib90F7C81D_gf_RemoveMinimapPingIndex(gv_chapter_2.lv_mission13AbdulsTruck);
        UnitRemove(gv_chapter_2.lv_mission13AbdulsTruck);
        lib90F7C81D_gf_MissionItemPingRemoveItem(gv_chapter_2.lv_mission13RepairKit);
        UnitRemove(gv_chapter_2.lv_mission13RepairKit);
        gv_chapter_2.lv_mission13RepairKit = null;
        gv_chapter_2.lv_mission13AbdulsTruck = null;
    }
    Wait(5.0, c_timeGame);
    TriggerDestroy(gt_AbdulVehicleRepaired);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AbdulEnd_Init () {
    gt_AbdulEnd = TriggerCreate("gt_AbdulEnd_Func");
    TriggerEnable(gt_AbdulEnd, false);
    TriggerAddEventTimer(gt_AbdulEnd, lib90F7C81D_gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: The Great Escape Setup
//--------------------------------------------------------------------------------------------------
bool gt_TheGreatEscapeSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoC18087A2_ae = 6;
    const int autoC18087A2_ai = 1;
    const int autoA5FE96A6_ae = 5;
    const int autoA5FE96A6_ai = 1;
    const int auto130D1DBB_ae = 5;
    const int auto130D1DBB_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/B415BC30"), gv_debug.lv_gameEvents);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/04FBF563"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/4175ED1C"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/DBF8B1C6"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/F9F4DAFC"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/1A18DB28"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/292C48A0"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/066BDE7B"));
    Wait(6.5, c_timeGame);
    gv_chapter_2.lv_mission14RefugeeCount = UnitCount(null, 0, RegionFromId(47), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    TextExpressionSetToken("Param/Expression/D173846B", "A", IntToText(gv_chapter_2.lv_mission14RefugeesEvacuated));
    TextExpressionSetToken("Param/Expression/D173846B", "B", IntToText(gv_chapter_2.lv_mission14RefugeeCount));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/D173846B"), StringExternal("Param/Value/3F3FF2B6"), c_objectiveStateActive, true);
    lib90F7C81D_gv_mainObj = ObjectiveLastCreated();
    TriggerEnable(gt_RefugeeExit, true);
    if ((gv_chapter_1.lv_mission05VehicleRepairCount == 0)) {
        TriggerEnable(gt_RefugeesRun, true);
        TriggerExecute(gt_RefugeesRun, true, false);
        Wait(30.0, c_timeGame);
        TriggerEnable(gt_PartingGiftSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission6");
    }
    else if (true) {
        gv_chapter_2.lv_mission14MotorPoolLocation = RandomInt(0, 1);
    }
    lv_index = 1;
    for ( ; ( (autoC18087A2_ai >= 0 && lv_index <= autoC18087A2_ae) || (autoC18087A2_ai < 0 && lv_index >= autoC18087A2_ae) ) ; lv_index += autoC18087A2_ai ) {
        gv_chapter_2.lv_mission14WestRoute0Points[(lv_index - 1)] = PointFromName(("CPM14.R0." + IntToString(lv_index)));
        gv_chapter_2.lv_mission14NorthRoute1Points[(lv_index - 1)] = PointFromName(("CPM14.R1." + IntToString(lv_index)));
    }
    lib90F7C81D_gf_InitConvoyPathDisplay(gv_chapter_2.lv_mission14WestRoute0Points[0], gv_chapter_2.lv_mission14WestRoute0Points[5], 0, false);
    lv_index = 0;
    for ( ; ( (autoA5FE96A6_ai >= 0 && lv_index <= autoA5FE96A6_ae) || (autoA5FE96A6_ai < 0 && lv_index >= autoA5FE96A6_ae) ) ; lv_index += autoA5FE96A6_ai ) {
        lib90F7C81D_gf_AddConvoyPathPoint(gv_chapter_2.lv_mission14WestRoute0Points[lv_index], 0);
    }
    lib90F7C81D_gf_InitConvoyPathDisplay(gv_chapter_2.lv_mission14NorthRoute1Points[0], gv_chapter_2.lv_mission14NorthRoute1Points[5], 1, false);
    lv_index = 0;
    for ( ; ( (auto130D1DBB_ai >= 0 && lv_index <= auto130D1DBB_ae) || (auto130D1DBB_ai < 0 && lv_index >= auto130D1DBB_ae) ) ; lv_index += auto130D1DBB_ai ) {
        lib90F7C81D_gf_AddConvoyPathPoint(gv_chapter_2.lv_mission14NorthRoute1Points[lv_index], 1);
    }
    TriggerEnable(gt_LoadUpCivilians, true);
    TriggerEnable(gt_CivEntersTruck, true);
    TriggerEnable(gt_RefugeesRun, true);
    TriggerEnable(gt_DasdanRefugeeDeath, true);
    TriggerEnable(gt_TheGreatEscapeEnd, true);
    TriggerEnable(gt_TrucksStuck, true);
    gf_StartTruckRoute();
    if ((gv_chapter_2.lv_mission14TruckUnitGroup == UnitGroupEmpty())) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/4D091F37"), gv_debug.lv_gameEvents);
        gf_StartTruckRoute();
    }
    gf_CampaignScriptedSpawns(gv_campaign_Missions.lv_mission14Evac);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TheGreatEscapeSetup_Init () {
    gt_TheGreatEscapeSetup = TriggerCreate("gt_TheGreatEscapeSetup_Func");
    TriggerEnable(gt_TheGreatEscapeSetup, false);
    lib90F7C81D_gf_CampaignEvent(gt_TheGreatEscapeSetup, "Chapter-2.Mission5");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Truck Enters Dasdan
//--------------------------------------------------------------------------------------------------
bool gt_TruckEntersDasdan_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/D7363D11"), gv_debug.lv_gameEvents);
    TriggerExecute(gt_LoadUpCivilians, true, false);
    if ((gv_chapter_2.lv_mission15Started == false)) {
        TriggerEnable(gt_PartingGiftSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission6");
    }
    else {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TruckEntersDasdan_Init () {
    gt_TruckEntersDasdan = TriggerCreate("gt_TruckEntersDasdan_Func");
    TriggerEnable(gt_TruckEntersDasdan, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Load Up Civilians
//--------------------------------------------------------------------------------------------------
bool gt_LoadUpCivilians_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_randomTruck;
    unitgroup lv_civillianUnitGroup;
    int lv_index;
    fixed lv_time;

    // Automatic Variable Declarations
    unitgroup auto2332F41C_g;
    int auto2332F41C_u;
    unit auto2332F41C_var;
    unitgroup auto22575BA2_g;
    int auto22575BA2_u;
    unit auto22575BA2_var;
    unitgroup auto2A0887BA_g;
    int auto2A0887BA_u;
    unit auto2A0887BA_var;
    unitgroup auto3F43C617_g;
    int auto3F43C617_u;
    unit auto3F43C617_var;
    unitgroup autoCE9C145D_g;
    int autoCE9C145D_u;
    unit autoCE9C145D_var;
    fixed auto89F3CC28_at;
    unitgroup auto15578558_g;
    int auto15578558_u;
    unit auto15578558_var;
    const int auto7042E763_ae = 1;
    const int auto7042E763_ai = -1;
    unitgroup auto69FDA1DC_g;
    int auto69FDA1DC_u;
    unit auto69FDA1DC_var;

    // Variable Initialization
    lv_civillianUnitGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/8F757EBC"), gv_debug.lv_gameEvents);
    while ((lv_time < 40.0)) {
        lv_time += 1.0;
        Wait(1.0, c_timeGame);
    }
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/C371514D"), gv_debug.lv_gameEvents);
    if ((gv_chapter_2.lv_mission14MotorPoolLocation == 0) && ((gv_chapter_1.lv_mission05MATVUnit[0] != null) || (gv_chapter_1.lv_mission05MATVUnit[1] != null) || (gv_chapter_1.lv_mission05MATVUnit[2] != null))) {
        lib90F7C81D_gf_ShowHidePathConvoy(false, 1);
        auto2332F41C_g = gv_chapter_2.lv_mission14TruckUnitGroup;
        auto2332F41C_u = UnitGroupCount(auto2332F41C_g, c_unitCountAll);
        for (;; auto2332F41C_u -= 1) {
            auto2332F41C_var = UnitGroupUnitFromEnd(auto2332F41C_g, auto2332F41C_u);
            if (auto2332F41C_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto2332F41C_var, "AnimBracketStart Work Stand,Work,Start Stand,Work Stand,Work,End");
        }
        auto22575BA2_g = UnitGroup(null, 0, RegionFromId(47), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), (gv_chapter_2.lv_mission14RefugeeCount / 2));
        auto22575BA2_u = UnitGroupCount(auto22575BA2_g, c_unitCountAll);
        for (;; auto22575BA2_u -= 1) {
            auto22575BA2_var = UnitGroupUnitFromEnd(auto22575BA2_g, auto22575BA2_u);
            if (auto22575BA2_var == null) { break; }
            if ((UnitHasBehavior2(auto22575BA2_var, "ReinforcePositionTimedLife") == true)) {
                continue;
            }
            lv_randomTruck = UnitGroupRandomUnit(gv_chapter_2.lv_mission14TruckUnitGroup, c_unitCountAlive);
            while ((DistanceBetweenPoints(UnitGetPosition(lv_randomTruck), UnitGetPosition(auto22575BA2_var)) < 5.0)) {
                lv_randomTruck = UnitGroupRandomUnit(gv_chapter_2.lv_mission14TruckUnitGroup, c_unitCountAlive);
                Wait(0.0625, c_timeGame);
            }
            UnitIssueOrder(auto22575BA2_var, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_randomTruck)), c_orderQueueReplace);
            TriggerAddEventUnitRegion(gt_CivEntersTruck, UnitRefFromUnit(auto22575BA2_var), RegionCircle(UnitGetPosition(lv_randomTruck), 3.0), true);
            UnitGroupAdd(lv_civillianUnitGroup, auto22575BA2_var);
        }
    }
    else if ((gv_chapter_2.lv_mission14MotorPoolLocation == 1) && ((gv_chapter_1.lv_mission05MATVUnit[3] != null) || (gv_chapter_1.lv_mission05MATVUnit[4] != null) || (gv_chapter_1.lv_mission05MATVUnit[5] != null))) {
        lib90F7C81D_gf_ShowHidePathConvoy(false, 0);
        auto2A0887BA_g = gv_chapter_2.lv_mission14TruckUnitGroup;
        auto2A0887BA_u = UnitGroupCount(auto2A0887BA_g, c_unitCountAll);
        for (;; auto2A0887BA_u -= 1) {
            auto2A0887BA_var = UnitGroupUnitFromEnd(auto2A0887BA_g, auto2A0887BA_u);
            if (auto2A0887BA_var == null) { break; }
            libNtve_gf_SendActorMessageToUnit(auto2A0887BA_var, "AnimBracketStart Work Stand,Work,Start Stand,Work Stand,Work,End");
        }
        auto3F43C617_g = UnitGroup(null, 0, RegionFromId(47), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), (gv_chapter_2.lv_mission14RefugeeCount / 2));
        auto3F43C617_u = UnitGroupCount(auto3F43C617_g, c_unitCountAll);
        for (;; auto3F43C617_u -= 1) {
            auto3F43C617_var = UnitGroupUnitFromEnd(auto3F43C617_g, auto3F43C617_u);
            if (auto3F43C617_var == null) { break; }
            if ((UnitHasBehavior2(auto3F43C617_var, "ReinforcePositionTimedLife") == true)) {
                continue;
            }
            lv_randomTruck = UnitGroupRandomUnit(gv_chapter_2.lv_mission14TruckUnitGroup, c_unitCountAlive);
            while ((DistanceBetweenPoints(UnitGetPosition(lv_randomTruck), UnitGetPosition(auto3F43C617_var)) < 5.0)) {
                lv_randomTruck = UnitGroupRandomUnit(gv_chapter_2.lv_mission14TruckUnitGroup, c_unitCountAlive);
                Wait(0.0625, c_timeGame);
            }
            UnitIssueOrder(auto3F43C617_var, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_randomTruck)), c_orderQueueReplace);
            TriggerAddEventUnitRegion(gt_CivEntersTruck, UnitRefFromUnit(auto3F43C617_var), RegionCircle(UnitGetPosition(lv_randomTruck), 3.0), true);
            UnitGroupAdd(lv_civillianUnitGroup, auto3F43C617_var);
        }
    }
    else if (true) {
        autoCE9C145D_g = UnitGroup(null, 0, RegionFromId(47), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoCE9C145D_u = UnitGroupCount(autoCE9C145D_g, c_unitCountAll);
        for (;; autoCE9C145D_u -= 1) {
            autoCE9C145D_var = UnitGroupUnitFromEnd(autoCE9C145D_g, autoCE9C145D_u);
            if (autoCE9C145D_var == null) { break; }
            if ((UnitHasBehavior2(autoCE9C145D_var, "ReinforcePositionTimedLife") == true)) {
                continue;
            }
            lv_randomTruck = UnitGroupRandomUnit(gv_chapter_2.lv_mission14TruckUnitGroup, c_unitCountAlive);
            while ((DistanceBetweenPoints(UnitGetPosition(lv_randomTruck), UnitGetPosition(autoCE9C145D_var)) < 5.0)) {
                lv_randomTruck = UnitGroupRandomUnit(gv_chapter_2.lv_mission14TruckUnitGroup, c_unitCountAlive);
                Wait(0.0625, c_timeGame);
                if ((UnitGroupCount(gv_chapter_2.lv_mission14TruckUnitGroup, c_unitCountAlive) == 1)) {
                    UnitIssueOrder(autoCE9C145D_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(87))), c_orderQueueReplace);
                }
            }
            UnitIssueOrder(autoCE9C145D_var, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_randomTruck)), c_orderQueueReplace);
            TriggerAddEventUnitRegion(gt_CivEntersTruck, UnitRefFromUnit(autoCE9C145D_var), RegionCircle(UnitGetPosition(lv_randomTruck), 3.0), true);
            UnitGroupAdd(lv_civillianUnitGroup, autoCE9C145D_var);
        }
    }
    auto89F3CC28_at = 0;
    while (!((lv_civillianUnitGroup == UnitGroupEmpty())) && auto89F3CC28_at <= 30.0) {
        Wait(1.0, c_timeGame);
        auto89F3CC28_at = auto89F3CC28_at + 1.0;
    }
    auto15578558_g = gv_chapter_2.lv_mission14TruckUnitGroup;
    auto15578558_u = UnitGroupCount(auto15578558_g, c_unitCountAll);
    for (;; auto15578558_u -= 1) {
        auto15578558_var = UnitGroupUnitFromEnd(auto15578558_g, auto15578558_u);
        if (auto15578558_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto15578558_var, "AnimBracketStop Work");
    }
    lv_index = 3;
    for ( ; ( (auto7042E763_ai >= 0 && lv_index <= auto7042E763_ae) || (auto7042E763_ai < 0 && lv_index >= auto7042E763_ae) ) ; lv_index += auto7042E763_ai ) {
        if ((lv_index == 3)) {
            UnitGroupIssueOrder(gv_chapter_2.lv_mission14TruckUnitGroup, OrderTargetingPoint(AbilityCommand("move", 0), gv_chapter_2.lv_mission14WestRoute0Points[lv_index]), c_orderQueueReplace);
        }
        else {
            UnitGroupIssueOrder(gv_chapter_2.lv_mission14TruckUnitGroup, OrderTargetingPoint(AbilityCommand("move", 0), gv_chapter_2.lv_mission14WestRoute0Points[lv_index]), c_orderQueueAddToEnd);
        }
    }
    UnitGroupIssueOrder(gv_chapter_2.lv_mission14TruckUnitGroup, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1815007939)), c_orderQueueAddToEnd);
    auto69FDA1DC_g = gv_chapter_2.lv_mission14TruckUnitGroup;
    auto69FDA1DC_u = UnitGroupCount(auto69FDA1DC_g, c_unitCountAll);
    for (;; auto69FDA1DC_u -= 1) {
        auto69FDA1DC_var = UnitGroupUnitFromEnd(auto69FDA1DC_g, auto69FDA1DC_u);
        if (auto69FDA1DC_var == null) { break; }
        UnitBehaviorAdd(auto69FDA1DC_var, "ConvoyAntiStuck", auto69FDA1DC_var, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LoadUpCivilians_Init () {
    gt_LoadUpCivilians = TriggerCreate("gt_LoadUpCivilians_Func");
    TriggerEnable(gt_LoadUpCivilians, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Civ Enters Truck
//--------------------------------------------------------------------------------------------------
bool gt_CivEntersTruck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_min;
    int lv_max;

    // Automatic Variable Declarations
    int auto4E5ED50C_ae;
    const int auto4E5ED50C_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_chapter_2.lv_mission14MotorPoolLocation == 1)) {
        lv_index = 0;
        lv_min = 0;
        lv_max = 2;
    }
    else {
        lv_index = 3;
        lv_min = 3;
        lv_max = 5;
    }
    auto4E5ED50C_ae = lv_max;
    lv_index = lv_min;
    for ( ; ( (auto4E5ED50C_ai >= 0 && lv_index <= auto4E5ED50C_ae) || (auto4E5ED50C_ai < 0 && lv_index >= auto4E5ED50C_ae) ) ; lv_index += auto4E5ED50C_ai ) {
        if ((UnitIsAlive(gv_chapter_1.lv_mission05MATVUnit[lv_index]) == true) && (DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_chapter_1.lv_mission05MATVUnit[lv_index])) < 5.0)) {
            gv_chapter_2.lv_mission14EvacGroups[lv_index] += 1;
            UnitRemove(EventUnit());
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CivEntersTruck_Init () {
    gt_CivEntersTruck = TriggerCreate("gt_CivEntersTruck_Func");
    TriggerEnable(gt_CivEntersTruck, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RefugeesRun
//--------------------------------------------------------------------------------------------------
bool gt_RefugeesRun_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoAAA0C550_g;
    int autoAAA0C550_u;
    unit autoAAA0C550_var;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/2D4456F3"), gv_debug.lv_gameEvents);
    lib90F7C81D_gf_ShowHidePathConvoy(false, 0);
    lib90F7C81D_gf_ShowHidePathConvoy(false, 1);
    autoAAA0C550_g = UnitGroup(null, 0, RegionFromId(47), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoAAA0C550_u = UnitGroupCount(autoAAA0C550_g, c_unitCountAll);
    for (;; autoAAA0C550_u -= 1) {
        autoAAA0C550_var = UnitGroupUnitFromEnd(autoAAA0C550_g, autoAAA0C550_u);
        if (autoAAA0C550_var == null) { break; }
        UnitGroupAdd(gv_chapter_2.lv_mission14CivUnitGroup, autoAAA0C550_var);
        TriggerAddEventUnitRegion(gt_RefugeeExit, UnitRefFromUnit(autoAAA0C550_var), RegionFromId(6), true);
        TriggerAddEventUnitDied(gt_DasdanRefugeeDeath, UnitRefFromUnit(autoAAA0C550_var));
    }
    UnitGroupIssueOrder(gv_chapter_2.lv_mission14CivUnitGroup, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1815007939)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefugeesRun_Init () {
    gt_RefugeesRun = TriggerCreate("gt_RefugeesRun_Func");
    TriggerEnable(gt_RefugeesRun, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refugee Exit
//--------------------------------------------------------------------------------------------------
bool gt_RefugeeExit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    bool lv_trucksAlive;

    // Automatic Variable Declarations
    const int autoCD2B7C25_ae = 5;
    const int autoCD2B7C25_ai = 1;
    const int auto9A0A38D3_ae = 5;
    const int auto9A0A38D3_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/C6C6B3E0"), gv_debug.lv_gameEvents);
    if ((UnitGetType(EventUnit()) == "MATVConvoy")) {
        UnitGroupRemove(gv_chapter_2.lv_mission14TruckUnitGroup, EventUnit());
        lib90F7C81D_gf_RemoveMinimapPingIndex(EventUnit());
        lv_index = 0;
        for ( ; ( (autoCD2B7C25_ai >= 0 && lv_index <= autoCD2B7C25_ae) || (autoCD2B7C25_ai < 0 && lv_index >= autoCD2B7C25_ae) ) ; lv_index += autoCD2B7C25_ai ) {
            if ((gv_chapter_1.lv_mission05MATVUnit[lv_index] == EventUnit())) {
                gv_chapter_2.lv_mission14RefugeesEvacuated += gv_chapter_2.lv_mission14EvacGroups[lv_index];
                break;
            }
        }
        gv_chapter_2.lv_mission14TrucksEvacuated += 1;
        TextExpressionSetToken("Param/Expression/41729566", "A", IntToText(gv_chapter_2.lv_mission14RefugeesEvacuated));
        TextExpressionSetToken("Param/Expression/41729566", "B", IntToText(gv_chapter_2.lv_mission14RefugeeCount));
        ObjectiveSetName(lib90F7C81D_gv_mainObj, TextExpressionAssemble("Param/Expression/41729566"));
    }
    else {
        UnitGroupRemove(gv_chapter_2.lv_mission14CivUnitGroup, EventUnit());
        gv_chapter_2.lv_mission14RefugeesEvacuated += 1;
        TextExpressionSetToken("Param/Expression/984B6178", "A", IntToText(gv_chapter_2.lv_mission14RefugeesEvacuated));
        TextExpressionSetToken("Param/Expression/984B6178", "B", IntToText(gv_chapter_2.lv_mission14RefugeeCount));
        ObjectiveSetName(lib90F7C81D_gv_mainObj, TextExpressionAssemble("Param/Expression/984B6178"));
    }
    UnitRemove(EventUnit());
    lv_index = 0;
    for ( ; ( (auto9A0A38D3_ai >= 0 && lv_index <= auto9A0A38D3_ae) || (auto9A0A38D3_ai < 0 && lv_index >= auto9A0A38D3_ae) ) ; lv_index += auto9A0A38D3_ai ) {
        if ((UnitIsAlive(gv_chapter_1.lv_mission05MATVUnit[lv_index]) == true)) {
            lv_trucksAlive = true;
            break;
        }
    }
    if ((lv_trucksAlive == true) && (libNtve_gf_UnitGroupIsDead(gv_chapter_2.lv_mission14TruckUnitGroup) == true)) {
        gf_StartTruckRoute();
    }
    else if ((lv_trucksAlive == false) && (libNtve_gf_UnitGroupIsDead(gv_chapter_2.lv_mission14TruckUnitGroup) == true) && (libNtve_gf_UnitGroupIsDead(gv_chapter_2.lv_mission14CivUnitGroup) == true)) {
        TriggerExecute(gt_TheGreatEscapeEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefugeeExit_Init () {
    gt_RefugeeExit = TriggerCreate("gt_RefugeeExit_Func");
    TriggerEnable(gt_RefugeeExit, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dasdan Refugee Death
//--------------------------------------------------------------------------------------------------
bool gt_DasdanRefugeeDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    bool lv_trucksAlive;

    // Automatic Variable Declarations
    const int auto70A45DFB_ae = 5;
    const int auto70A45DFB_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/FF8D8984"), gv_debug.lv_gameEvents);
    if ((UnitGetType(EventUnit()) == "MATVConvoy")) {
        UnitGroupRemove(gv_chapter_2.lv_mission14TruckUnitGroup, EventUnit());
        lib90F7C81D_gf_RemoveMinimapPingIndex(EventUnit());
    }
    else {
        UnitGroupRemove(gv_chapter_2.lv_mission14CivUnitGroup, EventUnit());
    }
    UnitRemove(EventUnit());
    if ((UnitGetType(EventUnit()) == "MATVConvoy") && (libNtve_gf_UnitGroupIsDead(gv_chapter_2.lv_mission14TruckUnitGroup) == true)) {
        if ((gv_chapter_2.lv_mission15Started == false)) {
            TriggerEnable(gt_PartingGiftSetup, true);
            lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission6");
        }
        lv_index = 0;
        for ( ; ( (auto70A45DFB_ai >= 0 && lv_index <= auto70A45DFB_ae) || (auto70A45DFB_ai < 0 && lv_index >= auto70A45DFB_ae) ) ; lv_index += auto70A45DFB_ai ) {
            if ((UnitIsAlive(gv_chapter_1.lv_mission05MATVUnit[lv_index]) == true)) {
                lv_trucksAlive = true;
                break;
            }
        }
        if ((lv_trucksAlive == true)) {
            gf_StartTruckRoute();
        }
        else if ((lv_trucksAlive == false) && (UnitCount(null, 0, RegionFromId(47), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMechanical) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0)) {
            TriggerEnable(gt_RefugeesRun, true);
            TriggerExecute(gt_RefugeesRun, true, false);
        }
        else if (true) {
            TriggerExecute(gt_TheGreatEscapeEnd, true, false);
        }
    }
    else if ((libNtve_gf_UnitGroupIsDead(gv_chapter_2.lv_mission14TruckUnitGroup) == true) && (libNtve_gf_UnitGroupIsDead(gv_chapter_2.lv_mission14CivUnitGroup) == true)) {
        TriggerExecute(gt_TheGreatEscapeEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DasdanRefugeeDeath_Init () {
    gt_DasdanRefugeeDeath = TriggerCreate("gt_DasdanRefugeeDeath_Func");
    TriggerEnable(gt_DasdanRefugeeDeath, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: The Great Escape End
//--------------------------------------------------------------------------------------------------
bool gt_TheGreatEscapeEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_RefugeeExit, false);
    TriggerEnable(gt_TruckEntersDasdan, false);
    TriggerEnable(gt_LoadUpCivilians, false);
    TriggerEnable(gt_CivEntersTruck, false);
    TriggerEnable(gt_RefugeesRun, false);
    TriggerEnable(gt_DasdanRefugeeDeath, false);
    TriggerEnable(gt_TrucksStuck, false);
    lib90F7C81D_gf_RemoveConvoyPathDisplay();
    if ((((gv_chapter_1.lv_passRate[0] == false) && (gv_chapter_2.lv_mission14RefugeesEvacuated >= 1)) || ((gv_chapter_1.lv_passRate[0] == true) && (gv_chapter_2.lv_mission14TrucksEvacuated >= 1)))) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/25EE653B"), gv_debug.lv_gameEvents);
        gv_chapter_2.lv_passRate[4] = true;
        gv_campaign.lv_missionCompleted += 1;
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
        gf_AddHalfHeroLevel();
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/766C69A4"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/D26EBE7A"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/C8802C07"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/74F7F0DD"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/601B62B8"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/CDD46B8A"));
    }
    else {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/20EA9A5C"), gv_debug.lv_gameEvents);
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateFailed);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/437CC481"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/D6AB7C12"));
        Wait(6.5, c_timeGame);
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/D9D5A5CE"));
    }
    Wait(2.0, c_timeGame);
    TextExpressionSetToken("Param/Expression/177CB507", "A", IntToText(gv_chapter_2.lv_mission14TrucksEvacuated));
    TextExpressionSetToken("Param/Expression/177CB507", "B", IntToText(gv_chapter_2.lv_mission14RefugeesEvacuated));
    TextExpressionSetToken("Param/Expression/177CB507", "C", IntToText(gv_chapter_2.lv_mission14RefugeeCount));
    gf_XPGainGlobal(FixedToInt(((gv_chapter_2.lv_mission14TrucksEvacuated * lib90F7C81D_gf_GetModeXP("c2.5 Escape (Trucks)")) + Ceiling((gv_chapter_2.lv_mission14RefugeesEvacuated * lib90F7C81D_gf_GetModeXP("c2.5 Escape (Civs)"))))), TextExpressionAssemble("Param/Expression/177CB507"));
    TriggerDestroy(gt_TruckEntersDasdan);
    TriggerDestroy(gt_LoadUpCivilians);
    TriggerDestroy(gt_CivEntersTruck);
    TriggerDestroy(gt_RefugeesRun);
    TriggerDestroy(gt_RefugeeExit);
    TriggerDestroy(gt_DasdanRefugeeDeath);
    TriggerDestroy(gt_TrucksStuck);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateHidden);
    if ((TriggerIsEnabled(gt_PartingGiftEnd) == false)) {
        Wait(RandomFixed(5.0, 10.0), c_timeGame);
        if ((gv_campaign.lv_singleMission == false)) {
            TriggerEnable(gt_Chapter2EndingSetup, true);
            lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission7");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TheGreatEscapeEnd_Init () {
    gt_TheGreatEscapeEnd = TriggerCreate("gt_TheGreatEscapeEnd_Func");
    TriggerEnable(gt_TheGreatEscapeEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Trucks Stuck
//--------------------------------------------------------------------------------------------------
bool gt_TrucksStuck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupIssueOrder(gv_chapter_2.lv_mission14TruckUnitGroup, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1815007939)), c_orderQueueAddToEnd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrucksStuck_Init () {
    gt_TrucksStuck = TriggerCreate("gt_TrucksStuck_Func");
    TriggerEnable(gt_TrucksStuck, false);
    TriggerAddEventPlayerEffectUsed(gt_TrucksStuck, 0, "LMTVAntiStuck");
    TriggerAddEventPlayerEffectUsed(gt_TrucksStuck, 0, "ConvoyAntiStuck");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Parting Gift Setup
//--------------------------------------------------------------------------------------------------
bool gt_PartingGiftSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_players;
    region lv_darreusSpawnRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_darreusSpawnRegion = RegionFromId(9);

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_chapter_2.lv_mission15Started = true;
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/2A4D392D"), gv_debug.lv_gameEvents);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/BC2B6008"));
    ObjectiveCreate(StringExternal("Param/Value/A36924C5"), StringExternal("Param/Value/94D5298F"), c_objectiveStateActive, true);
    lib90F7C81D_gv_secondObj = ObjectiveLastCreated();
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), true);
    TimerStart(lib90F7C81D_gv_missiontimer, 300.0, false, c_timeGame);
    lv_players = PlayerGroupCount(lib90F7C81D_gv_players);
    if ((lib90F7C81D_gf_DifficultyisLOE(2) == true)) {
        if ((lv_players <= 4)) {
            CatalogFieldValueModify(c_gameCatalogUnit, "Darreus", "LifeStart", 14, FixedToString(0.5, c_fixedPrecisionAny), c_upgradeOperationMultiply);
            CatalogFieldValueModify(c_gameCatalogUnit, "Darreus", "LifeMax", 14, FixedToString(0.5, c_fixedPrecisionAny), c_upgradeOperationMultiply);
            CatalogFieldValueModify(c_gameCatalogUnit, "Darreus", "ShieldsStart", 14, FixedToString(0.25, c_fixedPrecisionAny), c_upgradeOperationMultiply);
            CatalogFieldValueModify(c_gameCatalogUnit, "Darreus", "ShieldsMax", 14, FixedToString(0.25, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        }
        else if ((lv_players > 4) && (lv_players < 9)) {
            CatalogFieldValueModify(c_gameCatalogUnit, "Darreus", "LifeStart", 14, FixedToString(0.75, c_fixedPrecisionAny), c_upgradeOperationMultiply);
            CatalogFieldValueModify(c_gameCatalogUnit, "Darreus", "LifeMax", 14, FixedToString(0.75, c_fixedPrecisionAny), c_upgradeOperationMultiply);
            CatalogFieldValueModify(c_gameCatalogUnit, "Darreus", "ShieldsStart", 14, FixedToString(0.5, c_fixedPrecisionAny), c_upgradeOperationMultiply);
            CatalogFieldValueModify(c_gameCatalogUnit, "Darreus", "ShieldsMax", 14, FixedToString(0.5, c_fixedPrecisionAny), c_upgradeOperationMultiply);
        }
    }
    RegionAddRegion(lv_darreusSpawnRegion, RegionFromId(11));
    RegionAddRegion(lv_darreusSpawnRegion, RegionFromId(10));
    RegionAddRegion(lv_darreusSpawnRegion, RegionFromId(12));
    RegionAddRegion(lv_darreusSpawnRegion, RegionFromId(14));
    RegionAddRegion(lv_darreusSpawnRegion, RegionFromId(13));
    UnitCreate(1, "Darreus", 0, 14, RegionRandomPoint(lv_darreusSpawnRegion), 270.0);
    gv_chapter_2.lv_mission15DarruesUnit = UnitLastCreated();
    UnitGroupAdd(lib90F7C81D_gv_undeadGroup, gv_chapter_2.lv_mission15DarruesUnit);
    UnitIssueOrder(gv_chapter_2.lv_mission15DarruesUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(lib90F7C81D_gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    TriggerAddEventUnitDied(gt_DarreusDeath, UnitRefFromVariable("gv_chapter_2.lv_mission15DarruesUnit"));
    HookupBossBarUAD(gv_chapter_2.lv_mission15DarruesUnit, StringExternal("Param/Value/E7BADA1D"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
    PingSetScale(PingLastCreated(), 0.5);
    PingSetTooltip(PingLastCreated(), UnitGetName(UnitLastCreated()));
    PingSetUnit(PingLastCreated(), UnitLastCreated());
    libHots_gf_StorePingForUnit(UnitLastCreated(), 1, PingLastCreated());
    TriggerEnable(gt_DarreusDeath, true);
    TriggerEnable(gt_PartingGiftEnd, true);
    gf_CampaignScriptedSpawns(gv_campaign_Missions.lv_mission15Darreus);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PartingGiftSetup_Init () {
    gt_PartingGiftSetup = TriggerCreate("gt_PartingGiftSetup_Func");
    TriggerEnable(gt_PartingGiftSetup, false);
    lib90F7C81D_gf_CampaignEvent(gt_PartingGiftSetup, "Chapter-2.Mission6");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DarreusDeath
//--------------------------------------------------------------------------------------------------
bool gt_DarreusDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_chapter_2.lv_mission15DarreusKilled = true;
    PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    TriggerExecute(gt_PartingGiftEnd, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DarreusDeath_Init () {
    gt_DarreusDeath = TriggerCreate("gt_DarreusDeath_Func");
    TriggerEnable(gt_DarreusDeath, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Parting Gift End
//--------------------------------------------------------------------------------------------------
bool gt_PartingGiftEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_darreusSpawnRegion;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_darreusSpawnRegion = RegionFromId(9);

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_DarreusDeath, false);
    libNtve_gf_StopTimer(lib90F7C81D_gv_missiontimer);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), false);
    BossBarHideUAD();
    if ((gv_chapter_2.lv_mission15DarreusKilled == true)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/392BAD4A"), gv_debug.lv_gameEvents);
        if ((lib90F7C81D_gf_DifficultyisGOE(3) == true)) {
            lib90F7C81D_gf_AwardAchievement(66);
        }
        gv_chapter_2.lv_passRate[5] = true;
        gv_campaign.lv_missionCompleted += 1;
        ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateCompleted);
        gf_AddHalfHeroLevel();
        gf_XPGainGlobal(FixedToInt(lib90F7C81D_gf_GetModeXP("c2.6 Parting")), lib90F7C81D_gf_GetModeText("c2.6 Parting"));
    }
    else {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/60AC5B63"), gv_debug.lv_gameEvents);
        ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateFailed);
        PingDestroy(libHots_gf_PingStoredForUnit(gv_chapter_2.lv_mission15DarruesUnit, 1));
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateHidden);
    gv_chapter_2.lv_mission15DarruesUnit = null;
    TriggerDestroy(gt_DarreusDeath);
    if ((TriggerIsEnabled(gt_TheGreatEscapeEnd) == false)) {
        Wait(RandomFixed(5.0, 10.0), c_timeGame);
        if ((gv_campaign.lv_singleMission == false)) {
            TriggerEnable(gt_Chapter2EndingSetup, true);
            lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission7");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PartingGiftEnd_Init () {
    gt_PartingGiftEnd = TriggerCreate("gt_PartingGiftEnd_Func");
    TriggerEnable(gt_PartingGiftEnd, false);
    TriggerAddEventTimer(gt_PartingGiftEnd, lib90F7C81D_gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chapter 2 Ending Setup
//--------------------------------------------------------------------------------------------------
bool gt_Chapter2EndingSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto3A037B56_g;
    int auto3A037B56_var;
    unitgroup auto898009FB_g;
    int auto898009FB_u;
    unit auto898009FB_var;
    unitgroup autoA5CA4B7E_g;
    int autoA5CA4B7E_u;
    unit autoA5CA4B7E_var;
    unitgroup autoBA77E3A5_g;
    int autoBA77E3A5_u;
    unit autoBA77E3A5_var;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "DrumsOfWar", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/24217DF9"), gv_debug.lv_gameEvents);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/2B738694"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/4F2ED6C4"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/F54EE837"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/66DB8F5E"));
    ObjectiveCreate(StringExternal("Param/Value/A7A8E9E2"), StringExternal("Param/Value/CE081647"), c_objectiveStateActive, true);
    lib90F7C81D_gv_thirdObj = ObjectiveLastCreated();
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), true);
    TimerStart(lib90F7C81D_gv_missiontimer, 240.0, false, c_timeGame);
    auto3A037B56_g = lib90F7C81D_gv_players;
    auto3A037B56_var = -1;
    while (true) {
        auto3A037B56_var = PlayerGroupNextPlayer(auto3A037B56_g, auto3A037B56_var);
        if (auto3A037B56_var < 0) { break; }
        gv_chapter_2.lv_mission16InfectedT3KilledStart += PlayerScoreValueGetAsInt(auto3A037B56_var, "UnitsKilledCount");
        gv_chapter_2.lv_mission16InfectedT1KilledStart += PlayerScoreValueGetAsInt(auto3A037B56_var, "MassiveKills");
    }
    auto898009FB_g = lib90F7C81D_gv_heroesGroup;
    auto898009FB_u = UnitGroupCount(auto898009FB_g, c_unitCountAll);
    for (;; auto898009FB_u -= 1) {
        auto898009FB_var = UnitGroupUnitFromEnd(auto898009FB_g, auto898009FB_u);
        if (auto898009FB_var == null) { break; }
        UnitBehaviorAddPlayer(auto898009FB_var, "ThePlague", 14, 1);
        if ((UnitGetType(auto898009FB_var) == "SFAAT")) {
            TextExpressionSetToken("Param/Expression/DC4E4F31", "A", IntToText(UnitGroupCount(lib90F7C81D_gv_sFAAT.lv_localNationals, c_unitCountAlive)));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/DC4E4F31"), true);
            UnitAbilityEnable(auto898009FB_var, "RecruitLN", false);
            UnitAbilityReset(auto898009FB_var, AbilityCommand("RecruitLN", 0), c_spendLocationAll);
            gv_chapter_2.lv_mission16SnapshotLN = UnitGroupCount(lib90F7C81D_gv_sFAAT.lv_localNationals, c_unitCountAlive);
        }
    }
    autoA5CA4B7E_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA5CA4B7E_u = UnitGroupCount(autoA5CA4B7E_g, c_unitCountAll);
    for (;; autoA5CA4B7E_u -= 1) {
        autoA5CA4B7E_var = UnitGroupUnitFromEnd(autoA5CA4B7E_g, autoA5CA4B7E_u);
        if (autoA5CA4B7E_var == null) { break; }
        UnitBehaviorAddPlayer(autoA5CA4B7E_var, "ThePlague", 14, 1);
    }
    autoBA77E3A5_g = UnitGroup("VulcanMK88SentryGun", 0, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBA77E3A5_u = UnitGroupCount(autoBA77E3A5_g, c_unitCountAll);
    for (;; autoBA77E3A5_u -= 1) {
        autoBA77E3A5_var = UnitGroupUnitFromEnd(autoBA77E3A5_g, autoBA77E3A5_u);
        if (autoBA77E3A5_var == null) { break; }
        UnitIssueOrder(autoBA77E3A5_var, OrderSetAutoCast(AbilityCommand("ReloadVulcanTurretDummy", 0), false), c_orderQueueReplace);
    }
    lib90F7C81D_gf_SetSpawnLoopTimer(lib90F7C81D_ge_LoopType_PlagueSpawns, 30.0);
    gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_PlagueSpawns, true);
    TriggerEnable(gt_Chapter2End, true);
    lib90F7C81D_gv_gameOverOverride = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Chapter2EndingSetup_Init () {
    gt_Chapter2EndingSetup = TriggerCreate("gt_Chapter2EndingSetup_Func");
    TriggerEnable(gt_Chapter2EndingSetup, false);
    lib90F7C81D_gf_CampaignEvent(gt_Chapter2EndingSetup, "Chapter-2.Mission7");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chapter 2 End
//--------------------------------------------------------------------------------------------------
bool gt_Chapter2End_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_scoreMassiveKills;
    int lv_scoreNonMassiveKills;

    // Automatic Variable Declarations
    playergroup auto7CB98FEE_g;
    int auto7CB98FEE_var;
    unitgroup auto865C2E0A_g;
    int auto865C2E0A_u;
    unit auto865C2E0A_var;
    unitgroup auto312FB65D_g;
    int auto312FB65D_u;
    unit auto312FB65D_var;
    unitgroup auto73B9B685_g;
    int auto73B9B685_u;
    unit auto73B9B685_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_PlagueSpawns, false);
    libNtve_gf_StopTimer(lib90F7C81D_gv_missiontimer);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), false);
    gv_campaign.lv_missionCompleted += 1;
    if ((gv_campaign.lv_missionCompleted == 7)) {
        lib90F7C81D_gf_AwardAchievement(67);
    }
    ObjectiveSetState(lib90F7C81D_gv_thirdObj, c_objectiveStateCompleted);
    auto7CB98FEE_g = lib90F7C81D_gv_players;
    auto7CB98FEE_var = -1;
    while (true) {
        auto7CB98FEE_var = PlayerGroupNextPlayer(auto7CB98FEE_g, auto7CB98FEE_var);
        if (auto7CB98FEE_var < 0) { break; }
        gv_chapter_2.lv_mission16InfectedT3KilledEnd += PlayerScoreValueGetAsInt(auto7CB98FEE_var, "UnitsKilledCount");
        gv_chapter_2.lv_mission16InfectedT1KilledEnd += PlayerScoreValueGetAsInt(auto7CB98FEE_var, "MassiveKills");
    }
    lv_scoreNonMassiveKills = (gv_chapter_2.lv_mission16InfectedT3KilledEnd - gv_chapter_2.lv_mission16InfectedT3KilledStart);
    lv_scoreMassiveKills = (gv_chapter_2.lv_mission16InfectedT1KilledEnd - gv_chapter_2.lv_mission16InfectedT1KilledStart);
    gf_XPGainGlobal(FixedToInt((libNtve_gf_ArithmeticRealClamp(IntToFixed((lv_scoreNonMassiveKills / 30)), 0.0, 10.0) * lib90F7C81D_gf_GetModeXP("c2.7 Plague Zombies"))), lib90F7C81D_gf_GetModeText("c2.7 Plague Zombies"));
    gf_XPGainGlobal(FixedToInt((libNtve_gf_ArithmeticRealClamp(IntToFixed((lv_scoreMassiveKills / 10)), 0.0, 10.0) * lib90F7C81D_gf_GetModeXP("c2.7 Plague T1"))), lib90F7C81D_gf_GetModeText("c2.7 Plague T1"));
    Wait(5.0, c_timeGame);
    ObjectiveSetState(lib90F7C81D_gv_thirdObj, c_objectiveStateHidden);
    gf_PauseSpawning(true);
    auto865C2E0A_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto865C2E0A_u = UnitGroupCount(auto865C2E0A_g, c_unitCountAll);
    for (;; auto865C2E0A_u -= 1) {
        auto865C2E0A_var = UnitGroupUnitFromEnd(auto865C2E0A_g, auto865C2E0A_u);
        if (auto865C2E0A_var == null) { break; }
        UnitKill(auto865C2E0A_var);
    }
    auto312FB65D_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto312FB65D_u = UnitGroupCount(auto312FB65D_g, c_unitCountAll);
    for (;; auto312FB65D_u -= 1) {
        auto312FB65D_var = UnitGroupUnitFromEnd(auto312FB65D_g, auto312FB65D_u);
        if (auto312FB65D_var == null) { break; }
        UnitKill(auto312FB65D_var);
    }
    auto73B9B685_g = lib90F7C81D_gv_heroesGroup;
    auto73B9B685_u = UnitGroupCount(auto73B9B685_g, c_unitCountAll);
    for (;; auto73B9B685_u -= 1) {
        auto73B9B685_var = UnitGroupUnitFromEnd(auto73B9B685_g, auto73B9B685_u);
        if (auto73B9B685_var == null) { break; }
        UnitBehaviorRemove(auto73B9B685_var, "ThePlague", 1);
        UnitKill(auto73B9B685_var);
    }
    DialogControlHookupStandard(c_triggerControlTypePanel, "$ChapterTransition");
    gv_chapter_2.lv_transitionFrame = DialogControlLastCreated();
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    DialogControlSendAnimationEvent(gv_chapter_2.lv_transitionFrame, PlayerGroupAll(), "Display");
    Wait(4.0, c_timeGame);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/AAAE9A9F"), StringExternal("Param/Value/B3C0F0B8"), 0.0, SoundLink("UI_Nova_BriefingTextCallout_Open", -1), SoundLink("UI_TextPrintout", -1));
    SoundPlayForPlayer(SoundLink("Ghost_Death", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(6.0, c_timeGame);
    UIHideTextCrawl(PlayerGroupAll());
    if ((gv_campaign.lv_singleMission == false)) {
        TriggerEnable(gt_TheOldCrewSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-3.Mission1");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Chapter2End_Init () {
    gt_Chapter2End = TriggerCreate("gt_Chapter2End_Func");
    TriggerEnable(gt_Chapter2End, false);
    TriggerAddEventTimer(gt_Chapter2End, lib90F7C81D_gv_missiontimer);
    lib90F7C81D_gf_GameEvent(gt_Chapter2End, "GameOver");
}

//--------------------------------------------------------------------------------------------------
// Trigger: The Old Crew Setup
//--------------------------------------------------------------------------------------------------
bool gt_TheOldCrewSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_campaign.lv_missionCompleted = 0;
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/E78AF43F"), gv_debug.lv_gameEvents);
    gv_mutateBuffCount = 0;
    libNtve_gf_SetDialogItemText(lib90F7C81D_gv_mutationLabel, IntToText(gv_mutateBuffCount), PlayerGroupAll());
    libNtve_gf_SetUpgradeLevelForPlayer(14, "MutationUpgrade", gv_mutateBuffCount);
    libNtve_gf_SetUpgradeLevelForPlayer(15, "ChineseEquipment", 1);
    UserDataSetInt("SpawnedItems", "Special Items", "Group Allowed", 1, 1);
    DialogControlSendAnimationEvent(gv_chapter_2.lv_transitionFrame, PlayerGroupAll(), "Hide");
    CameraSetBounds(PlayerGroupAll(), RegionFromId(207), true);
    gf_Chapter3Items();
    gf_OutlawPhantom();
    gf_AddHeroLevels(1);
    gf_PauseSpawning(false);
    gv_chapter_3.lv_rATarget = RegionFromId(30);
    lib90F7C81D_gf_PMCDifficulty();
    PlayerAddResponse(15, "PMCDeath");
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Agent", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/B026EBBB"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/E39A7405"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/9B331FE5"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/3706E54D"));
    ObjectiveCreate(StringExternal("Param/Value/CD20F876"), StringExternal("Param/Value/B4E28519"), c_objectiveStateActive, true);
    lib90F7C81D_gv_mainObj = ObjectiveLastCreated();
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), true);
    TimerStart(lib90F7C81D_gv_missiontimer, 240.0, false, c_timeGame);
    TriggerEnable(gt_TheOldCrewEnd, true);
    if ((lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (1) || lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (2))) {
        gv_chapter_3.lv_rASquadSize = 2;
        lib90F7C81D_gf_SetSpawnLoopTimer(lib90F7C81D_ge_LoopType_CampaignRA, 30.0);
    }
    else if (lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (3)) {
        gv_chapter_3.lv_rASquadSize = 3;
        lib90F7C81D_gf_SetSpawnLoopTimer(lib90F7C81D_ge_LoopType_CampaignRA, 24.0);
    }
    else if (true) {
        gv_chapter_3.lv_rASquadSize = 4;
        lib90F7C81D_gf_SetSpawnLoopTimer(lib90F7C81D_ge_LoopType_CampaignRA, 24.0);
    }
    if ((PlayerGroupCount(lib90F7C81D_gv_players) <= 4)) {
        gv_chapter_3.lv_rASquadCount = 3;
    }
    else if ((PlayerGroupCount(lib90F7C81D_gv_players) >= 5) && (PlayerGroupCount(lib90F7C81D_gv_players) <= 8)) {
        gv_chapter_3.lv_rASquadCount = 5;
    }
    else if ((PlayerGroupCount(lib90F7C81D_gv_players) >= 9)) {
        gv_chapter_3.lv_rASquadCount = 7;
    }
    gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_CampaignRA, true);
    gf_CampaignScriptedSpawns(gv_campaign_Missions.lv_mission17OldCrew);
    TriggerEnable(gt_TheOldCrewEnd, true);
    TimerStart(lib90F7C81D_gv_missiontimer2, 60.0, false, c_timeGame);
    TriggerEnable(gt_PhantomReinforcements, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TheOldCrewSetup_Init () {
    gt_TheOldCrewSetup = TriggerCreate("gt_TheOldCrewSetup_Func");
    TriggerEnable(gt_TheOldCrewSetup, false);
    lib90F7C81D_gf_CampaignEvent(gt_TheOldCrewSetup, "Chapter-3.Mission1");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Phantom Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_PhantomReinforcements_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_phantom;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/7348FAE7"), gv_debug.lv_gameEvents);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/37A44428"));
    libNtve_gf_UnitCreateFacingPoint(1, "ColonistShipFlying", 0, 13, PointFromId(834723397), PointFromId(1254458203));
    lv_phantom = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(lv_phantom, true);
    UnitSetTeamColorIndex(lv_phantom, 14);
    UnitIssueOrder(lv_phantom, OrderTargetingPoint(AbilityCommand("ColonistShipLand", 0), PointFromId(1254458203)), c_orderQueueReplace);
    UnitSetHeight(lv_phantom, 3.0, 3.0);
    libNtve_gf_ShowHideUnit(lv_phantom, false);
    Wait(0.5, c_timeGame);
    libNtve_gf_ShowHideUnit(lv_phantom, true);
    Wait(16.0, c_timeGame);
    gf_SpawnOutlawSoldiers(2);
    Wait(2.0, c_timeGame);
    UnitIssueOrder(lv_phantom, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(lv_phantom, true);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_phantom), "Fly", "Land Forward", 0, c_animTimeDefault);
    UnitIssueOrder(lv_phantom, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(12))), c_orderQueueReplace);
    Wait(5.0, c_timeGame);
    UnitRemove(lv_phantom);
    lv_phantom = null;
    gv_chapter_3.lv_mission17Reinforcements += 1;
    if ((gv_chapter_3.lv_mission17Reinforcements >= 3)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
        TimerStart(lib90F7C81D_gv_missiontimer2, 45.0, false, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PhantomReinforcements_Init () {
    gt_PhantomReinforcements = TriggerCreate("gt_PhantomReinforcements_Func");
    TriggerEnable(gt_PhantomReinforcements, false);
    TriggerAddEventTimer(gt_PhantomReinforcements, lib90F7C81D_gv_missiontimer2);
}

//--------------------------------------------------------------------------------------------------
// Trigger: The Old Crew End
//--------------------------------------------------------------------------------------------------
bool gt_TheOldCrewEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_PhantomReinforcements, false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/14CF52E9"), gv_debug.lv_gameEvents);
    gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_CampaignRA, false);
    libNtve_gf_StopTimer(lib90F7C81D_gv_missiontimer);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), false);
    if (((IntToFixed(UnitGroupCount(UnitGroupFilterRegion(lib90F7C81D_gv_heroesGroup, RegionCircle(RegionGetCenter(RegionFromId(30)), 10.0), 0), c_unitCountAlive)) * gv_chapter_3.lv_mission17AirportScaleFactor) >= (gf_CalculateUnitGroupSupply(UnitGroupFilterRegion(lib90F7C81D_gv_undeadGroup, RegionCircle(RegionGetCenter(RegionFromId(30)), 10.0), 0)) + gf_CalculateUnitGroupSupply(UnitGroupFilterRegion(lib90F7C81D_gv_rAGroup, RegionCircle(RegionGetCenter(RegionFromId(30)), 10.0), 0))))) {
        gv_chapter_3.lv_mission17AirportSecured = true;
    }
    if ((gv_chapter_3.lv_mission17AirportSecured == true)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/F9139794"), gv_debug.lv_gameEvents);
        gv_chapter_3.lv_passRate[0] = true;
        gv_campaign.lv_missionCompleted += 1;
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
        gf_AddHalfHeroLevel();
        gf_XPGainGlobal(FixedToInt(lib90F7C81D_gf_GetModeXP("c3.1 The Old Crew")), lib90F7C81D_gf_GetModeText("c3.1 The Old Crew"));
    }
    else {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/32D3E226"), gv_debug.lv_gameEvents);
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateFailed);
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateHidden);
    TriggerDestroy(gt_PhantomReinforcements);
    CameraSetBounds(PlayerGroupAll(), RegionEntireMap(), true);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    gf_CreateCrashSite();
    Wait(RandomFixed(20.0, 40.0), c_timeGame);
    if ((gv_campaign.lv_singleMission == false)) {
        TriggerEnable(gt_ForTheRebellionSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-3.Mission2");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TheOldCrewEnd_Init () {
    gt_TheOldCrewEnd = TriggerCreate("gt_TheOldCrewEnd_Func");
    TriggerEnable(gt_TheOldCrewEnd, false);
    TriggerAddEventTimer(gt_TheOldCrewEnd, lib90F7C81D_gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: For The Rebellion Setup
//--------------------------------------------------------------------------------------------------
bool gt_ForTheRebellionSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_loopcount;

    // Automatic Variable Declarations
    unitgroup auto77DD797E_g;
    int auto77DD797E_u;
    unit auto77DD797E_var;
    const int autoE1DA2F3F_n = 12;
    int autoE1DA2F3F_i;
    const int auto783B4D99_n = 4;
    int auto783B4D99_i;
    const int auto681B803E_n = 2;
    int auto681B803E_i;
    unitgroup auto9132229E_g;
    int auto9132229E_u;
    unit auto9132229E_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/6AFCC48C"), gv_debug.lv_gameEvents);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Centurion", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/31A5598B"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/2D351890"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/437C05F3"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/80A6CE20"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/B9355E32"));
    Wait(6.5, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(1437327644), ColorWithAlpha(0.00, 0.00, 50.20, 49.41), 0.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/048AA5F3"));
    gv_chapter_3.lv_mission18RebelPing = PingLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/03F252C8"), StringExternal("Param/Value/408B734A"), c_objectiveStateActive, true);
    lib90F7C81D_gv_mainObj = ObjectiveLastCreated();
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), true);
    TimerStart(lib90F7C81D_gv_missiontimer, 240.0, false, c_timeGame);
    gv_chapter_3.lv_rATarget = RegionFromId(263);
    TriggerEnable(gt_ForTheRebellionEnd, true);
    TriggerEnable(gt_Rebel6CommanderDeath, true);
    if ((lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (1) || lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (2))) {
        gv_chapter_3.lv_rASquadSize = 5;
        lib90F7C81D_gf_SetSpawnLoopTimer(lib90F7C81D_ge_LoopType_CampaignRA, 30.0);
    }
    else if (lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (3)) {
        gv_chapter_3.lv_rASquadSize = 6;
        lib90F7C81D_gf_SetSpawnLoopTimer(lib90F7C81D_ge_LoopType_CampaignRA, 24.0);
    }
    else if (true) {
        gv_chapter_3.lv_rASquadSize = 8;
        lib90F7C81D_gf_SetSpawnLoopTimer(lib90F7C81D_ge_LoopType_CampaignRA, 24.0);
    }
    if ((PlayerGroupCount(lib90F7C81D_gv_players) <= 4)) {
        gv_chapter_3.lv_rASquadCount = 2;
    }
    else if ((PlayerGroupCount(lib90F7C81D_gv_players) >= 5) && (PlayerGroupCount(lib90F7C81D_gv_players) <= 8)) {
        gv_chapter_3.lv_rASquadCount = 2;
    }
    else if ((PlayerGroupCount(lib90F7C81D_gv_players) >= 9)) {
        gv_chapter_3.lv_rASquadCount = 2;
    }
    auto77DD797E_g = UnitGroup(null, 13, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto77DD797E_u = UnitGroupCount(auto77DD797E_g, c_unitCountAll);
    for (;; auto77DD797E_u -= 1) {
        auto77DD797E_var = UnitGroupUnitFromEnd(auto77DD797E_g, auto77DD797E_u);
        if (auto77DD797E_var == null) { break; }
        UnitIssueOrder(auto77DD797E_var, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(265))), c_orderQueueReplace);
        UnitGroupAdd(gv_chapter_3.lv_mission18RebelSquad, auto77DD797E_var);
    }
    CatalogFieldValueModify(c_gameCatalogUnit, "InfantryCommander", "Name", 13, "Rebel 6 Commander", c_upgradeOperationSet);
    CatalogFieldValueModify(c_gameCatalogUnit, "InfantryCommander", "Description", 13, "Rebel 6 Commander", c_upgradeOperationSet);
    UnitCreate(1, "InfantryCommander", 0, 13, PointFromId(568064643), 270.0);
    gv_chapter_3.lv_mission18RebelCommander = UnitLastCreated();
    TriggerAddEventUnitDied(gt_Rebel6CommanderDeath, UnitRefFromVariable("gv_chapter_3.lv_mission18RebelCommander"));
    for (autoE1DA2F3F_i = 1; autoE1DA2F3F_i <= autoE1DA2F3F_n; autoE1DA2F3F_i += 1) {
        UnitCreate(1, "InfantryRifleman", 0, 13, RegionRandomPoint(RegionFromId(265)), 270.0);
        UnitGroupAdd(gv_chapter_3.lv_mission18RebelSquad, UnitLastCreated());
    }
    for (auto783B4D99_i = 1; auto783B4D99_i <= auto783B4D99_n; auto783B4D99_i += 1) {
        UnitCreate(1, "InfantryAutomaticRifleman", 0, 13, RegionRandomPoint(RegionFromId(265)), 270.0);
        UnitGroupAdd(gv_chapter_3.lv_mission18RebelSquad, UnitLastCreated());
        UnitCreate(1, "InfantryMarksman", 0, 13, RegionRandomPoint(RegionFromId(265)), 270.0);
        UnitGroupAdd(gv_chapter_3.lv_mission18RebelSquad, UnitLastCreated());
    }
    for (auto681B803E_i = 1; auto681B803E_i <= auto681B803E_n; auto681B803E_i += 1) {
        UnitCreate(1, "InfantryShotgunner", 0, 13, RegionRandomPoint(RegionFromId(265)), 270.0);
        UnitGroupAdd(gv_chapter_3.lv_mission18RebelSquad, UnitLastCreated());
    }
    gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_CampaignRA, true);
    gf_CampaignScriptedSpawns(gv_campaign_Missions.lv_mission18Rebellion);
    auto9132229E_g = lib90F7C81D_gv_heroesGroup;
    auto9132229E_u = UnitGroupCount(auto9132229E_g, c_unitCountAll);
    for (;; auto9132229E_u -= 1) {
        auto9132229E_var = UnitGroupUnitFromEnd(auto9132229E_g, auto9132229E_u);
        if (auto9132229E_var == null) { break; }
        if ((UnitGetType(auto9132229E_var) == "SFAAT")) {
            RegionSetCenter(RegionFromId(62), RegionGetCenter(RegionFromId(263)));
            UnitAbilityEnable(auto9132229E_var, "RecruitLN", true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForTheRebellionSetup_Init () {
    gt_ForTheRebellionSetup = TriggerCreate("gt_ForTheRebellionSetup_Func");
    TriggerEnable(gt_ForTheRebellionSetup, false);
    lib90F7C81D_gf_CampaignEvent(gt_ForTheRebellionSetup, "Chapter-3.Mission2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rebel 6 Commander Death
//--------------------------------------------------------------------------------------------------
bool gt_Rebel6CommanderDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/69060E54"), gv_debug.lv_gameEvents);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/FBF7B17A"));
    TriggerExecute(gt_ForTheRebellionEnd, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Rebel6CommanderDeath_Init () {
    gt_Rebel6CommanderDeath = TriggerCreate("gt_Rebel6CommanderDeath_Func");
    TriggerEnable(gt_Rebel6CommanderDeath, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: For The Rebellion End
//--------------------------------------------------------------------------------------------------
bool gt_ForTheRebellionEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_xpGained;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Rebel6CommanderDeath, false);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/82FA735B"), gv_debug.lv_gameEvents);
    gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_CampaignRA, false);
    libNtve_gf_StopTimer(lib90F7C81D_gv_missiontimer);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), false);
    if ((UnitIsAlive(gv_chapter_3.lv_mission18RebelCommander) == false)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/99968AD0"), gv_debug.lv_gameEvents);
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateFailed);
    }
    else {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/67FA0058"), gv_debug.lv_gameEvents);
        gv_chapter_3.lv_passRate[1] = true;
        if ((UnitIsAlive(gv_chapter_3.lv_mission18RebelCommander) == true)) {
            lv_xpGained += lib90F7C81D_gf_GetModeXP("c3.2 For The Rebellion (Commander)");
            libNtve_gf_MakeUnitInvulnerable(gv_chapter_3.lv_mission18RebelCommander, true);
        }
        if ((libNtve_gf_UnitGroupIsDead(gv_chapter_3.lv_mission18RebelSquad) == false)) {
            lv_xpGained += (UnitGroupCount(gv_chapter_3.lv_mission18RebelSquad, c_unitCountAlive) * lib90F7C81D_gf_GetModeXP("c3.2 For The Rebellion (Member)"));
        }
        gv_campaign.lv_missionCompleted += 1;
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
        gf_AddHalfHeroLevel();
        gf_XPGainGlobal(FixedToInt(lv_xpGained), StringExternal("Param/Value/AE89ED4D"));
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateHidden);
    PingDestroy(gv_chapter_3.lv_mission18RebelPing);
    TriggerDestroy(gt_Rebel6CommanderDeath);
    Wait(RandomFixed(20.0, 40.0), c_timeGame);
    if ((gv_campaign.lv_singleMission == false)) {
        TriggerEnable(gt_WhatsThePlanSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-3.Mission3");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForTheRebellionEnd_Init () {
    gt_ForTheRebellionEnd = TriggerCreate("gt_ForTheRebellionEnd_Func");
    TriggerEnable(gt_ForTheRebellionEnd, false);
    TriggerAddEventTimer(gt_ForTheRebellionEnd, lib90F7C81D_gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Whats The Plan Setup
//--------------------------------------------------------------------------------------------------
bool gt_WhatsThePlanSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    region[12] lv_house;
    unitgroup lv_rAUnits;

    // Automatic Variable Declarations
    const int autoD80C4D3A_ae = 11;
    const int autoD80C4D3A_ai = 1;
    unitgroup autoA8EC8467_g;
    int autoA8EC8467_u;
    unit autoA8EC8467_var;
    const int autoB27EE44E_ae = 23;
    const int autoB27EE44E_ai = 1;
    const int auto266B744F_ae = 4;
    const int auto266B744F_ai = 1;
    const int auto8C5C45DA_ae = 8;
    const int auto8C5C45DA_ai = 1;
    const int autoDE5103C3_ae = 4;
    const int autoDE5103C3_ai = 1;
    const int auto8C1C845B_ae = 30;
    const int auto8C1C845B_ai = 1;
    const int auto4B5387F7_ae = 11;
    const int auto4B5387F7_ai = 1;
    const int autoE4BD88EE_ae = 6;
    const int autoE4BD88EE_ai = 1;
    unitgroup autoDDAC802F_g;
    int autoDDAC802F_u;
    unit autoDDAC802F_var;

    // Variable Initialization
    lv_rAUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/B6241959"), gv_debug.lv_gameEvents);
    if ((RandomInt(0, 1) == 0)) {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Thunder", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
        SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Lieutenant", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/C588876E"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/77371DE6"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/235D0C01"));
    lv_index = 1;
    for ( ; ( (autoD80C4D3A_ai >= 0 && lv_index <= autoD80C4D3A_ae) || (autoD80C4D3A_ai < 0 && lv_index >= autoD80C4D3A_ae) ) ; lv_index += autoD80C4D3A_ai ) {
        gv_chapter_3.lv_mission19HouseRegion[lv_index] = RegionFromName("CC3.M19.House " + (IntToString(lv_index)));
        libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(gv_chapter_3.lv_mission19HouseRegion[lv_index]));
        gv_chapter_3.lv_mission19HouseRegionActor[lv_index] = libNtve_gf_ActorLastCreated();
        ActorSend(gv_chapter_3.lv_mission19HouseRegionActor[lv_index], "SetScale 0.500000");
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_chapter_3.lv_mission19HouseRegion[lv_index]), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
        gv_chapter_3.lv_mission19HouseLocationPing[lv_index] = PingLastCreated();
        PingSetTooltip(gv_chapter_3.lv_mission19HouseLocationPing[lv_index], StringExternal("Param/Value/A4CE2E4E"));
        PingSetScale(gv_chapter_3.lv_mission19HouseLocationPing[lv_index], 0.5);
        autoA8EC8467_g = lib90F7C81D_gv_heroesGroup;
        autoA8EC8467_u = UnitGroupCount(autoA8EC8467_g, c_unitCountAll);
        for (;; autoA8EC8467_u -= 1) {
            autoA8EC8467_var = UnitGroupUnitFromEnd(autoA8EC8467_g, autoA8EC8467_u);
            if (autoA8EC8467_var == null) { break; }
            TriggerAddEventUnitRegion(gt_PlayerEntersSearchRegion, UnitRefFromUnit(autoA8EC8467_var), gv_chapter_3.lv_mission19HouseRegion[lv_index], true);
            TriggerAddEventUnitRegion(gt_PlayerExitsSearchRegion, UnitRefFromUnit(autoA8EC8467_var), gv_chapter_3.lv_mission19HouseRegion[lv_index], false);
        }
    }
    gv_chapter_3.lv_mission19DocumentLocation = gv_chapter_3.lv_mission19HouseRegion[RandomInt(1, 11)];
    ObjectiveCreate(StringExternal("Param/Value/FEB2E186"), StringExternal("Param/Value/D516258D"), c_objectiveStateActive, true);
    lib90F7C81D_gv_mainObj = ObjectiveLastCreated();
    if ((lib90F7C81D_gf_DifficultyisGOE(2) == true)) {
        lv_index = 1;
        for ( ; ( (autoB27EE44E_ai >= 0 && lv_index <= autoB27EE44E_ae) || (autoB27EE44E_ai < 0 && lv_index >= autoB27EE44E_ae) ) ; lv_index += autoB27EE44E_ai ) {
            UnitCreate(1, "InfantryRifleman", 0, 15, PointFromName("CC3.M19.Rifle " + (IntToString(lv_index))), 270.0);
            UnitAbilityEnable(UnitLastCreated(), "PMCIssueOrderAttackWhenIdle", false);
        }
        lv_index = 1;
        for ( ; ( (auto266B744F_ai >= 0 && lv_index <= auto266B744F_ae) || (auto266B744F_ai < 0 && lv_index >= auto266B744F_ae) ) ; lv_index += auto266B744F_ai ) {
            UnitCreate(1, "InfantryAutomaticRifleman", 0, 15, PointFromName("CC3.M19.AR " + (IntToString(lv_index))), 270.0);
            UnitAbilityEnable(UnitLastCreated(), "PMCIssueOrderAttackWhenIdle", false);
        }
    }
    if ((lib90F7C81D_gf_DifficultyisGOE(3) == true)) {
        lv_index = 1;
        for ( ; ( (auto8C5C45DA_ai >= 0 && lv_index <= auto8C5C45DA_ae) || (auto8C5C45DA_ai < 0 && lv_index >= auto8C5C45DA_ae) ) ; lv_index += auto8C5C45DA_ai ) {
            UnitCreate(1, "InfantryRifleman", 0, 15, RegionRandomPoint(RegionFromId(223)), 270.0);
            UnitAbilityEnable(UnitLastCreated(), "PMCIssueOrderAttackWhenIdle", false);
        }
        lv_index = 1;
        for ( ; ( (autoDE5103C3_ai >= 0 && lv_index <= autoDE5103C3_ae) || (autoDE5103C3_ai < 0 && lv_index >= autoDE5103C3_ae) ) ; lv_index += autoDE5103C3_ai ) {
            UnitCreate(1, "InfantryMarksman", 0, 15, PointFromName("CC3.M19.Marks " + (IntToString(lv_index))), 270.0);
            UnitAbilityEnable(UnitLastCreated(), "PMCIssueOrderAttackWhenIdle", false);
        }
    }
    if ((lib90F7C81D_gf_DifficultyisGOE(4) == true)) {
        lv_index = 24;
        for ( ; ( (auto8C1C845B_ai >= 0 && lv_index <= auto8C1C845B_ae) || (auto8C1C845B_ai < 0 && lv_index >= auto8C1C845B_ae) ) ; lv_index += auto8C1C845B_ai ) {
            UnitCreate(1, "InfantryRifleman", 0, 15, PointFromName("CC3.M19.Rifle " + (IntToString(lv_index))), 270.0);
            UnitAbilityEnable(UnitLastCreated(), "PMCIssueOrderAttackWhenIdle", false);
        }
        lv_index = 5;
        for ( ; ( (auto4B5387F7_ai >= 0 && lv_index <= auto4B5387F7_ae) || (auto4B5387F7_ai < 0 && lv_index >= auto4B5387F7_ae) ) ; lv_index += auto4B5387F7_ai ) {
            UnitCreate(1, "InfantryAutomaticRifleman", 0, 15, PointFromName("CC3.M19.AR " + (IntToString(lv_index))), 270.0);
            UnitAbilityEnable(UnitLastCreated(), "PMCIssueOrderAttackWhenIdle", false);
        }
        lv_index = 5;
        for ( ; ( (autoE4BD88EE_ai >= 0 && lv_index <= autoE4BD88EE_ae) || (autoE4BD88EE_ai < 0 && lv_index >= autoE4BD88EE_ae) ) ; lv_index += autoE4BD88EE_ai ) {
            UnitCreate(1, "InfantryMarksman", 0, 15, PointFromName("CC3.M19.Marks " + (IntToString(lv_index))), 270.0);
            UnitAbilityEnable(UnitLastCreated(), "PMCIssueOrderAttackWhenIdle", false);
        }
        UnitCreate(1, "InfantryForwardObserver", 0, 15, RegionRandomPoint(RegionFromId(204)), 270.0);
        UnitAbilityEnable(UnitLastCreated(), "PMCIssueOrderAttackWhenIdle", false);
    }
    lv_rAUnits = UnitGroup(null, 15, RegionFromId(47), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDDAC802F_g = lv_rAUnits;
    autoDDAC802F_u = UnitGroupCount(autoDDAC802F_g, c_unitCountAll);
    for (;; autoDDAC802F_u -= 1) {
        autoDDAC802F_var = UnitGroupUnitFromEnd(autoDDAC802F_g, autoDDAC802F_u);
        if (autoDDAC802F_var == null) { break; }
        if ((UnitHasBehavior2(autoDDAC802F_var, "RASquadLeader") == false)) {
            UnitSetInfoText(autoDDAC802F_var, StringExternal("Param/Value/86F84068"), StringToText(""), StringToText(""));
        }
    }
    UnitGroupAddUnitGroup(lib90F7C81D_gv_rAGroup, lv_rAUnits);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), true);
    TimerStart(lib90F7C81D_gv_missiontimer, 390.0, false, c_timeGame);
    TriggerEnable(gt_HouseSearched, true);
    TriggerEnable(gt_PlayerEntersSearchRegion, true);
    TriggerEnable(gt_PlayerExitsSearchRegion, true);
    TriggerEnable(gt_WhatsThePlanEnd, true);
    gf_CampaignScriptedSpawns(gv_campaign_Missions.lv_mission19ThePlan);
    if ((gv_chapter_3.lv_passRate[1] == true)) {
        TriggerEnable(gt_WartimeProductionSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-3.Mission4");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WhatsThePlanSetup_Init () {
    gt_WhatsThePlanSetup = TriggerCreate("gt_WhatsThePlanSetup_Func");
    TriggerEnable(gt_WhatsThePlanSetup, false);
    lib90F7C81D_gf_CampaignEvent(gt_WhatsThePlanSetup, "Chapter-3.Mission3");
}

//--------------------------------------------------------------------------------------------------
// Trigger: House Searched
//--------------------------------------------------------------------------------------------------
bool gt_HouseSearched_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int autoA7A8AF2C_ae = 11;
    const int autoA7A8AF2C_ai = 1;
    unitgroup auto92A30091_g;
    int auto92A30091_u;
    unit auto92A30091_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/183D1214"), gv_debug.lv_gameEvents);
    lv_index = 1;
    for ( ; ( (autoA7A8AF2C_ai >= 0 && lv_index <= autoA7A8AF2C_ae) || (autoA7A8AF2C_ai < 0 && lv_index >= autoA7A8AF2C_ae) ) ; lv_index += autoA7A8AF2C_ai ) {
        if ((libNtve_gf_UnitInRegion(lib90F7C81D_gv_playerHeroes[EventPlayer()], gv_chapter_3.lv_mission19HouseRegion[lv_index]) == true)) {
            gv_chapter_3.lv_mission19HomeSearched[lv_index] = true;
            auto92A30091_g = UnitGroup(null, c_playerAny, gv_chapter_3.lv_mission19HouseRegion[lv_index], UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto92A30091_u = UnitGroupCount(auto92A30091_g, c_unitCountAll);
            for (;; auto92A30091_u -= 1) {
                auto92A30091_var = UnitGroupUnitFromEnd(auto92A30091_g, auto92A30091_u);
                if (auto92A30091_var == null) { break; }
                UnitBehaviorRemove(auto92A30091_var, "SearchingHouse", 1);
            }
            libNtve_gf_KillModel(gv_chapter_3.lv_mission19HouseRegionActor[lv_index]);
            gv_chapter_3.lv_mission19HouseRegionActor[lv_index] = null;
            PingDestroy(gv_chapter_3.lv_mission19HouseLocationPing[lv_index]);
            gv_chapter_3.lv_mission19HouseLocationPing[lv_index] = c_invalidPingId;
            if ((gv_chapter_3.lv_mission19DocumentLocation == gv_chapter_3.lv_mission19HouseRegion[lv_index])) {
                gv_chapter_3.lv_mission19DocumentsFound = true;
                lib90F7C81D_gf_MissionText(StringExternal("Param/Value/5088A830"));
                TriggerExecute(gt_WhatsThePlanEnd, true, false);
            }
            else {
                lib90F7C81D_gf_MissionText(StringExternal("Param/Value/F2EA50E6"));
            }
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HouseSearched_Init () {
    gt_HouseSearched = TriggerCreate("gt_HouseSearched_Func");
    TriggerEnable(gt_HouseSearched, false);
    TriggerAddEventPlayerEffectUsed(gt_HouseSearched, c_playerAny, "HouseSearched");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Enters Search Region
//--------------------------------------------------------------------------------------------------
bool gt_PlayerEntersSearchRegion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto0C7C145D_ae = 11;
    const int auto0C7C145D_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/B19B0A5C"), gv_debug.lv_gameEvents);
    lv_index = 1;
    for ( ; ( (auto0C7C145D_ai >= 0 && lv_index <= auto0C7C145D_ae) || (auto0C7C145D_ai < 0 && lv_index >= auto0C7C145D_ae) ) ; lv_index += auto0C7C145D_ai ) {
        if ((libNtve_gf_UnitInRegion(EventUnit(), gv_chapter_3.lv_mission19HouseRegion[lv_index]) == true)) {
            if ((gv_chapter_3.lv_mission19HomeSearched[lv_index] == false)) {
                UnitBehaviorAdd(EventUnit(), "SearchingHouse", EventUnit(), 1);
            }
            else {
                break;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerEntersSearchRegion_Init () {
    gt_PlayerEntersSearchRegion = TriggerCreate("gt_PlayerEntersSearchRegion_Func");
    TriggerEnable(gt_PlayerEntersSearchRegion, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Exits Search Region
//--------------------------------------------------------------------------------------------------
bool gt_PlayerExitsSearchRegion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/37DEB861"), gv_debug.lv_gameEvents);
    UnitBehaviorRemove(EventUnit(), "SearchingHouse", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerExitsSearchRegion_Init () {
    gt_PlayerExitsSearchRegion = TriggerCreate("gt_PlayerExitsSearchRegion_Func");
    TriggerEnable(gt_PlayerExitsSearchRegion, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Whats The Plan End
//--------------------------------------------------------------------------------------------------
bool gt_WhatsThePlanEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_rebel6Survived;
    int lv_index;

    // Automatic Variable Declarations
    const int auto50CA4FF4_ae = 11;
    const int auto50CA4FF4_ai = 1;

    // Variable Initialization
    lv_rebel6Survived = gv_chapter_3.lv_passRate[1];

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_HouseSearched, false);
    TriggerEnable(gt_PlayerEntersSearchRegion, false);
    TriggerEnable(gt_PlayerExitsSearchRegion, false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/7C63155D"), gv_debug.lv_gameEvents);
    if ((TimerGetElapsed(lib90F7C81D_gv_missiontimer) == 0.0)) {
        libNtve_gf_StopTimer(lib90F7C81D_gv_missiontimer);
        TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), false);
    }
    lv_index = 1;
    for ( ; ( (auto50CA4FF4_ai >= 0 && lv_index <= auto50CA4FF4_ae) || (auto50CA4FF4_ai < 0 && lv_index >= auto50CA4FF4_ae) ) ; lv_index += auto50CA4FF4_ai ) {
        libNtve_gf_KillModel(gv_chapter_3.lv_mission19HouseRegionActor[lv_index]);
        gv_chapter_3.lv_mission19HouseRegionActor[lv_index] = null;
        PingDestroy(gv_chapter_3.lv_mission19HouseLocationPing[lv_index]);
        gv_chapter_3.lv_mission19HouseLocationPing[lv_index] = c_invalidPingId;
    }
    if ((gv_chapter_3.lv_mission19DocumentsFound == true)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/7CFFD351"), gv_debug.lv_gameEvents);
        gv_chapter_3.lv_passRate[2] = true;
        gv_campaign.lv_missionCompleted += 1;
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
        gf_AddHalfHeroLevel();
        gf_XPGainGlobal(FixedToInt(lib90F7C81D_gf_GetModeXP("c3.3 What's the Plan")), lib90F7C81D_gf_GetModeText("c3.3 What's the Plan"));
    }
    else {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/64C07279"), gv_debug.lv_gameEvents);
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateFailed);
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateHidden);
    TriggerDestroy(gt_HouseSearched);
    TriggerDestroy(gt_PlayerEntersSearchRegion);
    TriggerDestroy(gt_PlayerExitsSearchRegion);
    if ((TriggerIsEnabled(gt_WartimeProductionEnd) == true)) {
        libNtve_gf_WaitForTimer(lib90F7C81D_gv_missiontimer, 0.0, false);
    }
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), false);
    Wait(RandomFixed(20.0, 40.0), c_timeGame);
    if ((gv_campaign.lv_singleMission == false)) {
        TriggerEnable(gt_TanksAlotSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-3.Mission5");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WhatsThePlanEnd_Init () {
    gt_WhatsThePlanEnd = TriggerCreate("gt_WhatsThePlanEnd_Func");
    TriggerEnable(gt_WhatsThePlanEnd, false);
    TriggerAddEventTimer(gt_WhatsThePlanEnd, lib90F7C81D_gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wartime Production Setup
//--------------------------------------------------------------------------------------------------
bool gt_WartimeProductionSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_scrapIndex;
    int lv_scrapRegionCount;
    int lv_scrapCount;

    // Automatic Variable Declarations
    int auto146D7D06_ae;
    const int auto146D7D06_ai = 1;
    int autoD0412217_ae;
    const int autoD0412217_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/F3C7CA7D"), gv_debug.lv_gameEvents);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/45B1CBBB"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/E1ED3AAC"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/FB39E058"));
    if ((PlayerGroupCount(lib90F7C81D_gv_players) >= 7)) {
        lv_scrapRegionCount = 9;
    }
    else {
        lv_scrapRegionCount = 4;
    }
    auto146D7D06_ae = lv_scrapRegionCount;
    lv_index = 1;
    for ( ; ( (auto146D7D06_ai >= 0 && lv_index <= auto146D7D06_ae) || (auto146D7D06_ai < 0 && lv_index >= auto146D7D06_ae) ) ; lv_index += auto146D7D06_ai ) {
        gv_chapter_3.lv_mission20ScrapRegion[lv_index] = RegionFromName("CC3.M20.Scrap " + (IntToString(lv_index)));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_chapter_3.lv_mission20ScrapRegion[lv_index]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0, 270.0);
        gv_chapter_3.lv_mission20ScrapLocationPing[lv_index] = PingLastCreated();
        PingSetTooltip(gv_chapter_3.lv_mission20ScrapLocationPing[lv_index], StringExternal("Param/Value/2A932944"));
        PingSetScale(gv_chapter_3.lv_mission20ScrapLocationPing[lv_index], 0.5);
        lv_scrapCount = RandomInt(1, 4);
        gv_chapter_3.lv_mission20ScrapPartsTotal += lv_scrapCount;
        autoD0412217_ae = lv_scrapCount;
        lv_scrapIndex = 1;
        for ( ; ( (autoD0412217_ai >= 0 && lv_scrapIndex <= autoD0412217_ae) || (autoD0412217_ai < 0 && lv_scrapIndex >= autoD0412217_ae) ) ; lv_scrapIndex += autoD0412217_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ScrapPartsCampaign", 0, 0, RegionRandomPoint(gv_chapter_3.lv_mission20ScrapRegion[lv_index]));
            UnitBehaviorAdd(UnitLastCreated(), "ScrapPartsCampaignPickup", UnitLastCreated(), 1);
        }
    }
    TextExpressionSetToken("Param/Expression/5A14CDD1", "A", IntToText(gv_chapter_3.lv_mission20ScrapPartsCollected));
    TextExpressionSetToken("Param/Expression/5A14CDD1", "B", IntToText(gv_chapter_3.lv_mission20ScrapPartsTotal));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/5A14CDD1"), StringExternal("Param/Value/EA274314"), c_objectiveStateActive, true);
    lib90F7C81D_gv_secondObj = ObjectiveLastCreated();
    TriggerEnable(gt_WartimeProductionEnd, true);
    TriggerEnable(gt_ScrapPartPickup, true);
    gf_CampaignScriptedSpawns(gv_campaign_Missions.lv_mission20Wartime);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WartimeProductionSetup_Init () {
    gt_WartimeProductionSetup = TriggerCreate("gt_WartimeProductionSetup_Func");
    TriggerEnable(gt_WartimeProductionSetup, false);
    lib90F7C81D_gf_CampaignEvent(gt_WartimeProductionSetup, "Chapter-3.Mission4");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scrap Part Pickup
//--------------------------------------------------------------------------------------------------
bool gt_ScrapPartPickup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/B64C8F63"), gv_debug.lv_gameEvents);
    gv_chapter_3.lv_mission20ScrapPartsCollected += 1;
    TextExpressionSetToken("Param/Expression/FEAC7106", "A", IntToText(gv_chapter_3.lv_mission20ScrapPartsCollected));
    TextExpressionSetToken("Param/Expression/FEAC7106", "B", IntToText(gv_chapter_3.lv_mission20ScrapPartsTotal));
    ObjectiveSetName(lib90F7C81D_gv_secondObj, TextExpressionAssemble("Param/Expression/FEAC7106"));
    if ((gv_chapter_3.lv_mission20ScrapPartsCollected == gv_chapter_3.lv_mission20ScrapPartsTotal)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_WartimeProductionEnd, true, false);
        lib90F7C81D_gf_AwardAchievement(68);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScrapPartPickup_Init () {
    gt_ScrapPartPickup = TriggerCreate("gt_ScrapPartPickup_Func");
    TriggerEnable(gt_ScrapPartPickup, false);
    TriggerAddEventPlayerEffectUsed(gt_ScrapPartPickup, c_playerAny, "ScrapPartPickupsTriggerCampaignDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wartime Production End
//--------------------------------------------------------------------------------------------------
bool gt_WartimeProductionEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto8BE3F6AE_ae = 9;
    const int auto8BE3F6AE_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ScrapPartPickup, false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/AC44938B"), gv_debug.lv_gameEvents);
    lv_index = 1;
    for ( ; ( (auto8BE3F6AE_ai >= 0 && lv_index <= auto8BE3F6AE_ae) || (auto8BE3F6AE_ai < 0 && lv_index >= auto8BE3F6AE_ae) ) ; lv_index += auto8BE3F6AE_ai ) {
        PingDestroy(gv_chapter_3.lv_mission20ScrapLocationPing[lv_index]);
        gv_chapter_3.lv_mission20ScrapLocationPing[lv_index] = c_invalidPingId;
    }
    if ((gv_chapter_3.lv_mission20ScrapPartsCollected >= 1)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/A03A25D7"), gv_debug.lv_gameEvents);
        gv_chapter_3.lv_passRate[3] = true;
        gv_chapter_3.lv_mission20ProductionEnabled = true;
        gv_chapter_3.lv_mission20BattlebotsPer = (gv_chapter_3.lv_mission20ScrapPartsCollected / gv_chapter_3.lv_mission20ScrapPartsTotal);
        TriggerEnable(gt_BattlebotProduction, true);
        gv_campaign.lv_missionCompleted += 1;
        ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateCompleted);
        gf_AddHalfHeroLevel();
        TextExpressionSetToken("Param/Expression/D2B8462A", "A", IntToText(gv_chapter_3.lv_mission20ScrapPartsCollected));
        TextExpressionSetToken("Param/Expression/D2B8462A", "B", IntToText(gv_chapter_3.lv_mission20ScrapPartsTotal));
        gf_XPGainGlobal(FixedToInt(Ceiling((gv_chapter_3.lv_mission20ScrapPartsCollected * lib90F7C81D_gf_GetModeXP("c3.4 Wartime Production")))), TextExpressionAssemble("Param/Expression/D2B8462A"));
    }
    else {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/C9F5452A"), gv_debug.lv_gameEvents);
        ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateFailed);
    }
    Wait(5.0, c_timeGame);
    ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateHidden);
    TriggerDestroy(gt_ScrapPartPickup);
    if ((gv_chapter_3.lv_mission19DocumentsFound == true)) {
        libNtve_gf_StopTimer(lib90F7C81D_gv_missiontimer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WartimeProductionEnd_Init () {
    gt_WartimeProductionEnd = TriggerCreate("gt_WartimeProductionEnd_Func");
    TriggerEnable(gt_WartimeProductionEnd, false);
    TriggerAddEventTimer(gt_WartimeProductionEnd, lib90F7C81D_gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Battlebot Production
//--------------------------------------------------------------------------------------------------
bool gt_BattlebotProduction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitToSpawn;
    region lv_targetLocation;
    region lv_spawnLocation;
    int lv_spawnCount;

    // Automatic Variable Declarations
    int autoC2A7701E_n;
    int autoC2A7701E_i;

    // Variable Initialization
    lv_unitToSpawn = "BattleBot";
    lv_targetLocation = RegionFromId(256);
    lv_spawnLocation = RegionFromId(255);

    // Conditions
    if (testConds) {
        if (!((gv_chapter_3.lv_mission20ProductionEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((FixedToInt(Ceiling((gv_chapter_3.lv_mission20BattlebotsPer * 100.0))) >= 0) && (FixedToInt(Ceiling((gv_chapter_3.lv_mission20BattlebotsPer * 100.0))) <= 25))) {
        lv_spawnCount = 1;
    }
    else if (((FixedToInt(Ceiling((gv_chapter_3.lv_mission20BattlebotsPer * 100.0))) >= 26) && (FixedToInt(Ceiling((gv_chapter_3.lv_mission20BattlebotsPer * 100.0))) <= 50))) {
        lv_spawnCount = 2;
    }
    else if (((FixedToInt(Ceiling((gv_chapter_3.lv_mission20BattlebotsPer * 100.0))) >= 51) && (FixedToInt(Ceiling((gv_chapter_3.lv_mission20BattlebotsPer * 100.0))) <= 75))) {
        lv_spawnCount = 3;
    }
    else if (((FixedToInt(Ceiling((gv_chapter_3.lv_mission20BattlebotsPer * 100.0))) >= 76) && (FixedToInt(Ceiling((gv_chapter_3.lv_mission20BattlebotsPer * 100.0))) <= 100))) {
        lv_spawnCount = 4;
    }
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/0AC847AA"), gv_debug.lv_gameEvents);
    autoC2A7701E_n = lv_spawnCount;
    for (autoC2A7701E_i = 1; autoC2A7701E_i <= autoC2A7701E_n; autoC2A7701E_i += 1) {
        UnitCreate(1, lv_unitToSpawn, 0, 13, RegionRandomPoint(lv_spawnLocation), 270.0);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("Loadout32mmCannons", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(264))), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(lv_targetLocation)), c_orderQueueAddToEnd);
        UnitGroupAdd(gv_chapter_3.lv_mission20Battlebots, UnitLastCreated());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BattlebotProduction_Init () {
    gt_BattlebotProduction = TriggerCreate("gt_BattlebotProduction_Func");
    TriggerEnable(gt_BattlebotProduction, false);
    TriggerAddEventTimePeriodic(gt_BattlebotProduction, 60.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tanks A lot Setup
//--------------------------------------------------------------------------------------------------
bool gt_TanksAlotSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoD74C2408_g;
    int autoD74C2408_u;
    unit autoD74C2408_var;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/F8AB56D2"), gv_debug.lv_gameEvents);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/DE4DFA81"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/101C8DA7"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/061ED2F9"));
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "FinalDOOMHorizonSoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gv_chapter_3.lv_mission21TankSpawnCount = (lib90F7C81D_gf_GetSkillLevel() + 2);
    ObjectiveCreate(StringExternal("Param/Value/E02B0E15"), StringExternal("Param/Value/1FDA6EB1"), c_objectiveStateActive, true);
    lib90F7C81D_gv_mainObj = ObjectiveLastCreated();
    TextExpressionSetToken("Param/Expression/E2FAA793", "A", FixedToText(gv_chapter_3.lv_mission21TanksDestroyed, c_fixedPrecisionAny));
    TextExpressionSetToken("Param/Expression/E2FAA793", "B", IntToText(gv_chapter_3.lv_mission21TankSpawnCount));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/E2FAA793"), StringExternal("Param/Value/95D729E3"), c_objectiveStateActive, false);
    lib90F7C81D_gv_secondObj = ObjectiveLastCreated();
    if ((lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (1) || lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (2))) {
        gv_chapter_3.lv_rASquadSize = 2;
        lib90F7C81D_gf_SetSpawnLoopTimer(lib90F7C81D_ge_LoopType_CampaignRA, 30.0);
    }
    else if (lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (3)) {
        gv_chapter_3.lv_rASquadSize = 3;
        lib90F7C81D_gf_SetSpawnLoopTimer(lib90F7C81D_ge_LoopType_CampaignRA, 24.0);
    }
    else if (true) {
        gv_chapter_3.lv_rASquadSize = 4;
        lib90F7C81D_gf_SetSpawnLoopTimer(lib90F7C81D_ge_LoopType_CampaignRA, 24.0);
    }
    if ((PlayerGroupCount(lib90F7C81D_gv_players) <= 4)) {
        gv_chapter_3.lv_rASquadCount = 3;
    }
    else if ((PlayerGroupCount(lib90F7C81D_gv_players) >= 5) && (PlayerGroupCount(lib90F7C81D_gv_players) <= 8)) {
        gv_chapter_3.lv_rASquadCount = 5;
    }
    else if ((PlayerGroupCount(lib90F7C81D_gv_players) >= 9)) {
        gv_chapter_3.lv_rASquadCount = 7;
    }
    gv_chapter_3.lv_rATarget = RegionFromId(263);
    libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(RegionFromId(233)));
    gv_chapter_3.lv_mission21TerminalActor = libNtve_gf_ActorLastCreated();
    ActorSend(gv_chapter_3.lv_mission21TerminalActor, "SetScale 0.500000");
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(233)), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0, 270.0);
    gv_chapter_3.lv_mission21TerminalPing = PingLastCreated();
    PingSetTooltip(gv_chapter_3.lv_mission21TerminalPing, StringExternal("Param/Value/259B39EA"));
    PingSetScale(gv_chapter_3.lv_mission21TerminalPing, 0.5);
    autoD74C2408_g = lib90F7C81D_gv_heroesGroup;
    autoD74C2408_u = UnitGroupCount(autoD74C2408_g, c_unitCountAll);
    for (;; autoD74C2408_u -= 1) {
        autoD74C2408_var = UnitGroupUnitFromEnd(autoD74C2408_g, autoD74C2408_u);
        if (autoD74C2408_var == null) { break; }
        TriggerAddEventUnitRegion(gt_PlayerEntersTerminalRegion, UnitRefFromUnit(autoD74C2408_var), RegionFromId(233), true);
        TriggerAddEventUnitRegion(gt_PlayerExitsTerminalRegion, UnitRefFromUnit(autoD74C2408_var), RegionFromId(233), false);
    }
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), true);
    TimerStart(lib90F7C81D_gv_missiontimer, 600.0, false, c_timeGame);
    gf_SpawnRAPowerStationDefense();
    gf_CampaignScriptedSpawns(gv_campaign_Missions.lv_mission21Tanks);
    lib90F7C81D_gf_SpawnItemAtLocationNEW("LLDR", 1, RegionRandomPoint(RegionFromId(211)), 1, 1, 1);
    gv_chapter_3.lv_mission21LLDR = UnitLastCreated();
    lib90F7C81D_gf_MissionItemPingAddItem(UnitLastCreated());
    TriggerEnable(gt_TankDeath, true);
    TriggerEnable(gt_PlayerEntersTerminalRegion, true);
    TriggerEnable(gt_PlayerExitsTerminalRegion, true);
    TriggerEnable(gt_TerminalHacked, true);
    TriggerEnable(gt_TanksALotEnd, true);
    gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_CampaignRA, true);
    if ((UnitIsAlive(gv_chapter_3.lv_mission18RebelCommander) == true)) {
        libNtve_gf_MakeUnitInvulnerable(gv_chapter_3.lv_mission18RebelCommander, false);
    }
    Wait(30.0, c_timeGame);
    TriggerEnable(gt_JamItSetup, true);
    lib90F7C81D_gf_RunCampaignEvent("Chapter-3.Mission6");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TanksAlotSetup_Init () {
    gt_TanksAlotSetup = TriggerCreate("gt_TanksAlotSetup_Func");
    TriggerEnable(gt_TanksAlotSetup, false);
    lib90F7C81D_gf_CampaignEvent(gt_TanksAlotSetup, "Chapter-3.Mission5");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tank Death
//--------------------------------------------------------------------------------------------------
bool gt_TankDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_chapter_3.lv_mission21TanksDestroyed += 1.0;
    TextExpressionSetToken("Param/Expression/813D57CB", "A", FixedToText(gv_chapter_3.lv_mission21TanksDestroyed, c_fixedPrecisionAny));
    TextExpressionSetToken("Param/Expression/813D57CB", "B", IntToText(gv_chapter_3.lv_mission21TankSpawnCount));
    ObjectiveSetName(lib90F7C81D_gv_secondObj, TextExpressionAssemble("Param/Expression/813D57CB"));
    if ((gv_chapter_3.lv_mission21TanksDestroyed == IntToFixed(gv_chapter_3.lv_mission21TankSpawnCount))) {
        ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateCompleted);
        TriggerEnable(gt_TankDeath, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TankDeath_Init () {
    gt_TankDeath = TriggerCreate("gt_TankDeath_Func");
    TriggerEnable(gt_TankDeath, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Terminal Hacked
//--------------------------------------------------------------------------------------------------
bool gt_TerminalHacked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoBAE54FB1_g;
    int autoBAE54FB1_u;
    unit autoBAE54FB1_var;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/2BC9A9C2"), gv_debug.lv_gameEvents);
    gv_chapter_3.lv_mission21ComputerHacked = true;
    autoBAE54FB1_g = UnitGroup(null, c_playerAny, RegionFromId(233), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBAE54FB1_u = UnitGroupCount(autoBAE54FB1_g, c_unitCountAll);
    for (;; autoBAE54FB1_u -= 1) {
        autoBAE54FB1_var = UnitGroupUnitFromEnd(autoBAE54FB1_g, autoBAE54FB1_u);
        if (autoBAE54FB1_var == null) { break; }
        UnitBehaviorRemove(autoBAE54FB1_var, "HackingTerminal", 1);
    }
    libNtve_gf_KillModel(gv_chapter_3.lv_mission21TerminalActor);
    gv_chapter_3.lv_mission21TerminalActor = null;
    PingDestroy(gv_chapter_3.lv_mission21TerminalPing);
    gv_chapter_3.lv_mission21TerminalPing = c_invalidPingId;
    TriggerExecute(gt_TanksALotEnd, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TerminalHacked_Init () {
    gt_TerminalHacked = TriggerCreate("gt_TerminalHacked_Func");
    TriggerEnable(gt_TerminalHacked, false);
    TriggerAddEventPlayerEffectUsed(gt_TerminalHacked, c_playerAny, "TerminalHacked");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Enters Terminal Region
//--------------------------------------------------------------------------------------------------
bool gt_PlayerEntersTerminalRegion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/57C942D0"), gv_debug.lv_gameEvents);
    UnitBehaviorAdd(EventUnit(), "HackingTerminal", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerEntersTerminalRegion_Init () {
    gt_PlayerEntersTerminalRegion = TriggerCreate("gt_PlayerEntersTerminalRegion_Func");
    TriggerEnable(gt_PlayerEntersTerminalRegion, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Exits Terminal Region
//--------------------------------------------------------------------------------------------------
bool gt_PlayerExitsTerminalRegion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/0F284408"), gv_debug.lv_gameEvents);
    UnitBehaviorRemove(EventUnit(), "HackingTerminal", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerExitsTerminalRegion_Init () {
    gt_PlayerExitsTerminalRegion = TriggerCreate("gt_PlayerExitsTerminalRegion_Func");
    TriggerEnable(gt_PlayerExitsTerminalRegion, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tanks A Lot End
//--------------------------------------------------------------------------------------------------
bool gt_TanksALotEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TankDeath, false);
    TriggerEnable(gt_PlayerEntersTerminalRegion, false);
    TriggerEnable(gt_PlayerExitsTerminalRegion, false);
    TriggerEnable(gt_TerminalHacked, false);
    gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_CampaignRA, false);
    TriggerEnable(gt_BattlebotProduction, false);
    TriggerDestroy(gt_BattlebotProduction);
    if ((gv_chapter_3.lv_mission21ComputerHacked == true)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/21EDBA16"), gv_debug.lv_gameEvents);
        gv_chapter_3.lv_passRate[4] = true;
        gv_campaign.lv_missionCompleted += 1;
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
        gf_AddHalfHeroLevel();
        gf_XPGainGlobal(FixedToInt(lib90F7C81D_gf_GetModeXP("c3.5 Tanks a Lot - Hacking")), StringExternal("Param/Value/720200BE"));
    }
    else {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/268E25AE"), gv_debug.lv_gameEvents);
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateFailed);
    }
    TriggerDestroy(gt_TankDeath);
    TriggerDestroy(gt_PlayerEntersTerminalRegion);
    TriggerDestroy(gt_PlayerExitsTerminalRegion);
    TriggerDestroy(gt_TerminalHacked);
    libNtve_gf_KillModel(gv_chapter_3.lv_mission21TerminalActor);
    gv_chapter_3.lv_mission21TerminalActor = null;
    PingDestroy(gv_chapter_3.lv_mission21TerminalPing);
    gv_chapter_3.lv_mission21TerminalPing = c_invalidPingId;
    if (((TriggerIsEnabled(gt_JamItEnd) == true) || (TimerGetElapsed(lib90F7C81D_gv_missiontimer) <= 30.0))) {
        libNtve_gf_WaitForTimer(lib90F7C81D_gv_missiontimer, 0.0, false);
    }
    if ((gv_chapter_3.lv_mission21TanksDestroyed > 0.0)) {
        gf_XPGainGlobal(FixedToInt((gv_chapter_3.lv_mission21TanksDestroyed * lib90F7C81D_gf_GetModeXP("c3.5 Tanks A Lot - Tanks"))), StringExternal("Param/Value/593FBA49"));
        gv_campaign.lv_missionCompleted += 1;
        ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateCompleted);
    }
    else {
        ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateFailed);
    }
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libNtve_gf_StopTimer(lib90F7C81D_gv_missiontimer);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), false);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateHidden);
    ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateHidden);
    ObjectiveSetState(lib90F7C81D_gv_thirdObj, c_objectiveStateHidden);
    Wait(RandomFixed(20.0, 40.0), c_timeGame);
    if ((gv_campaign.lv_singleMission == false)) {
        TriggerEnable(gt_FinaleSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-3.Mission7");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TanksALotEnd_Init () {
    gt_TanksALotEnd = TriggerCreate("gt_TanksALotEnd_Func");
    TriggerEnable(gt_TanksALotEnd, false);
    TriggerAddEventTimer(gt_TanksALotEnd, lib90F7C81D_gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jam It Setup
//--------------------------------------------------------------------------------------------------
bool gt_JamItSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lib90F7C81D_gv_weeklyModifier.lv_going_Dark_Enabled == true)) {
        TriggerEnable(lib90F7C81D_gt_Week5, false);
    }
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/CF9ECEF6"), gv_debug.lv_gameEvents);
    SoundPlayForPlayer(SoundLink("RadioChatter", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/1B06FEAD"));
    Wait(2.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("RadioChatter", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("RadioChatter", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(3.5, c_timeGame);
    SoundPlayForPlayer(SoundLink("RadioChatter", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/7A2C7E17"));
    Wait(1.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("RadioChatter", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("RadioChatter", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    SoundPlayForPlayer(SoundLink("RadioChatter", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    lib90F7C81D_gf_MinimapOffline(true);
    TextExpressionSetToken("Param/Expression/FF9DF1A2", "A", IntToText(gv_chapter_3.lv_mission22RASaboteurKillCount));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/FF9DF1A2"), StringExternal("Param/Value/40B0382A"), c_objectiveStateActive, true);
    lib90F7C81D_gv_thirdObj = ObjectiveLastCreated();
    gf_SpawnRASaboteurs();
    gf_CampaignScriptedSpawns(gv_campaign_Missions.lv_mission22JamIt);
    TriggerEnable(gt_RASaboteurDeath, true);
    TriggerEnable(gt_JamItEnd, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JamItSetup_Init () {
    gt_JamItSetup = TriggerCreate("gt_JamItSetup_Func");
    TriggerEnable(gt_JamItSetup, false);
    lib90F7C81D_gf_CampaignEvent(gt_JamItSetup, "Chapter-3.Mission6");
}

//--------------------------------------------------------------------------------------------------
// Trigger: RA Saboteur Death
//--------------------------------------------------------------------------------------------------
bool gt_RASaboteurDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_chapter_3.lv_mission22RASaboteurKillCount += 1;
    TextExpressionSetToken("Param/Expression/3119201B", "A", IntToText(gv_chapter_3.lv_mission22RASaboteurKillCount));
    ObjectiveSetName(lib90F7C81D_gv_thirdObj, TextExpressionAssemble("Param/Expression/3119201B"));
    if ((gv_chapter_3.lv_mission22RASaboteurKillCount == 4)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerExecute(gt_JamItEnd, true, false);
        if ((TimerGetRemaining(lib90F7C81D_gv_missiontimer) >= 315.0)) {
            lib90F7C81D_gf_AwardAchievement(69);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RASaboteurDeath_Init () {
    gt_RASaboteurDeath = TriggerCreate("gt_RASaboteurDeath_Func");
    TriggerEnable(gt_RASaboteurDeath, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jam It End
//--------------------------------------------------------------------------------------------------
bool gt_JamItEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_RASaboteurDeath, false);
    if ((gv_chapter_3.lv_mission22RASaboteurKillCount > 0)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/4A2B19DE"), gv_debug.lv_gameEvents);
        lib90F7C81D_gf_MinimapOffline(false);
        gv_chapter_3.lv_passRate[5] = true;
        gv_campaign.lv_missionCompleted += 1;
        ObjectiveSetState(lib90F7C81D_gv_thirdObj, c_objectiveStateCompleted);
        gf_AddHalfHeroLevel();
        gf_XPGainGlobal(FixedToInt((IntToFixed(gv_chapter_3.lv_mission22RASaboteurKillCount) * lib90F7C81D_gf_GetModeXP("c3.6 Jam It!"))), StringExternal("Param/Value/8700ACD2"));
    }
    else {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/653B6FC8"), gv_debug.lv_gameEvents);
        ObjectiveSetState(lib90F7C81D_gv_thirdObj, c_objectiveStateFailed);
    }
    TriggerDestroy(gt_RASaboteurDeath);
    if ((gv_chapter_3.lv_mission21ComputerHacked == true)) {
        libNtve_gf_StopTimer(lib90F7C81D_gv_missiontimer);
    }
    if ((lib90F7C81D_gv_weeklyModifier.lv_going_Dark_Enabled == true)) {
        Wait(RandomFixed(40.0, 175.0), c_timeGame);
        TriggerEnable(lib90F7C81D_gt_Week5, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_JamItEnd_Init () {
    gt_JamItEnd = TriggerCreate("gt_JamItEnd_Func");
    TriggerEnable(gt_JamItEnd, false);
    TriggerAddEventTimer(gt_JamItEnd, lib90F7C81D_gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Finale Setup
//--------------------------------------------------------------------------------------------------
bool gt_FinaleSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_siloLocation;
    int[4] lv_bonusSilos;
    int lv_siloTimerLoopCount;
    int lv_randomRegion;

    // Automatic Variable Declarations
    const int auto2AF1E887_ae = 6;
    const int auto2AF1E887_ai = 1;
    const int auto449BB1FA_ae = 6;
    const int auto449BB1FA_ai = 1;
    unitgroup auto6F5CA99A_g;
    int auto6F5CA99A_u;
    unit auto6F5CA99A_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/B155F91D"), gv_debug.lv_gameEvents);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/F949BE2F"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/974523C4"));
    Wait(6.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/757A25F0"));
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Finale", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    lv_siloLocation = 1;
    do {
        lv_bonusSilos[lv_siloLocation] = RandomInt(1, 8);
        if ((lv_bonusSilos[lv_siloLocation] != lv_bonusSilos[(lv_siloLocation - 1)]) && (lv_siloLocation <= 2)) {
            lv_siloLocation += 1;
        }
        else if ((lv_bonusSilos[lv_siloLocation] != lv_bonusSilos[(lv_siloLocation - 1)]) && (lv_bonusSilos[lv_siloLocation] != lv_bonusSilos[(lv_siloLocation - 2)]) && (lv_siloLocation == 3)) {
            lv_siloLocation += 1;
        }
        Wait(0.0625, c_timeGame);
    }while ((lv_siloLocation < 4));
    libNtve_gf_RemoveDoodadsinRegion(RegionEntireMap(), "VespeneTank");
    UnitCreate(1, "VespeneTankSilo", c_unitCreateIgnorePlacement, 0, Point(13.65, 73.8), 180.0);
    gv_chapter_3.lv_mission23SiloUnits[1] = UnitLastCreated();
    UnitCreate(1, "VespeneTankSilo", c_unitCreateIgnorePlacement, 0, Point(218.52, 21.71), 180.0);
    gv_chapter_3.lv_mission23SiloUnits[2] = UnitLastCreated();
    UnitCreate(1, "VespeneTankSilo", c_unitCreateIgnorePlacement, 0, Point(137.18, 208.06), 180.0);
    gv_chapter_3.lv_mission23SiloUnits[3] = UnitLastCreated();
    lv_siloLocation = 1;
    for ( ; ( (auto2AF1E887_ai >= 0 && lv_siloLocation <= auto2AF1E887_ae) || (auto2AF1E887_ai < 0 && lv_siloLocation >= auto2AF1E887_ae) ) ; lv_siloLocation += auto2AF1E887_ai ) {
        if ((lv_siloLocation >= 4)) {
            UnitCreate(1, "InfestedSilo", 0, 0, PointFromName(("Campaign M23 Bonus Silo" + IntToString(lv_bonusSilos[lv_siloLocation-3]))), 270.0);
            gv_chapter_3.lv_mission23SiloUnits[lv_siloLocation] = UnitLastCreated();
            gv_chapter_3.lv_mission23SiloRegion[lv_siloLocation] = RegionFromName("Campaign M23 Bonus Silo" + (IntToString(lv_bonusSilos[lv_siloLocation-3])));
        }
        else {
            gv_chapter_3.lv_mission23SiloRegion[lv_siloLocation] = RegionFromName("Campaign M23 Silo" + (IntToString(lv_siloLocation)));
        }
        libNtve_gf_CreateModelAtPoint("BriefingHighlight", RegionGetCenter(gv_chapter_3.lv_mission23SiloRegion[lv_siloLocation]));
        gv_chapter_3.lv_mission23SiloRegionActor[lv_siloLocation] = libNtve_gf_ActorLastCreated();
        ActorSend(gv_chapter_3.lv_mission23SiloRegionActor[lv_siloLocation], "SetScale 0.500000");
        DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "TextBoxCountdown/Label", gv_chapter_3.lv_mission23SiloUnits[lv_siloLocation]);
        gv_chapter_3.lv_mission23SiloLabels[lv_siloLocation] = DialogControlLastCreated();
        if ((gv_chapter_3.lv_passRate[4] == true)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_chapter_3.lv_mission23SiloRegion[lv_siloLocation]), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 0.0, 270.0);
            gv_chapter_3.lv_mission23SiloLocationPing[lv_siloLocation] = PingLastCreated();
            PingSetTooltip(gv_chapter_3.lv_mission23SiloLocationPing[lv_siloLocation], StringExternal("Param/Value/04731FFB"));
            PingSetScale(gv_chapter_3.lv_mission23SiloLocationPing[lv_siloLocation], 0.5);
        }
    }
    TextExpressionSetToken("Param/Expression/676E25A5", "A", IntToText(gv_chapter_3.lv_mission23SilosDisarmedCount));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/676E25A5"), StringExternal("Param/Value/E59134A5"), c_objectiveStateActive, true);
    lib90F7C81D_gv_mainObj = ObjectiveLastCreated();
    lv_siloLocation = 1;
    for ( ; ( (auto449BB1FA_ai >= 0 && lv_siloLocation <= auto449BB1FA_ae) || (auto449BB1FA_ai < 0 && lv_siloLocation >= auto449BB1FA_ae) ) ; lv_siloLocation += auto449BB1FA_ai ) {
        auto6F5CA99A_g = lib90F7C81D_gv_heroesGroup;
        auto6F5CA99A_u = UnitGroupCount(auto6F5CA99A_g, c_unitCountAll);
        for (;; auto6F5CA99A_u -= 1) {
            auto6F5CA99A_var = UnitGroupUnitFromEnd(auto6F5CA99A_g, auto6F5CA99A_u);
            if (auto6F5CA99A_var == null) { break; }
            TriggerAddEventUnitRegion(gt_PlayerEntersSiloRegion, UnitRefFromUnit(auto6F5CA99A_var), gv_chapter_3.lv_mission23SiloRegion[lv_siloLocation], true);
            TriggerAddEventUnitRegion(gt_PlayerExitsSiloRegion, UnitRefFromUnit(auto6F5CA99A_var), gv_chapter_3.lv_mission23SiloRegion[lv_siloLocation], false);
        }
    }
    lv_siloTimerLoopCount += 1;
    while ((lv_siloTimerLoopCount < 7)) {
        lv_siloLocation = RandomInt(1, 6);
        if ((gv_chapter_3.lv_mission23SiloTimers[lv_siloLocation] == 0)) {
            gv_chapter_3.lv_mission23SiloTimers[lv_siloLocation] = gf_InitSiloTimers(lv_siloTimerLoopCount);
            lv_siloTimerLoopCount += 1;
        }
        Wait(0.0625, c_timeGame);
    }
    gf_CampaignScriptedSpawns(gv_campaign_Missions.lv_mission23Finale);
    while (true) {
        lv_randomRegion = RandomInt(1, 15);
        if ((lv_randomRegion != 9) && (lv_randomRegion != 12)) {
            break;
        }
        else {
            Wait(0.0625, c_timeGame);
        }
    }
    TriggerEnable(gt_CacumenDeath, true);
    UnitCreate(1, "Cacumen", c_unitCreateIgnoreBirth, 14, RegionGetCenter(gv_t2Ground[lv_randomRegion]), 270.0);
    gv_chapter_3.lv_mission23CacumenUnit = UnitLastCreated();
    TriggerAddEventUnitDied(gt_CacumenDeath, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(gv_chapter_3.lv_mission23CacumenUnit)));
    UnitGroupAdd(lib90F7C81D_gv_undeadGroup, gv_chapter_3.lv_mission23CacumenUnit);
    if ((UnitGroupCount(lib90F7C81D_gv_heroesGroup, c_unitCountAlive) >= 1)) {
        UnitIssueOrder(gv_chapter_3.lv_mission23CacumenUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(lib90F7C81D_gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
    }
    HookupBossBarUAD(gv_chapter_3.lv_mission23CacumenUnit, StringExternal("Param/Value/4A9833C9"));
    TriggerEnable(gt_PlayerEntersSiloRegion, true);
    TriggerEnable(gt_PlayerExitsSiloRegion, true);
    TriggerEnable(gt_SiloDisarmed, true);
    TriggerEnable(gt_FinaleEnd, true);
    TriggerEnable(gt_SiloTimers, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinaleSetup_Init () {
    gt_FinaleSetup = TriggerCreate("gt_FinaleSetup_Func");
    TriggerEnable(gt_FinaleSetup, false);
    lib90F7C81D_gf_CampaignEvent(gt_FinaleSetup, "Chapter-3.Mission7");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Enters Silo Region
//--------------------------------------------------------------------------------------------------
bool gt_PlayerEntersSiloRegion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_siloIndex;

    // Automatic Variable Declarations
    const int autoFB42F931_ae = 6;
    const int autoFB42F931_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/8B83CA35"), gv_debug.lv_gameEvents);
    lv_siloIndex = 1;
    for ( ; ( (autoFB42F931_ai >= 0 && lv_siloIndex <= autoFB42F931_ae) || (autoFB42F931_ai < 0 && lv_siloIndex >= autoFB42F931_ae) ) ; lv_siloIndex += autoFB42F931_ai ) {
        if ((libNtve_gf_UnitInRegion(EventUnit(), gv_chapter_3.lv_mission23SiloRegion[lv_siloIndex]) == true)) {
            if ((gv_chapter_3.lv_mission23SiloDisarmed[lv_siloIndex] == false) && (gv_chapter_3.lv_mission23SiloInactive[lv_siloIndex] == false)) {
                UnitBehaviorAdd(EventUnit(), "DisarmingSilo", EventUnit(), 1);
            }
            else {
                break;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerEntersSiloRegion_Init () {
    gt_PlayerEntersSiloRegion = TriggerCreate("gt_PlayerEntersSiloRegion_Func");
    TriggerEnable(gt_PlayerEntersSiloRegion, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Exits Silo Region
//--------------------------------------------------------------------------------------------------
bool gt_PlayerExitsSiloRegion_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/33EA79E2"), gv_debug.lv_gameEvents);
    UnitBehaviorRemove(EventUnit(), "DisarmingSilo", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerExitsSiloRegion_Init () {
    gt_PlayerExitsSiloRegion = TriggerCreate("gt_PlayerExitsSiloRegion_Func");
    TriggerEnable(gt_PlayerExitsSiloRegion, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Silo Disarmed
//--------------------------------------------------------------------------------------------------
bool gt_SiloDisarmed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_siloIndex;

    // Automatic Variable Declarations
    const int auto866A65A4_ae = 6;
    const int auto866A65A4_ai = 1;
    unitgroup auto4EF00DAD_g;
    int auto4EF00DAD_u;
    unit auto4EF00DAD_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_siloIndex = 1;
    for ( ; ( (auto866A65A4_ai >= 0 && lv_siloIndex <= auto866A65A4_ae) || (auto866A65A4_ai < 0 && lv_siloIndex >= auto866A65A4_ae) ) ; lv_siloIndex += auto866A65A4_ai ) {
        if ((libNtve_gf_UnitInRegion(lib90F7C81D_gv_playerHeroes[EventPlayer()], gv_chapter_3.lv_mission23SiloRegion[lv_siloIndex]) == true)) {
            gv_chapter_3.lv_mission23SiloDisarmed[lv_siloIndex] = true;
            gv_chapter_3.lv_mission23SiloInactive[lv_siloIndex] = true;
            auto4EF00DAD_g = UnitGroup(null, c_playerAny, gv_chapter_3.lv_mission23SiloRegion[lv_siloIndex], UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto4EF00DAD_u = UnitGroupCount(auto4EF00DAD_g, c_unitCountAll);
            for (;; auto4EF00DAD_u -= 1) {
                auto4EF00DAD_var = UnitGroupUnitFromEnd(auto4EF00DAD_g, auto4EF00DAD_u);
                if (auto4EF00DAD_var == null) { break; }
                UnitBehaviorRemove(auto4EF00DAD_var, "DisarmingSilo", 1);
            }
            gv_chapter_3.lv_mission23SilosDisarmedCount += 1;
            TextExpressionSetToken("Param/Expression/90C88008", "A", IntToText(gv_chapter_3.lv_mission23SilosDisarmedCount));
            ObjectiveSetName(lib90F7C81D_gv_mainObj, TextExpressionAssemble("Param/Expression/90C88008"));
            libNtve_gf_KillModel(gv_chapter_3.lv_mission23SiloRegionActor[lv_siloIndex]);
            gv_chapter_3.lv_mission23SiloRegionActor[lv_siloIndex] = null;
            PingDestroy(gv_chapter_3.lv_mission23SiloLocationPing[lv_siloIndex]);
            gv_chapter_3.lv_mission23SiloLocationPing[lv_siloIndex] = c_invalidPingId;
            libNtve_gf_SetDialogItemText(gv_chapter_3.lv_mission23SiloLabels[lv_siloIndex], StringToText(""), PlayerGroupAll());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SiloDisarmed_Init () {
    gt_SiloDisarmed = TriggerCreate("gt_SiloDisarmed_Func");
    TriggerEnable(gt_SiloDisarmed, false);
    TriggerAddEventPlayerEffectUsed(gt_SiloDisarmed, c_playerAny, "SiloDisarmed");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Silo Timers
//--------------------------------------------------------------------------------------------------
bool gt_SiloTimers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_siloIndex;
    int lv_siloCompleteCount;

    // Automatic Variable Declarations
    const int autoC05ED5F3_ae = 6;
    const int autoC05ED5F3_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_siloCompleteCount = 0;
    lv_siloIndex = 1;
    for ( ; ( (autoC05ED5F3_ai >= 0 && lv_siloIndex <= autoC05ED5F3_ae) || (autoC05ED5F3_ai < 0 && lv_siloIndex >= autoC05ED5F3_ae) ) ; lv_siloIndex += autoC05ED5F3_ai ) {
        if ((gv_chapter_3.lv_mission23SiloInactive[lv_siloIndex] == false) && (gv_chapter_3.lv_mission23SiloTimers[lv_siloIndex] > 0)) {
            gv_chapter_3.lv_mission23SiloTimers[lv_siloIndex] -= 1;
            libNtve_gf_SetDialogItemText(gv_chapter_3.lv_mission23SiloLabels[lv_siloIndex], IntToText(gv_chapter_3.lv_mission23SiloTimers[lv_siloIndex]), PlayerGroupAll());
            DialogControlSendAnimationEvent(gv_chapter_3.lv_mission23SiloLabels[lv_siloIndex], PlayerGroupAll(), "Animate");
        }
        else if ((gv_chapter_3.lv_mission23SiloInactive[lv_siloIndex] == false) && (gv_chapter_3.lv_mission23SiloTimers[lv_siloIndex] == 0)) {
            gv_chapter_3.lv_mission23SiloInactive[lv_siloIndex] = true;
            lv_siloCompleteCount += 1;
            SoundPlayForPlayer(SoundLink("Terran_BuildingExplosion_medium", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            ActorSend(libNtve_gf_MainActorofUnit(gv_chapter_3.lv_mission23SiloUnits[lv_siloIndex]), "Signal Nuked");
            PlayerCreateEffectPoint(14, "CampaignSiloDamage", UnitGetPosition(gv_chapter_3.lv_mission23SiloUnits[lv_siloIndex]));
            libNtve_gf_KillModel(gv_chapter_3.lv_mission23SiloRegionActor[lv_siloIndex]);
            gv_chapter_3.lv_mission23SiloRegionActor[lv_siloIndex] = null;
            PingDestroy(gv_chapter_3.lv_mission23SiloLocationPing[lv_siloIndex]);
            gv_chapter_3.lv_mission23SiloLocationPing[lv_siloIndex] = c_invalidPingId;
            libNtve_gf_SetDialogItemText(gv_chapter_3.lv_mission23SiloLabels[lv_siloIndex], StringToText(""), PlayerGroupAll());
        }
        else if ((gv_chapter_3.lv_mission23SiloInactive[lv_siloIndex] == true)) {
            lv_siloCompleteCount += 1;
        }
        if ((gv_chapter_3.lv_passRate[4] == true) && (gv_chapter_3.lv_mission23SiloTimers[lv_siloIndex] == 150)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", RegionGetCenter(gv_chapter_3.lv_mission23SiloRegion[lv_siloIndex]), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 3.0, 270.0);
            PingSetColor(gv_chapter_3.lv_mission23SiloLocationPing[lv_siloIndex], ColorWithAlpha(0.00, 100.00, 0.00, 0.00));
        }
        else if ((gv_chapter_3.lv_passRate[4] == true) && (gv_chapter_3.lv_mission23SiloTimers[lv_siloIndex] == 100)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", RegionGetCenter(gv_chapter_3.lv_mission23SiloRegion[lv_siloIndex]), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 3.0, 270.0);
            PingSetColor(gv_chapter_3.lv_mission23SiloLocationPing[lv_siloIndex], ColorWithAlpha(100.00, 100.00, 0.00, 0.00));
        }
        else if ((gv_chapter_3.lv_passRate[4] == true) && (gv_chapter_3.lv_mission23SiloTimers[lv_siloIndex] == 60)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", RegionGetCenter(gv_chapter_3.lv_mission23SiloRegion[lv_siloIndex]), ColorWithAlpha(91.76, 68.63, 21.57, 0.00), 3.0, 270.0);
            PingSetColor(gv_chapter_3.lv_mission23SiloLocationPing[lv_siloIndex], ColorWithAlpha(91.76, 68.63, 21.57, 0.00));
        }
        else if ((gv_chapter_3.lv_passRate[4] == true) && (gv_chapter_3.lv_mission23SiloTimers[lv_siloIndex] == 30)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", RegionGetCenter(gv_chapter_3.lv_mission23SiloRegion[lv_siloIndex]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 3.0, 270.0);
            PingSetColor(gv_chapter_3.lv_mission23SiloLocationPing[lv_siloIndex], ColorWithAlpha(100.00, 0.00, 0.00, 0.00));
            SoundPlayForPlayer(SoundLink("TUIWarningPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }
    }
    if ((lv_siloCompleteCount == 6)) {
        TriggerEnable(TriggerGetCurrent(), false);
        lib90F7C81D_gf_AwardAchievement(70);
        TriggerExecute(gt_FinaleEnd, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SiloTimers_Init () {
    gt_SiloTimers = TriggerCreate("gt_SiloTimers_Func");
    TriggerEnable(gt_SiloTimers, false);
    TriggerAddEventTimePeriodic(gt_SiloTimers, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cacumen Death
//--------------------------------------------------------------------------------------------------
bool gt_CacumenDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((lib90F7C81D_gf_DifficultyisGOE(3) == true)) {
        lib90F7C81D_gf_AwardAchievement(71);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CacumenDeath_Init () {
    gt_CacumenDeath = TriggerCreate("gt_CacumenDeath_Func");
    TriggerEnable(gt_CacumenDeath, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Finale End
//--------------------------------------------------------------------------------------------------
bool gt_FinaleEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_siloIndex;
    bool lv_victory;

    // Automatic Variable Declarations
    const int auto6EC12BF0_ae = 6;
    const int auto6EC12BF0_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SiloDisarmed, false);
    TriggerEnable(gt_PlayerEntersSiloRegion, false);
    TriggerEnable(gt_PlayerExitsSiloRegion, false);
    TriggerEnable(gt_CacumenDeath, false);
    BossBarHideUAD();
    lv_siloIndex = 1;
    for ( ; ( (auto6EC12BF0_ai >= 0 && lv_siloIndex <= auto6EC12BF0_ae) || (auto6EC12BF0_ai < 0 && lv_siloIndex >= auto6EC12BF0_ae) ) ; lv_siloIndex += auto6EC12BF0_ai ) {
        libNtve_gf_KillModel(gv_chapter_3.lv_mission23SiloRegionActor[lv_siloIndex]);
        gv_chapter_3.lv_mission23SiloRegionActor[lv_siloIndex] = null;
        PingDestroy(gv_chapter_3.lv_mission23SiloLocationPing[lv_siloIndex]);
        gv_chapter_3.lv_mission23SiloLocationPing[lv_siloIndex] = c_invalidPingId;
    }
    PingDestroyAll();
    gf_PauseSpawning(true);
    UnitPauseAll(true);
    lib90F7C81D_gf_HeroUnitGroupInvunerable(true);
    if ((gv_chapter_3.lv_mission23SilosDisarmedCount == 6)) {
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/BC1123BC"));
        gv_chapter_3.lv_passRate[6] = true;
        lv_victory = true;
        gv_campaign.lv_missionCompleted += 1;
        lib90F7C81D_gf_AwardAchievement(70);
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
        TextExpressionSetToken("Param/Expression/CB65B12A", "A", IntToText(gv_chapter_3.lv_mission23SilosDisarmedCount));
        gf_XPGainGlobal(FixedToInt((IntToFixed(gv_chapter_3.lv_mission23SilosDisarmedCount) * lib90F7C81D_gf_GetModeXP("c3.7 Finale"))), TextExpressionAssemble("Param/Expression/CB65B12A"));
    }
    else if ((gv_chapter_3.lv_mission23SilosDisarmedCount >= 3) && (gv_chapter_3.lv_mission23SilosDisarmedCount <= 5)) {
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/704CB68D"));
        gv_chapter_3.lv_passRate[6] = true;
        lv_victory = true;
        gv_campaign.lv_missionCompleted += 1;
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
        TextExpressionSetToken("Param/Expression/7C41447E", "A", IntToText(gv_chapter_3.lv_mission23SilosDisarmedCount));
        gf_XPGainGlobal(FixedToInt((IntToFixed(gv_chapter_3.lv_mission23SilosDisarmedCount) * lib90F7C81D_gf_GetModeXP("c3.7 Finale"))), TextExpressionAssemble("Param/Expression/7C41447E"));
    }
    else if (true) {
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/E8973CA5"));
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateFailed);
        TextExpressionSetToken("Param/Expression/37352170", "A", IntToText(gv_chapter_3.lv_mission23SilosDisarmedCount));
        gf_XPGainGlobal(FixedToInt((IntToFixed(gv_chapter_3.lv_mission23SilosDisarmedCount) * lib90F7C81D_gf_GetModeXP("c3.7 Finale"))), TextExpressionAssemble("Param/Expression/37352170"));
    }
    if ((gv_campaign.lv_missionCompleted == 8)) {
        lib90F7C81D_gf_AwardAchievement(72);
    }
    if ((lv_victory == true)) {
        SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
        SoundPlay(SoundLink("TRaynor03MusicOutro", -1), PlayerGroupAll(), 100.0, 0.0);
        lib90F7C81D_gf_GameVictory();
        gf_FirstWinCheck();
        gf_XPGainGlobal(gf_CampaignVictoryMultiplier(lib90F7C81D_gv_xPGained), StringExternal("Param/Value/B705193D"));
    }
    TriggerDestroy(gt_PlayerEntersSiloRegion);
    TriggerDestroy(gt_PlayerExitsSiloRegion);
    TriggerDestroy(gt_SiloDisarmed);
    TriggerDestroy(gt_SiloTimers);
    TriggerDestroy(gt_CacumenDeath);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateHidden);
    Wait(5.0, c_timeGame);
    lib90F7C81D_gf_RunEvent("GameOver");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinaleEnd_Init () {
    gt_FinaleEnd = TriggerCreate("gt_FinaleEnd_Func");
    TriggerEnable(gt_FinaleEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prologue Vote Init
//--------------------------------------------------------------------------------------------------
bool gt_PrologueVoteInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_t;

    // Automatic Variable Declarations
    const int autoBA7A70C3_n = 10;
    int autoBA7A70C3_i;

    // Variable Initialization
    lv_t = 10;

    // Conditions
    if (testConds) {
        if (!(lib90F7C81D_gf_GetGameMode(1))) {
            return false;
        }

        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "$PrologueVote");
    gv_campaign.lv_prologuepVote = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "$PrologueVote/ButtonYes");
    gv_campaign.lv_prologueyButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_PrologueVotes, c_playerAny, gv_campaign.lv_prologueyButton, c_triggerControlEventTypeClick);
    DialogControlHookupStandard(c_triggerControlTypeLabel, "$PrologueVote/ButtonYes/CountLabel");
    gv_campaign.lv_prologueyLabel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "$PrologueVote/ButtonNo");
    gv_campaign.lv_prologuenButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_PrologueVotes, c_playerAny, gv_campaign.lv_prologuenButton, c_triggerControlEventTypeClick);
    DialogControlHookupStandard(c_triggerControlTypeLabel, "$PrologueVote/ButtonNo/CountLabel");
    gv_campaign.lv_prologuenLabel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "$PrologueVote/CountdownTimer");
    gv_campaign.lv_prologuevTimer = DialogControlLastCreated();
    TriggerEnable(gt_PrologueVotes, true);
    TriggerEnable(gt_PrologueVoteEnd, true);
    DialogControlSendAnimationEvent(gv_campaign.lv_prologuepVote, PlayerGroupAll(), "Start");
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/D04F7DAF"));
    for (autoBA7A70C3_i = 1; autoBA7A70C3_i <= autoBA7A70C3_n; autoBA7A70C3_i += 1) {
        Wait(1.0, c_timeGame);
        lv_t -= 1;
        libNtve_gf_SetDialogItemText(gv_campaign.lv_prologuevTimer, IntToText(lv_t), PlayerGroupAll());
    }
    DialogControlSendAnimationEvent(gv_campaign.lv_prologuepVote, PlayerGroupAll(), "End");
    TriggerEnable(gt_PrologueVotes, false);
    TriggerExecute(gt_PrologueVoteEnd, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrologueVoteInit_Init () {
    gt_PrologueVoteInit = TriggerCreate("gt_PrologueVoteInit_Func");
    TriggerEnable(gt_PrologueVoteInit, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prologue Votes
//--------------------------------------------------------------------------------------------------
bool gt_PrologueVotes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_campaign.lv_prologueyButton) && (gv_campaign.lv_prologuepVoteYes[lv_player] == false)) {
        gv_campaign.lv_prologuepVoteYes[lv_player] = true;
        gv_campaign.lv_prologuevYes += 1;
        libNtve_gf_SetDialogItemText(gv_campaign.lv_prologueyLabel, IntToText(gv_campaign.lv_prologuevYes), PlayerGroupAll());
        if ((gv_campaign.lv_prologuepVoteNo[lv_player] == true)) {
            gv_campaign.lv_prologuepVoteNo[lv_player] = false;
            gv_campaign.lv_prologuevNo -= 1;
            libNtve_gf_SetDialogItemText(gv_campaign.lv_prologuenLabel, IntToText(gv_campaign.lv_prologuevNo), PlayerGroupAll());
        }
    }
    else {
        if ((EventDialogControl() == gv_campaign.lv_prologuenButton) && (gv_campaign.lv_prologuepVoteNo[lv_player] == false)) {
            gv_campaign.lv_prologuepVoteNo[lv_player] = true;
            gv_campaign.lv_prologuevNo += 1;
            libNtve_gf_SetDialogItemText(gv_campaign.lv_prologuenLabel, IntToText(gv_campaign.lv_prologuevNo), PlayerGroupAll());
            if ((gv_campaign.lv_prologuepVoteYes[lv_player] == true)) {
                gv_campaign.lv_prologuepVoteYes[lv_player] = false;
                gv_campaign.lv_prologuevYes -= 1;
                libNtve_gf_SetDialogItemText(gv_campaign.lv_prologueyLabel, IntToText(gv_campaign.lv_prologuevYes), PlayerGroupAll());
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrologueVotes_Init () {
    gt_PrologueVotes = TriggerCreate("gt_PrologueVotes_Func");
    TriggerEnable(gt_PrologueVotes, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Prologue Vote End
//--------------------------------------------------------------------------------------------------
bool gt_PrologueVoteEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto84380D59_ae = 9;
    const int auto84380D59_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(lib90F7C81D_gf_GetGameMode(1))) {
            return false;
        }

        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_campaign.lv_prologuevYes > gv_campaign.lv_prologuevNo)) {
        gv_campaign.lv_prologueSkip = true;
    }
    if ((GameIsTestMap(false) == true)) {
        if ((gv_campaign.lv_prologueSkip == true)) {
            lib90F7C81D_gf_RunEvent("SetupCacheSites");
            lv_index = 0;
            for ( ; ( (auto84380D59_ai >= 0 && lv_index <= auto84380D59_ae) || (auto84380D59_ai < 0 && lv_index >= auto84380D59_ae) ) ; lv_index += auto84380D59_ai ) {
                gv_prologue.lv_mission01SentryRegions[lv_index] = RegionFromName(("C.P.Sentry Spot " + IntToString((lv_index + 1))));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "VulcanMK88SentryGun", 0, 0, RegionGetCenter(gv_prologue.lv_mission01SentryRegions[lv_index]));
            }
            gv_prologue.lv_mission03TotalReservists = 8;
            gf_AddHeroLevels(2);
            gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_Campaign, true);
            TriggerEnable(gt_EngineerEscortSetup, true);
            lib90F7C81D_gf_RunCampaignEvent("Chapter-1.Mission1");
        }
        else {
            TriggerEnable(gt_ConductKLE, true);
            lib90F7C81D_gf_RunCampaignEvent("Prologue.Mission00");
        }
    }
    DialogControlDestroy(gv_campaign.lv_prologuepVote);
    DialogControlDestroy(gv_campaign.lv_prologuenButton);
    DialogControlDestroy(gv_campaign.lv_prologuenLabel);
    DialogControlDestroy(gv_campaign.lv_prologueyButton);
    DialogControlDestroy(gv_campaign.lv_prologuenLabel);
    DialogControlDestroy(gv_campaign.lv_prologuevTimer);
    gv_campaign.lv_prologuenButton = c_invalidDialogControlId;
    gv_campaign.lv_prologueyButton = c_invalidDialogControlId;
    gv_campaign.lv_prologuevTimer = c_invalidDialogControlId;
    gv_campaign.lv_prologueyLabel = c_invalidDialogControlId;
    gv_campaign.lv_prologuenLabel = c_invalidDialogControlId;
    gv_campaign.lv_prologuepVote = c_invalidDialogControlId;
    TriggerDestroy(gt_PrologueVoteInit);
    TriggerDestroy(gt_PrologueVotes);
    TriggerDestroy(gt_PrologueVoteInit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PrologueVoteEnd_Init () {
    gt_PrologueVoteEnd = TriggerCreate("gt_PrologueVoteEnd_Func");
    TriggerEnable(gt_PrologueVoteEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Debug Commands
//--------------------------------------------------------------------------------------------------
bool gt_CampaignDebugCommands_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_message;
    int lv_user;
    int lv_index;

    // Automatic Variable Declarations
    string autoA44EF864_val;
    unitgroup auto47A9313B_g;
    int auto47A9313B_u;
    unit auto47A9313B_var;

    // Variable Initialization
    lv_message = EventChatMessage(false);
    lv_user = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(lib90F7C81D_gf_DevHandles(PlayerHandle(EventPlayer())))) {
            return false;
        }

        if (!((StringEqual(StringWord(lv_message, 1), "gm", c_stringNoCase) == true))) {
            return false;
        }

        if (!(lib90F7C81D_gf_GetGameMode(1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA44EF864_val = StringCase(StringWord(lv_message, 2), true);
    if (autoA44EF864_val == "LIST") {
        DialogControlSendAnimationEvent(gv_campaign_Missions.lv_missionPanel, PlayerGroupAll(), "Display");
    }
    else if (autoA44EF864_val == "TEST") {
        lib90F7C81D_gf_RunCampaignEvent("TestMode");
    }
    else if (autoA44EF864_val == "SENTRY") {
        gf_SpawnSentrys();
    }
    else if (autoA44EF864_val == "RM") {
        auto47A9313B_g = UnitGroup("MK44SentryGun2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto47A9313B_u = UnitGroupCount(auto47A9313B_g, c_unitCountAll);
        for (;; auto47A9313B_u -= 1) {
            auto47A9313B_var = UnitGroupUnitFromEnd(auto47A9313B_g, auto47A9313B_u);
            if (auto47A9313B_var == null) { break; }
            UnitRemove(auto47A9313B_var);
        }
    }
    else if (autoA44EF864_val == "SKIP") {
        TriggerEnable(gt_PrologueVoteInit, true);
        TriggerExecute(gt_PrologueVoteInit, true, false);
    }
    else if (autoA44EF864_val == "MISSION00") {
        TriggerEnable(gt_ConductKLE, true);
        lib90F7C81D_gf_RunCampaignEvent("Prologue.Mission00");
    }
    else if (autoA44EF864_val == "MISSION02") {
        TriggerEnable(gt_TCPContainmentSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Prologue.Mission02");
    }
    else if (autoA44EF864_val == "MISSION04") {
        gv_prologue.lv_mission02TCPFailed[0] = false;
        gv_prologue.lv_mission02TCPFailed[1] = false;
        gv_prologue.lv_mission02TCPFailed[2] = false;
        gv_prologue.lv_mission02TCPCountDefended = 3;
        TriggerEnable(gt_EscortCargoTrucksSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Prologue.Mission04");
    }
    else if (autoA44EF864_val == "MISSION05") {
        TriggerEnable(gt_EngineerEscortSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-1.Mission1");
    }
    else if (autoA44EF864_val == "MISSION06") {
        TriggerEnable(gt_AkmasRevengeSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-1.Mission2");
    }
    else if (autoA44EF864_val == "MISSION07") {
        TriggerEnable(gt_MassRecallSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-1.Mission3");
    }
    else if (autoA44EF864_val == "MISSION08") {
        TriggerEnable(gt_SpiderEggSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-1.Mission4");
    }
    else if (autoA44EF864_val == "MISSION09") {
        TriggerEnable(gt_SpiderKingSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-1.Mission5");
    }
    else if (autoA44EF864_val == "MISSION10") {
        TriggerEnable(gt_EscalationSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission1");
    }
    else if (autoA44EF864_val == "MISSION11") {
        TriggerEnable(gt_BulwarkSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission2");
    }
    else if (autoA44EF864_val == "MISSION12") {
        TriggerEnable(gt_PestControlSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission3");
    }
    else if (autoA44EF864_val == "MISSION13") {
        TriggerEnable(gt_AbdulSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission4");
    }
    else if (autoA44EF864_val == "MISSION14") {
        TriggerEnable(gt_TheGreatEscapeSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission5");
    }
    else if (autoA44EF864_val == "MISSION15") {
        TriggerEnable(gt_PartingGiftSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission6");
    }
    else if (autoA44EF864_val == "MISSION16") {
        TriggerEnable(gt_Chapter2EndingSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission7");
    }
    else if (autoA44EF864_val == "MISSION17") {
        TriggerEnable(gt_TheOldCrewSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-3.Mission1");
    }
    else if (autoA44EF864_val == "MISSION18") {
        TriggerEnable(gt_ForTheRebellionSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-3.Mission2");
    }
    else if (autoA44EF864_val == "MISSION19") {
        TriggerEnable(gt_WhatsThePlanSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-3.Mission3");
    }
    else if (autoA44EF864_val == "MISSION20") {
        TriggerEnable(gt_WartimeProductionSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-3.Mission4");
    }
    else if (autoA44EF864_val == "MISSION21") {
        TriggerEnable(gt_TanksAlotSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-3.Mission5");
    }
    else if (autoA44EF864_val == "MISSION22") {
        TriggerEnable(gt_JamItSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-3.Mission6");
    }
    else if (autoA44EF864_val == "MISSION23") {
        TriggerEnable(gt_FinaleSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-3.Mission7");
    }
    else if (autoA44EF864_val == "SPAWNLOOP") {
        if ((StringWord(lv_message, 3) != null) && (StringCase(StringWord(lv_message, 3), true) == "ON")) {
            gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_Campaign, true);
        }
        else if ((StringWord(lv_message, 3) != null) && (StringCase(StringWord(lv_message, 3), true) == "OFF")) {
            gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_Campaign, false);
        }
        else if (true) {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaSubtitle, StringExternal("Param/Value/97110CFF"));
        }
    }
    else if (autoA44EF864_val == "CH3") {
        if ((StringWord(lv_message, 3) != null) && (StringCase(StringWord(lv_message, 3), true) == "ON")) {
            gv_campaign.lv_playChapterThree = true;
        }
        else if ((StringWord(lv_message, 3) != null) && (StringCase(StringWord(lv_message, 3), true) == "OFF")) {
            gv_campaign.lv_playChapterThree = false;
        }
        else if (true) {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaSubtitle, StringExternal("Param/Value/A37C9629"));
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/8ED5B126"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CampaignDebugCommands_Init () {
    gt_CampaignDebugCommands = TriggerCreate("gt_CampaignDebugCommands_Func");
    TriggerEnable(gt_CampaignDebugCommands, false);
    TriggerAddEventChatMessage(gt_CampaignDebugCommands, c_playerAny, "gm", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Mission Selector
//--------------------------------------------------------------------------------------------------
bool gt_CampaignMissionSelector_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_campaign_Missions.lv_missionID = (DialogControlGetSelectedItem(gv_campaign_Missions.lv_missionList, EventPlayer()) - 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CampaignMissionSelector_Init () {
    gt_CampaignMissionSelector = TriggerCreate("gt_CampaignMissionSelector_Func");
    TriggerEnable(gt_CampaignMissionSelector, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Mission Start
//--------------------------------------------------------------------------------------------------
bool gt_CampaignMissionStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto1A265D65_val;
    const int autoAB944964_ae = 5;
    const int autoAB944964_ai = 1;
    unitgroup autoB1CB5E66_g;
    int autoB1CB5E66_u;
    unit autoB1CB5E66_var;
    unitgroup auto9A77C8C9_g;
    int auto9A77C8C9_u;
    unit auto9A77C8C9_var;
    unitgroup auto98C859BD_g;
    int auto98C859BD_u;
    unit auto98C859BD_var;
    unitgroup autoD369CD99_g;
    int autoD369CD99_u;
    unit autoD369CD99_var;
    unitgroup autoA7B1EE64_g;
    int autoA7B1EE64_u;
    unit autoA7B1EE64_var;
    unitgroup auto49012E48_g;
    int auto49012E48_u;
    unit auto49012E48_var;
    unitgroup auto3CBE750B_g;
    int auto3CBE750B_u;
    unit auto3CBE750B_var;
    unitgroup auto9266B263_g;
    int auto9266B263_u;
    unit auto9266B263_var;
    unitgroup auto7CA997B9_g;
    int auto7CA997B9_u;
    unit auto7CA997B9_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1A265D65_val = gv_campaign_Missions.lv_missionID;
    if (auto1A265D65_val == 1) {
        TriggerEnable(gt_SentrySetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Prologue.Mission01");
    }
    else if (auto1A265D65_val == 2) {
        TriggerEnable(gt_TCPContainmentSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Prologue.Mission02");
    }
    else if (auto1A265D65_val == 3) {
        TriggerEnable(gt_PreservetheReserveSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Prologue.Mission03");
    }
    else if (auto1A265D65_val == 4) {
        gv_prologue.lv_mission02TCPFailed[0] = false;
        gv_prologue.lv_mission02TCPFailed[1] = false;
        gv_prologue.lv_mission02TCPFailed[2] = false;
        gv_prologue.lv_mission02TCPCountDefended = 3;
        TriggerEnable(gt_EscortCargoTrucksSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Prologue.Mission04");
    }
    else if (auto1A265D65_val == 5) {
        TriggerEnable(gt_EngineerEscortSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-1.Mission1");
    }
    else if (auto1A265D65_val == 6) {
        TriggerEnable(gt_AkmasRevengeSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-1.Mission2");
    }
    else if (auto1A265D65_val == 7) {
        TriggerEnable(gt_MassRecallSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-1.Mission3");
    }
    else if (auto1A265D65_val == 8) {
        TriggerEnable(gt_SpiderEggSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-1.Mission4");
    }
    else if (auto1A265D65_val == 9) {
        TriggerEnable(gt_SpiderKingSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-1.Mission5");
    }
    else if (auto1A265D65_val == 10) {
        TriggerEnable(gt_EscalationSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission1");
    }
    else if (auto1A265D65_val == 11) {
        TriggerEnable(gt_BulwarkSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission2");
    }
    else if (auto1A265D65_val == 12) {
        TriggerEnable(gt_PestControlSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission3");
    }
    else if (auto1A265D65_val == 13) {
        TriggerEnable(gt_AbdulSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission4");
    }
    else if (auto1A265D65_val == 14) {
        gv_chapter_1.lv_mission05VehicleRepairCount += 1;
        lv_index = 0;
        for ( ; ( (autoAB944964_ai >= 0 && lv_index <= autoAB944964_ae) || (autoAB944964_ai < 0 && lv_index >= autoAB944964_ae) ) ; lv_index += autoAB944964_ai ) {
            UnitCreate(1, "MATVConvoy", 0, 0, PointFromName("Mission05.M-ATV_" + IntToString(lv_index + 1)), PointGetFacing(PointFromName("Mission05.M-ATV_" + IntToString(lv_index + 1))));
            gv_chapter_1.lv_mission05MATVUnit[lv_index] = UnitLastCreated();
            UnitBehaviorAdd(gv_chapter_1.lv_mission05MATVUnit[lv_index], "Unpowered", gv_chapter_1.lv_mission05MATVUnit[lv_index], 1);
            UnitBehaviorRemove(gv_chapter_1.lv_mission05MATVUnit[lv_index], "ConvoyAntiStuck", 1);
            UnitBehaviorRemove(gv_chapter_1.lv_mission05MATVUnit[lv_index], "ConjoinATV", 1);
            UnitSetPropertyFixed(gv_chapter_1.lv_mission05MATVUnit[lv_index], c_unitPropLifeMax, 800.0);
            UnitSetPropertyFixed(gv_chapter_1.lv_mission05MATVUnit[lv_index], c_unitPropShieldsMax, 800.0);
            gv_chapter_1.lv_mission05MATVRepaired[lv_index] = true;
        }
        TriggerEnable(gt_TheGreatEscapeSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission5");
    }
    else if (auto1A265D65_val == 15) {
        TriggerEnable(gt_PartingGiftSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission6");
    }
    else if (auto1A265D65_val == 16) {
        TriggerEnable(gt_Chapter2EndingSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-2.Mission7");
    }
    else if (auto1A265D65_val == 17) {
        lib90F7C81D_gv_gameOverOverride = true;
        autoB1CB5E66_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB1CB5E66_u = UnitGroupCount(autoB1CB5E66_g, c_unitCountAll);
        for (;; autoB1CB5E66_u -= 1) {
            autoB1CB5E66_var = UnitGroupUnitFromEnd(autoB1CB5E66_g, autoB1CB5E66_u);
            if (autoB1CB5E66_var == null) { break; }
            UnitKill(autoB1CB5E66_var);
        }
        auto9A77C8C9_g = lib90F7C81D_gv_heroesGroup;
        auto9A77C8C9_u = UnitGroupCount(auto9A77C8C9_g, c_unitCountAll);
        for (;; auto9A77C8C9_u -= 1) {
            auto9A77C8C9_var = UnitGroupUnitFromEnd(auto9A77C8C9_g, auto9A77C8C9_u);
            if (auto9A77C8C9_var == null) { break; }
            UnitKill(auto9A77C8C9_var);
        }
        auto98C859BD_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto98C859BD_u = UnitGroupCount(auto98C859BD_g, c_unitCountAll);
        for (;; auto98C859BD_u -= 1) {
            auto98C859BD_var = UnitGroupUnitFromEnd(auto98C859BD_g, auto98C859BD_u);
            if (auto98C859BD_var == null) { break; }
            UnitKill(auto98C859BD_var);
        }
        DialogControlHookupStandard(c_triggerControlTypePanel, "$ChapterTransition");
        gv_chapter_2.lv_transitionFrame = DialogControlLastCreated();
        UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
        DialogControlSendAnimationEvent(gv_chapter_2.lv_transitionFrame, PlayerGroupAll(), "Display");
        Wait(4.0, c_timeGame);
        UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/7A65DC82"), StringExternal("Param/Value/1A4E200B"), 0.0, SoundLink("UI_Nova_BriefingTextCallout_Open", -1), SoundLink("UI_TextPrintout", -1));
        SoundPlayForPlayer(SoundLink("Ghost_Death", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(6.0, c_timeGame);
        UIHideTextCrawl(PlayerGroupAll());
        gv_chapter_3.lv_mission17AirportSecured = false;
        TriggerEnable(gt_TheOldCrewSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-3.Mission1");
    }
    else if (auto1A265D65_val == 18) {
        autoD369CD99_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD369CD99_u = UnitGroupCount(autoD369CD99_g, c_unitCountAll);
        for (;; autoD369CD99_u -= 1) {
            autoD369CD99_var = UnitGroupUnitFromEnd(autoD369CD99_g, autoD369CD99_u);
            if (autoD369CD99_var == null) { break; }
            UnitKill(autoD369CD99_var);
        }
        libNtve_gf_CreateModelAtPoint("WreckedBattlecruiserHeliosFinal", PointFromId(1370697770));
        ActorSend(libNtve_gf_ActorLastCreated(), "SetFacing 180.000000");
        ActorSend(libNtve_gf_ActorLastCreated(), "AnimPlay Death Death PlayForever,NonLooping");
        TriggerEnable(gt_ForTheRebellionSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-3.Mission2");
    }
    else if (auto1A265D65_val == 19) {
        autoA7B1EE64_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA7B1EE64_u = UnitGroupCount(autoA7B1EE64_g, c_unitCountAll);
        for (;; autoA7B1EE64_u -= 1) {
            autoA7B1EE64_var = UnitGroupUnitFromEnd(autoA7B1EE64_g, autoA7B1EE64_u);
            if (autoA7B1EE64_var == null) { break; }
            UnitKill(autoA7B1EE64_var);
        }
        gv_chapter_3.lv_passRate[1] = true;
        TriggerEnable(gt_WhatsThePlanSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-3.Mission3");
    }
    else if (auto1A265D65_val == 20) {
        auto49012E48_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto49012E48_u = UnitGroupCount(auto49012E48_g, c_unitCountAll);
        for (;; auto49012E48_u -= 1) {
            auto49012E48_var = UnitGroupUnitFromEnd(auto49012E48_g, auto49012E48_u);
            if (auto49012E48_var == null) { break; }
            UnitKill(auto49012E48_var);
        }
        TriggerEnable(gt_WartimeProductionSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-3.Mission4");
    }
    else if (auto1A265D65_val == 21) {
        auto3CBE750B_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3CBE750B_u = UnitGroupCount(auto3CBE750B_g, c_unitCountAll);
        for (;; auto3CBE750B_u -= 1) {
            auto3CBE750B_var = UnitGroupUnitFromEnd(auto3CBE750B_g, auto3CBE750B_u);
            if (auto3CBE750B_var == null) { break; }
            UnitKill(auto3CBE750B_var);
        }
        TriggerEnable(gt_TanksAlotSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-3.Mission5");
    }
    else if (auto1A265D65_val == 22) {
        auto9266B263_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9266B263_u = UnitGroupCount(auto9266B263_g, c_unitCountAll);
        for (;; auto9266B263_u -= 1) {
            auto9266B263_var = UnitGroupUnitFromEnd(auto9266B263_g, auto9266B263_u);
            if (auto9266B263_var == null) { break; }
            UnitKill(auto9266B263_var);
        }
        TriggerEnable(gt_JamItSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-3.Mission6");
    }
    else if (auto1A265D65_val == 23) {
        auto7CA997B9_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto7CA997B9_u = UnitGroupCount(auto7CA997B9_g, c_unitCountAll);
        for (;; auto7CA997B9_u -= 1) {
            auto7CA997B9_var = UnitGroupUnitFromEnd(auto7CA997B9_g, auto7CA997B9_u);
            if (auto7CA997B9_var == null) { break; }
            UnitKill(auto7CA997B9_var);
        }
        TriggerEnable(gt_FinaleSetup, true);
        lib90F7C81D_gf_RunCampaignEvent("Chapter-3.Mission7");
        gv_chapter_3.lv_passRate[4] = true;
    }
    else {
        TriggerEnable(gt_ConductKLE, true);
        lib90F7C81D_gf_RunCampaignEvent("Prologue.Mission00");
    }
    if ((gv_campaign_Missions.lv_missionID > 4) && (TriggerIsEnabled(gt_SpawnLoopCampaign) == false)) {
        gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_Campaign, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CampaignMissionStart_Init () {
    gt_CampaignMissionStart = TriggerCreate("gt_CampaignMissionStart_Func");
    TriggerEnable(gt_CampaignMissionStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Single Mission Checked
//--------------------------------------------------------------------------------------------------
bool gt_CampaignSingleMissionChecked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
        gv_campaign.lv_singleMission = true;
    }
    else {
        gv_campaign.lv_singleMission = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CampaignSingleMissionChecked_Init () {
    gt_CampaignSingleMissionChecked = TriggerCreate("gt_CampaignSingleMissionChecked_Func");
    TriggerEnable(gt_CampaignSingleMissionChecked, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign Setup
//--------------------------------------------------------------------------------------------------
bool gt_CampaignSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto78691DD3_ae = 9;
    const int auto78691DD3_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/09F053A5", "A", StringToText(UserDataGetString("GameModes", UserDataInstance("GameModes", lib90F7C81D_gf_GameMode()), "Game Mode", 1)));
    TextExpressionSetToken("Param/Expression/09F053A5", "B", IntToText(PlayerGroupCount(lib90F7C81D_gv_players)));
    TriggerDebugOutput(gv_debug.lv_gameEventsType, TextExpressionAssemble("Param/Expression/09F053A5"), gv_debug.lv_gameEvents);
    TriggerEnable(TriggerGetCurrent(), false);
    lib90F7C81D_gf_TurnWeaponsItemsOnOff("Weapons&Items_1", true);
    lib90F7C81D_gf_ModifyWeaponsItemsLoop("Weapons&Items_1", 270.0, c_playerPropOperSetTo);
    TriggerEnable(gt_CampaignDebugCommands, true);
    GameSetMissionTimePaused(false);
    TriggerEnable(lib90F7C81D_gt_PeriodicWeatherEvent, true);
    gf_UndeadGroupFilter(ge_UndeadUnitFilter_All, false);
    gf_UndeadGroupFilter(ge_UndeadUnitFilter_Fliers, true);
    gf_UndeadGroupFilter(ge_UndeadUnitFilter_T1, true);
    gf_UndeadGroupFilter(ge_UndeadUnitFilter_T1Fliers, true);
    gf_StartInfestationLevel();
    DialogControlHookupStandard(c_triggerControlTypeButton, "$SBMKills");
    DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Campaign", "True");
    if ((GameIsTestMap(false) == false)) {
        if ((gv_campaign.lv_prologueSkip == true)) {
            lib90F7C81D_gf_RunEvent("SetupCacheSites");
            lv_index = 0;
            for ( ; ( (auto78691DD3_ai >= 0 && lv_index <= auto78691DD3_ae) || (auto78691DD3_ai < 0 && lv_index >= auto78691DD3_ae) ) ; lv_index += auto78691DD3_ai ) {
                gv_prologue.lv_mission01SentryRegions[lv_index] = RegionFromName(("C.P.Sentry Spot " + IntToString((lv_index + 1))));
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "VulcanMK88SentryGun", 0, 0, RegionGetCenter(gv_prologue.lv_mission01SentryRegions[lv_index]));
            }
            gv_prologue.lv_mission03TotalReservists = 8;
            gf_AddHeroLevels(2);
            gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_Campaign, true);
            TriggerEnable(gt_EngineerEscortSetup, true);
            lib90F7C81D_gf_RunCampaignEvent("Chapter-1.Mission1");
        }
        else {
            TriggerEnable(gt_ConductKLE, true);
            lib90F7C81D_gf_RunCampaignEvent("Prologue.Mission00");
        }
    }
    else {
        gf_MissionMenuInit();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CampaignSetup_Init () {
    gt_CampaignSetup = TriggerCreate("gt_CampaignSetup_Func");
    TriggerEnable(gt_CampaignSetup, false);
    lib90F7C81D_gf_StartCampaign(gt_CampaignSetup);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 3 Minutes
//--------------------------------------------------------------------------------------------------
bool gt_Survival3Minutes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Survival6Minutes, true);
    gf_AddHeroLevels(1);
    gf_XPGainGlobal(FixedToInt(lib90F7C81D_gf_GetModeXP("cs.3 Minutes")), lib90F7C81D_gf_GetModeText("cs.3 Minutes"));
    Wait(0.1, c_timeGame);
    gf_SpawnUnitGroup("Basic", true);
    gf_SpawnUnitGroup("Basic", true);
    gf_SpawnUnitGroup("Basic", true);
    gf_SpawnUnitGroup("Basic", true);
    gf_SpawnUnitGroup("Basic", true);
    gf_SpawnUnitGroup("Basic", true);
    gf_SpawnUnitGroup("Assault Basic", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival3Minutes_Init () {
    gt_Survival3Minutes = TriggerCreate("gt_Survival3Minutes_Func");
    TriggerEnable(gt_Survival3Minutes, false);
    lib90F7C81D_gf_SurvivalEvent(gt_Survival3Minutes, "_3Min");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 6 Minutes
//--------------------------------------------------------------------------------------------------
bool gt_Survival6Minutes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Survival9Minutes, true);
    gf_UndeadGroupFilter(ge_UndeadUnitFilter_All, true);
    gf_AddHeroLevels(1);
    gf_XPGainGlobal(FixedToInt(lib90F7C81D_gf_GetModeXP("cs.6 Minutes")), lib90F7C81D_gf_GetModeText("cs.6 Minutes"));
    Wait(0.1, c_timeGame);
    gf_SendT2AttackWave(true, "Arachnathid", 1, null, 0, null, 0);
    gf_SpawnUnitGroup("Basic", true);
    gf_SpawnUnitGroup("Basic", true);
    gf_SpawnUnitGroup("Basic", true);
    gf_SpawnUnitGroup("Basic", true);
    gf_SpawnUnitGroup("Basic", true);
    gf_SpawnUnitGroup("Basic", true);
    gf_SpawnUnitGroup("Variety", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival6Minutes_Init () {
    gt_Survival6Minutes = TriggerCreate("gt_Survival6Minutes_Func");
    TriggerEnable(gt_Survival6Minutes, false);
    lib90F7C81D_gf_SurvivalEvent(gt_Survival6Minutes, "_6Min");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 9 Minutes
//--------------------------------------------------------------------------------------------------
bool gt_Survival9Minutes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Survival12Minutes, true);
    gf_AddHeroLevels(1);
    gf_XPGainGlobal(FixedToInt(lib90F7C81D_gf_GetModeXP("cs.9 Minutes")), lib90F7C81D_gf_GetModeText("cs.9 Minutes"));
    Wait(0.1, c_timeGame);
    gf_SpawnUnitGroup("Basic", true);
    gf_SpawnUnitGroup("Basic", true);
    gf_SpawnUnitGroup("Basic", true);
    gf_SpawnUnitGroup("Basic", true);
    gf_SpawnUnitGroup("Assault Basic", true);
    gf_SpawnUnitGroup("Assault Variety", true);
    gf_SpawnUnitGroup("Assault Basic", true);
    gf_SpawnUnitGroup("Basic Air", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival9Minutes_Init () {
    gt_Survival9Minutes = TriggerCreate("gt_Survival9Minutes_Func");
    TriggerEnable(gt_Survival9Minutes, false);
    lib90F7C81D_gf_SurvivalEvent(gt_Survival9Minutes, "_9Min");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 12 Minutes
//--------------------------------------------------------------------------------------------------
bool gt_Survival12Minutes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Survival15Minutes, true);
    gf_AddHeroLevels(1);
    gf_XPGainGlobal(FixedToInt(lib90F7C81D_gf_GetModeXP("cs.12 Minutes")), lib90F7C81D_gf_GetModeText("cs.12 Minutes"));
    lib90F7C81D_gf_SetGlobalLightingChange(15.0, "UADDay");
    Wait(0.1, c_timeGame);
    gf_SendT2AttackWave(true, "Vesania", 1, null, 0, null, 0);
    gf_SpawnUnitGroup("Basic", true);
    gf_SpawnUnitGroup("Basic", true);
    gf_SpawnUnitGroup("Basic", true);
    gf_SpawnUnitGroup("Variety", true);
    gf_SpawnUnitGroup("Variety", true);
    gf_SpawnUnitGroup("Assault Variety", true);
    gf_SpawnUnitGroup("Basic", true);
    gf_SpawnUnitGroup("Special T3", true);
    gf_SpawnUnitGroup("Basic Air", true);
    gf_SpawnUnitGroup("Special T2", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival12Minutes_Init () {
    gt_Survival12Minutes = TriggerCreate("gt_Survival12Minutes_Func");
    TriggerEnable(gt_Survival12Minutes, false);
    lib90F7C81D_gf_SurvivalEvent(gt_Survival12Minutes, "_12Min");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 15 Minutes
//--------------------------------------------------------------------------------------------------
bool gt_Survival15Minutes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib90F7C81D_gv_weather.lv_nightTime = true;
    TriggerEnable(gt_Survival18Minutes, true);
    gf_AddHeroLevels(1);
    gf_XPGainGlobal(FixedToInt(lib90F7C81D_gf_GetModeXP("cs.15 Minutes")), lib90F7C81D_gf_GetModeText("cs.15 Minutes"));
    Wait(0.1, c_timeGame);
    gf_SpawnUnitGroup("Ground Assault Basic", true);
    gf_SpawnUnitGroup("Ground Assault Basic", true);
    gf_SpawnUnitGroup("Ground Assault Basic", true);
    gf_SpawnUnitGroup("Ground Assault Basic", true);
    gf_SpawnUnitGroup("Special T3", true);
    gf_SpawnUnitGroup("Special T3", true);
    gf_SpawnUnitGroup("Fliers", true);
    gf_SpawnUnitGroup("Special T2", true);
    gf_SpawnUnitGroup("Special T2", true);
    gf_SpawnUnitGroup("Ranged", true);
    if ((RandomInt(0, 2) > 0)) {
        gf_SpawnUnitGroup("T1", true);
    }
    else {
        gf_SpawnUnitGroup("Flying T1", true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival15Minutes_Init () {
    gt_Survival15Minutes = TriggerCreate("gt_Survival15Minutes_Func");
    TriggerEnable(gt_Survival15Minutes, false);
    lib90F7C81D_gf_SurvivalEvent(gt_Survival15Minutes, "_15Min");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 18 Minutes
//--------------------------------------------------------------------------------------------------
bool gt_Survival18Minutes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Survival21Minutes, true);
    gf_AddHeroLevels(1);
    gf_XPGainGlobal(FixedToInt(lib90F7C81D_gf_GetModeXP("cs.18 Minutes")), lib90F7C81D_gf_GetModeText("cs.18 Minutes"));
    Wait(0.1, c_timeGame);
    gf_SendT2AttackWave(true, "Minerva", 1, null, 0, null, 0);
    gf_SpawnUnitGroup("T3 Ground Variation", true);
    gf_SpawnUnitGroup("T3 Ground Variation", true);
    gf_SpawnUnitGroup("Ground Assault Variation", true);
    gf_SpawnUnitGroup("Ground Assault Variation", true);
    gf_SpawnUnitGroup("Special T3", true);
    gf_SpawnUnitGroup("Special T3", true);
    gf_SpawnUnitGroup("Fliers", true);
    gf_SpawnUnitGroup("Special T2", true);
    gf_SpawnUnitGroup("Special T2", true);
    if ((RandomInt(0, 2) > 0)) {
        gf_SpawnUnitGroup("T1", true);
    }
    else {
        gf_SpawnUnitGroup("Flying T1", true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival18Minutes_Init () {
    gt_Survival18Minutes = TriggerCreate("gt_Survival18Minutes_Func");
    TriggerEnable(gt_Survival18Minutes, false);
    lib90F7C81D_gf_SurvivalEvent(gt_Survival18Minutes, "_18Min");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 21 Minutes
//--------------------------------------------------------------------------------------------------
bool gt_Survival21Minutes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Survival24Minutes, true);
    lib90F7C81D_gf_SetGlobalLightingChange(15.0, "UADDusk");
    gf_AddHeroLevels(1);
    gf_XPGainGlobal(FixedToInt(lib90F7C81D_gf_GetModeXP("cs.21 Minutes")), lib90F7C81D_gf_GetModeText("cs.21 Minutes"));
    Wait(0.1, c_timeGame);
    gf_SpawnUnitGroup("Ground Assault Variation", true);
    gf_SpawnUnitGroup("Ground Assault Variation", true);
    gf_SpawnUnitGroup("Special T3", true);
    gf_SpawnUnitGroup("Special T3", true);
    gf_SpawnUnitGroup("Fliers", true);
    gf_SpawnUnitGroup("Special T2", true);
    gf_SpawnUnitGroup("Special T2", true);
    gf_SpawnUnitGroup("Ranged Air", true);
    gf_SpawnUnitGroup("Ranged", true);
    if ((RandomInt(0, 2) > 0)) {
        gf_SpawnUnitGroup("T1", true);
    }
    else {
        gf_SpawnUnitGroup("Flying T1", true);
    }
    if ((RandomInt(0, 2) > 0)) {
        gf_SpawnUnitGroup("T1", true);
    }
    else {
        gf_SpawnUnitGroup("Flying T1", true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival21Minutes_Init () {
    gt_Survival21Minutes = TriggerCreate("gt_Survival21Minutes_Func");
    TriggerEnable(gt_Survival21Minutes, false);
    lib90F7C81D_gf_SurvivalEvent(gt_Survival21Minutes, "_21Min");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 24 Minutes
//--------------------------------------------------------------------------------------------------
bool gt_Survival24Minutes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Survival27Minutes, true);
    gf_AddHeroLevels(1);
    gf_XPGainGlobal(FixedToInt(lib90F7C81D_gf_GetModeXP("cs.24 Minutes")), lib90F7C81D_gf_GetModeText("cs.24 Minutes"));
    Wait(0.1, c_timeGame);
    gf_SendT2AttackWave(true, "Ares", 1, null, 0, null, 0);
    gf_SpawnUnitGroup("Ground Basic", true);
    gf_SpawnUnitGroup("Ground Basic", true);
    gf_SpawnUnitGroup("Ground Basic", true);
    gf_SpawnUnitGroup("Special T3", true);
    gf_SpawnUnitGroup("Special T3", true);
    gf_SpawnUnitGroup("Special T3", true);
    gf_SpawnUnitGroup("Fliers", true);
    gf_SpawnUnitGroup("Fliers", true);
    gf_SpawnUnitGroup("Special T2", true);
    gf_SpawnUnitGroup("Special T2", true);
    gf_SpawnUnitGroup("Special T2", true);
    gf_SpawnUnitGroup("Ranged Air", true);
    gf_SpawnUnitGroup("Ranged", true);
    if ((RandomInt(0, 2) > 0)) {
        gf_SpawnUnitGroup("T1", true);
    }
    else {
        gf_SpawnUnitGroup("Flying T1", true);
    }
    if ((RandomInt(0, 2) > 0)) {
        gf_SpawnUnitGroup("T1", true);
    }
    else {
        gf_SpawnUnitGroup("Flying T1", true);
    }
    lib90F7C81D_gf_SetGlobalLightingChange(15.0, "UADNight");
    lib90F7C81D_gf_EnableNightVision();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/9FC00DB0"));
    Wait(1.5, c_timeGame);
    lib90F7C81D_gf_FlashCCButton(0, "NOD", 2.5);
    lib90F7C81D_gf_FlashCCButton(0, "NODInfrared", 2.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival24Minutes_Init () {
    gt_Survival24Minutes = TriggerCreate("gt_Survival24Minutes_Func");
    TriggerEnable(gt_Survival24Minutes, false);
    lib90F7C81D_gf_SurvivalEvent(gt_Survival24Minutes, "_24Min");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 27 Minutes
//--------------------------------------------------------------------------------------------------
bool gt_Survival27Minutes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Survival30Minutes, true);
    gf_AddHeroLevels(1);
    gf_XPGainGlobal(FixedToInt(lib90F7C81D_gf_GetModeXP("cs.27 Minutes")), lib90F7C81D_gf_GetModeText("cs.27 Minutes"));
    Wait(0.1, c_timeGame);
    gf_SpawnUnitGroup("Ground Basic", true);
    gf_SpawnUnitGroup("Ground Basic", true);
    gf_SpawnUnitGroup("Ground Basic", true);
    gf_SpawnUnitGroup("Ground Basic", true);
    gf_SpawnUnitGroup("Ground Basic", true);
    gf_SpawnUnitGroup("Ground Basic", true);
    gf_SpawnUnitGroup("Ground Basic", true);
    gf_SpawnUnitGroup("Special T3", true);
    gf_SpawnUnitGroup("Special T3", true);
    gf_SpawnUnitGroup("Fliers", true);
    gf_SpawnUnitGroup("Special T2", true);
    gf_SpawnUnitGroup("Special T2", true);
    gf_SpawnUnitGroup("Ranged Air", true);
    gf_SpawnUnitGroup("Ranged", true);
    if ((RandomInt(0, 2) > 0)) {
        gf_SpawnUnitGroup("T1", true);
    }
    else {
        gf_SpawnUnitGroup("Flying T1", true);
    }
    if ((RandomInt(0, 2) > 0)) {
        gf_SpawnUnitGroup("T1", true);
    }
    else {
        gf_SpawnUnitGroup("Flying T1", true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival27Minutes_Init () {
    gt_Survival27Minutes = TriggerCreate("gt_Survival27Minutes_Func");
    TriggerEnable(gt_Survival27Minutes, false);
    lib90F7C81D_gf_SurvivalEvent(gt_Survival27Minutes, "_27Min");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 30 Minutes
//--------------------------------------------------------------------------------------------------
bool gt_Survival30Minutes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Survival35Minutes, true);
    gf_AddHeroLevels(1);
    gf_XPGainGlobal(FixedToInt(lib90F7C81D_gf_GetModeXP("cs.30 Minutes")), lib90F7C81D_gf_GetModeText("cs.30 Minutes"));
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
    Wait(4.0, c_timeGame);
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateHidden);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/CC7FF693"));
    Wait(3.0, c_timeGame);
    ObjectiveSetName(lib90F7C81D_gv_mainObj, StringExternal("Param/Value/3854CB16"));
    ObjectiveSetDescription(lib90F7C81D_gv_mainObj, StringExternal("Param/Value/7610A5D2"));
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateActive);
    Wait(0.1, c_timeGame);
    gf_SpawnUnitGroup("Ground Basic", true);
    gf_SpawnUnitGroup("Ground Basic", true);
    gf_SpawnUnitGroup("Ground Basic", true);
    gf_SpawnUnitGroup("Ground Basic", true);
    gf_SpawnUnitGroup("Ground Basic", true);
    gf_SpawnUnitGroup("Ground Basic", true);
    gf_SpawnUnitGroup("Special T3", true);
    gf_SpawnUnitGroup("Special T3", true);
    gf_SpawnUnitGroup("Fliers", true);
    gf_SpawnUnitGroup("Fliers", true);
    gf_SpawnUnitGroup("Special T2", true);
    gf_SpawnUnitGroup("Special T2", true);
    gf_SpawnUnitGroup("Ground Assault Variation", true);
    gf_SpawnUnitGroup("Ground Assault Variation", true);
    gf_SpawnUnitGroup("Ground Assault Variation", true);
    gf_SpawnUnitGroup("Ground Assault Variation", true);
    gf_SpawnUnitGroup("Ground Assault Variation", true);
    gf_SpawnUnitGroup("Ground Assault Variation", true);
    gf_SpawnUnitGroup("Ranged Air", true);
    gf_SpawnUnitGroup("Ranged", true);
    if ((RandomInt(0, 2) > 0)) {
        gf_SpawnUnitGroup("T1", true);
    }
    else {
        gf_SpawnUnitGroup("Flying T1", true);
    }
    if ((RandomInt(0, 2) > 0)) {
        gf_SpawnUnitGroup("T1", true);
    }
    else {
        gf_SpawnUnitGroup("Flying T1", true);
    }
    Wait(30.0, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/BDC4CF30"));
    SoundPlayForPlayer(SoundLink("Brutalisk_Roar", 2), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeGame);
    ObjectiveCreate(StringExternal("Param/Value/36660A1D"), StringExternal("Param/Value/A7FFF33D"), c_objectiveStateActive, false);
    lib90F7C81D_gv_secondObj = ObjectiveLastCreated();
    TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/CD39F4AE"), gv_debug.lv_spawnMechanics);
    gf_SendTimedBossSpawn(0.0, "Widower", gt_SurvivalMiniBossKilled);
    TriggerEnable(gt_SurvivalMiniBossKilled, true);
    TriggerEnable(gt_ConsumeLife, true);
    gf_SpawnUnitGroup("Ground Basic", true);
    gf_SpawnUnitGroup("Ground Basic", true);
    gf_SpawnUnitGroup("Special T3", true);
    gf_SpawnUnitGroup("Fliers", true);
    gf_SpawnUnitGroup("Special T2", true);
    gf_SpawnUnitGroup("Ground Assault Variation", true);
    if ((RandomInt(0, 2) > 0)) {
        gf_SpawnUnitGroup("T1", true);
    }
    else {
        gf_SpawnUnitGroup("Flying T1", true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival30Minutes_Init () {
    gt_Survival30Minutes = TriggerCreate("gt_Survival30Minutes_Func");
    TriggerEnable(gt_Survival30Minutes, false);
    lib90F7C81D_gf_SurvivalEvent(gt_Survival30Minutes, "_30Min");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival 35 Minutes
//--------------------------------------------------------------------------------------------------
bool gt_Survival35Minutes_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoF9E5DB51_g;
    int autoF9E5DB51_var;
    playergroup autoBA1CE2D2_g;
    int autoBA1CE2D2_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoF9E5DB51_g = lib90F7C81D_gv_players;
    autoF9E5DB51_var = -1;
    while (true) {
        autoF9E5DB51_var = PlayerGroupNextPlayer(autoF9E5DB51_g, autoF9E5DB51_var);
        if (autoF9E5DB51_var < 0) { break; }
        TriggerAddEventUnitRegion(gt_SurvivalEvacPlayer, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lib90F7C81D_gv_playerHeroes[autoF9E5DB51_var])), RegionFromId(31), true);
        TriggerAddEventUnitRegion(gt_SurvivalEvacPlayer, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lib90F7C81D_gv_playerHeroes[autoF9E5DB51_var])), RegionFromId(31), false);
        TriggerAddEventUnitRegion(gt_SurvivalEvacPlayer, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lib90F7C81D_gv_playerHeroes[autoF9E5DB51_var])), RegionFromId(32), true);
        TriggerAddEventUnitRegion(gt_SurvivalEvacPlayer, UnitRefFromUnit(libE6C8C21C_gf_ReturnUnit(lib90F7C81D_gv_playerHeroes[autoF9E5DB51_var])), RegionFromId(32), false);
    }
    gv_survival.lv_lZRegion = lib90F7C81D_gv_lZs[RandomInt(1, 2)];
    UnitCreate(1, "ColonistShip", 0, 13, PointWithOffset(RegionGetCenter(gv_survival.lv_lZRegion), 0.0, 0.0), libNtve_gf_RandomAngle());
    gv_survival.lv_phantom = UnitLastCreated();
    UnitSetTeamColorIndex(gv_survival.lv_phantom, 14);
    libNtve_gf_MakeUnitInvulnerable(gv_survival.lv_phantom, true);
    autoBA1CE2D2_g = lib90F7C81D_gv_players;
    autoBA1CE2D2_var = -1;
    while (true) {
        autoBA1CE2D2_var = PlayerGroupNextPlayer(autoBA1CE2D2_g, autoBA1CE2D2_var);
        if (autoBA1CE2D2_var < 0) { break; }
        libNtve_gf_ShareVisionofUnit(gv_survival.lv_phantom, true, autoBA1CE2D2_var);
    }
    libNtve_gf_MakeUnitInvulnerable(gv_survival.lv_phantom, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
    SoundPlayForPlayer(SoundLink("TRaynor01MusicEventA", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), true);
    ObjectiveSetName(lib90F7C81D_gv_mainObj, StringExternal("Param/Value/F5A566E0"));
    TimerStart(lib90F7C81D_gv_missiontimer, 120.0, false, c_timeGame);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(gv_survival.lv_lZRegion), ColorWithAlpha(0.00, 100.00, 50.20, 0.00), 120.0, 270.0);
    PingSetTooltip(PingLastCreated(), StringExternal("Param/Value/A5ECC09D"));
    TriggerEnable(gt_SurvivalEnd, true);
    TriggerEnable(gt_SurvivalEvacPlayer, true);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/8AD9C9EE"));
    Wait(5.0, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/AB8E09F6"));
    gf_SpawnUnitGroup("Ground Basic", true);
    gf_SpawnUnitGroup("Ground Basic", true);
    gf_SpawnUnitGroup("Special T3", true);
    gf_SpawnUnitGroup("Fliers", true);
    gf_SpawnUnitGroup("Special T2", true);
    gf_SpawnUnitGroup("Ground Assault Variation", true);
    gf_SpawnUnitGroup("Ranged Air", true);
    gf_SpawnUnitGroup("Ranged Air", true);
    gf_SpawnUnitGroup("Ranged", true);
    Wait(2.5, c_timeGame);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Survival35Minutes_Init () {
    gt_Survival35Minutes = TriggerCreate("gt_Survival35Minutes_Func");
    TriggerEnable(gt_Survival35Minutes, false);
    lib90F7C81D_gf_SurvivalEvent(gt_Survival35Minutes, "_35Min");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival Evac Player
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalEvacPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_allextracted;

    // Automatic Variable Declarations
    unitgroup auto949AA3EE_g;
    int auto949AA3EE_u;
    unit auto949AA3EE_var;
    playergroup autoAFC107DC_g;
    int autoAFC107DC_var;

    // Variable Initialization
    lv_allextracted = true;

    // Conditions
    if (testConds) {
        if (!((PlayerType(UnitGetOwner(EventUnit())) == c_playerTypeUser))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((EventUnitRegion() == gv_survival.lv_lZRegion))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSelect(EventUnit(), UnitGetOwner(EventUnit()), false);
    libNtve_gf_PauseUnit(EventUnit(), true);
    libNtve_gf_MakeUnitInvulnerable(EventUnit(), true);
    libNtve_gf_ShowHideUnit(EventUnit(), false);
    UnitSetState(EventUnit(), c_unitStateTargetable, false);
    UnitSetState(EventUnit(), c_unitStateSelectable, false);
    gv_survival.lv_extracted += 1;
    auto949AA3EE_g = lib90F7C81D_gv_heroesGroup;
    auto949AA3EE_u = UnitGroupCount(auto949AA3EE_g, c_unitCountAll);
    for (;; auto949AA3EE_u -= 1) {
        auto949AA3EE_var = UnitGroupUnitFromEnd(auto949AA3EE_g, auto949AA3EE_u);
        if (auto949AA3EE_var == null) { break; }
        if ((libNtve_gf_UnitIsHidden(auto949AA3EE_var) == false) && (UnitIsAlive(auto949AA3EE_var) == true)) {
            lv_allextracted = false;
        }

    }
    gf_XPGainGlobal(FixedToInt(lib90F7C81D_gf_GetModeXP("cs.Soldier Extract")), lib90F7C81D_gf_GetModeText("cs.Soldier Extract"));
    if ((lv_allextracted == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        if ((gv_survival.lv_smallTeam == true) && (gv_survival.lv_extracted == PlayerGroupCount(lib90F7C81D_gv_players))) {
            autoAFC107DC_g = lib90F7C81D_gv_players;
            autoAFC107DC_var = -1;
            while (true) {
                autoAFC107DC_var = PlayerGroupNextPlayer(autoAFC107DC_g, autoAFC107DC_var);
                if (autoAFC107DC_var < 0) { break; }
                if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[32][autoAFC107DC_var] == false)) {
                    lib90F7C81D_gv_bankData.lv_achievementsUnlocked[32][autoAFC107DC_var] = true;
                    lib90F7C81D_gf_FlashAchievementBadge("Band Of Brothers", autoAFC107DC_var);
                }
            }
        }
        TriggerExecute(gt_SurvivalEnd, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalEvacPlayer_Init () {
    gt_SurvivalEvacPlayer = TriggerCreate("gt_SurvivalEvacPlayer_Func");
    TriggerEnable(gt_SurvivalEvacPlayer, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival End
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoE17A2F2F_g;
    int autoE17A2F2F_var;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SurvivalEvacPlayer, false);
    TriggerEnable(gt_SurvivalMiniBossKilled, false);
    gf_PauseSpawning(true);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), false);
    PingDestroyAll();
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
    lib90F7C81D_gf_GameVictory();
    gf_FirstWinCheck();
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, false);
    SoundPlay(SoundLink("TRaynor01MusicOutro", -1), PlayerGroupAll(), 100.0, 0.0);
    autoE17A2F2F_g = lib90F7C81D_gv_players;
    autoE17A2F2F_var = -1;
    while (true) {
        autoE17A2F2F_var = PlayerGroupNextPlayer(autoE17A2F2F_g, autoE17A2F2F_var);
        if (autoE17A2F2F_var < 0) { break; }
        libNtve_gf_MakeUnitInvulnerable(lib90F7C81D_gv_playerHeroes[autoE17A2F2F_var], true);
        UnitSetState(lib90F7C81D_gv_playerHeroes[autoE17A2F2F_var], c_unitStateTargetable, false);
        CameraPan(autoE17A2F2F_var, UnitGetPosition(gv_survival.lv_phantom), 0.0, -1, 10, false);
        CameraLookAtUnit(autoE17A2F2F_var, gv_survival.lv_phantom);
        CameraLockInput(autoE17A2F2F_var, true);
        if ((lib90F7C81D_gv_sTATS.lv_deaths[autoE17A2F2F_var] == 0)) {
            if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[23][autoE17A2F2F_var] == false)) {
                lib90F7C81D_gv_bankData.lv_achievementsUnlocked[23][autoE17A2F2F_var] = true;
                lib90F7C81D_gf_FlashAchievementBadge("Flawless Victory - Survival", autoE17A2F2F_var);
            }
            else if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[23][autoE17A2F2F_var] == false) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[24][autoE17A2F2F_var] == true) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[25][autoE17A2F2F_var] == true) && (lib90F7C81D_gv_bankData.lv_decalsUnlocked[15][autoE17A2F2F_var] == false)) {
                lib90F7C81D_gv_bankData.lv_achievementsUnlocked[23][autoE17A2F2F_var] = true;
                lib90F7C81D_gf_FlashAchievementBadge("Flawless Victory - Survival", autoE17A2F2F_var);
                lib90F7C81D_gf_FlashAchievementBadge("Flawless Victory", autoE17A2F2F_var);
                lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Decal, "Default", "Bear Claw", autoE17A2F2F_var, false);
            }
        }
    }
    gf_XPGainGlobal(FixedToInt(lib90F7C81D_gv_xPGained), StringExternal("Param/Value/1709BD77"));
    UnitIssueOrder(gv_survival.lv_phantom, Order(AbilityCommand("ColonistShipLiftOff", 0)), c_orderQueueReplace);
    Wait(5.5, c_timeGame);
    UnitRemove(gv_survival.lv_phantom);
    lib90F7C81D_gf_RunEvent("GameOver");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalEnd_Init () {
    gt_SurvivalEnd = TriggerCreate("gt_SurvivalEnd_Func");
    TriggerEnable(gt_SurvivalEnd, false);
    TriggerAddEventTimer(gt_SurvivalEnd, lib90F7C81D_gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival Mini Boss Killed
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalMiniBossKilled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto8CEEE509_g;
    int auto8CEEE509_var;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_survival.lv_bonusObjCompleted = true;
    auto8CEEE509_g = lib90F7C81D_gv_players;
    auto8CEEE509_var = -1;
    while (true) {
        auto8CEEE509_var = PlayerGroupNextPlayer(auto8CEEE509_g, auto8CEEE509_var);
        if (auto8CEEE509_var < 0) { break; }
        if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[21][auto8CEEE509_var] == false)) {
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[21][auto8CEEE509_var] = true;
            lib90F7C81D_gf_FlashAchievementBadge("Widower's Kiss", auto8CEEE509_var);
            DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[0][6], PlayerGroupSingle(auto8CEEE509_var), "AchievementBadge", "Earned");
        }
        if ((gv_survival.lv_consumeLifeCount != 1) && (gv_survival.lv_bonusObjCompleted == true) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[33][auto8CEEE509_var] == false)) {
            lib90F7C81D_gv_bankData.lv_achievementsUnlocked[33][auto8CEEE509_var] = true;
            lib90F7C81D_gf_FlashAchievementBadge("Fast & Furious", auto8CEEE509_var);
        }
    }
    gf_XPGainGlobal(FixedToInt(lib90F7C81D_gf_GetModeXP("cs.Mini Boss")), lib90F7C81D_gf_GetModeText("cs.Mini Boss"));
    ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateCompleted);
    Wait(5.0, c_timeGame);
    ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateHidden);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalMiniBossKilled_Init () {
    gt_SurvivalMiniBossKilled = TriggerCreate("gt_SurvivalMiniBossKilled_Func");
    TriggerEnable(gt_SurvivalMiniBossKilled, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Consume Life
//--------------------------------------------------------------------------------------------------
bool gt_ConsumeLife_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_survival.lv_consumeLifeCount += 1;
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConsumeLife_Init () {
    gt_ConsumeLife = TriggerCreate("gt_ConsumeLife_Func");
    TriggerEnable(gt_ConsumeLife, false);
    TriggerAddEventUnitAbility(gt_ConsumeLife, null, AbilityCommand("ConsumeLife", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return Police To Post
//--------------------------------------------------------------------------------------------------
bool gt_ReturnPoliceToPost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto91C756AC_ae;
    const int auto91C756AC_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto91C756AC_ae = UnitGroupCount(UnitGroupFromId(2), c_unitCountAlive);
    lv_i = 1;
    for ( ; ( (auto91C756AC_ai >= 0 && lv_i <= auto91C756AC_ae) || (auto91C756AC_ai < 0 && lv_i >= auto91C756AC_ae) ) ; lv_i += auto91C756AC_ai ) {
        if ((gv_police.lv_unit[lv_i] == EventPlayerEffectUsedUnit(c_effectUnitSource)) && (UnitGetPosition(gv_police.lv_unit[lv_i]) != gv_police.lv_point[lv_i])) {
            UnitCreateEffectUnit(gv_police.lv_unit[lv_i], "NPCIssueOrderSprint", gv_police.lv_unit[lv_i]);
            break;
        }
    }
    while ((UnitIsAlive(gv_police.lv_unit[lv_i]) == true) && (libNtve_gf_UnitInRegion(gv_police.lv_unit[lv_i], RegionCircle(gv_police.lv_point[lv_i], 1.0)) == false)) {
        UnitIssueOrder(gv_police.lv_unit[lv_i], OrderTargetingPoint(AbilityCommand("attack", 0), gv_police.lv_point[lv_i]), c_orderQueueReplace);
        Wait(5.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturnPoliceToPost_Init () {
    gt_ReturnPoliceToPost = TriggerCreate("gt_ReturnPoliceToPost_Func");
    TriggerEnable(gt_ReturnPoliceToPost, false);
    TriggerAddEventPlayerEffectUsed(gt_ReturnPoliceToPost, 0, "ReturnToPost");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival Mode Setup
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalModeSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((PlayerGroupCount(lib90F7C81D_gv_players) >= 4) && (PlayerGroupCount(lib90F7C81D_gv_players) <= 6)) {
        gv_survival.lv_smallTeam = true;
    }
    lib90F7C81D_gf_TurnWeaponsItemsOnOff("Weapons&Items_1", true);
    TriggerEnable(gt_Survival3Minutes, true);
    lib90F7C81D_gf_ModifyWeaponsItemsLoop("Weapons&Items_1", 270.0, c_playerPropOperSetTo);
    TriggerEnable(lib90F7C81D_gt_PeriodicWeatherEvent, true);
    gf_SurvivalTimer();
    GameSetMissionTimePaused(false);
    gf_UndeadGroupFilter(ge_UndeadUnitFilter_All, false);
    gf_StartInfestationLevel();
    gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_Main, true);
    if ((lib90F7C81D_gv_weeklyModifier.lv_tier1 == true)) {
        gf_UndeadGroupFilter(ge_UndeadUnitFilter_T1, true);
        gf_UndeadGroupFilter(ge_UndeadUnitFilter_T1Fliers, true);
        lib90F7C81D_gf_SetSpawnLoopTimer(lib90F7C81D_ge_LoopType_T1, lib90F7C81D_gv_weeklyModifier.lv_tier1_Timer);
        gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_T1, true);
    }
    gf_PolicePostInit();
    if ((PlayerGroupCount(lib90F7C81D_gv_players) >= 5)) {
        lib90F7C81D_gf_SetSpawnLoopTimer(lib90F7C81D_ge_LoopType_T3, (120.0 - (IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)) * 2.5)));
        gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_T3, true);
    }
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/F0554B13"));
    Wait(1.0, c_timeGame);
    gf_AddHeroLevels(1);
    Wait(4.0, c_timeGame);
    ObjectiveCreate(StringExternal("Param/Value/E975DCD0"), StringExternal("Param/Value/19234D55"), c_objectiveStateActive, true);
    lib90F7C81D_gv_mainObj = ObjectiveLastCreated();
    gf_SpawnUnitGroup("T3 Ground Basic", true);
    gf_SpawnUnitGroup("T3 Ground Basic", true);
    gf_SpawnUnitGroup("T3 Ground Basic", true);
    Wait(30.0, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/8DA5EAEF"));
    lib90F7C81D_gf_RunEvent("SetupCacheSites");
    gf_SpawnUnitGroup("T3 Ground Basic", true);
    gf_SpawnUnitGroup("T3 Ground Basic", true);
    gf_SpawnUnitGroup("T3 Ground Basic", true);
    Wait(60.0, c_timeGame);
    gf_SpawnUnitGroup("T3 Ground Basic", true);
    gf_SpawnUnitGroup("T3 Ground Basic", true);
    gf_SpawnUnitGroup("T3 Ground Basic", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalModeSetup_Init () {
    gt_SurvivalModeSetup = TriggerCreate("gt_SurvivalModeSetup_Func");
    TriggerEnable(gt_SurvivalModeSetup, false);
    lib90F7C81D_gf_StartGameMode(gt_SurvivalModeSetup, "Survival");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mission Survival Picker
//--------------------------------------------------------------------------------------------------
bool gt_MissionSurvivalSetup3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_msv == true)) {
        TriggerEnable(gt_MissionSurvivalSetup2, true);
        gf_RunMissionSurvivalEvent("Variant2");
    }
    else {
        TriggerEnable(gt_MissionSurvivalSetup, true);
        gf_RunMissionSurvivalEvent("Variant1");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MissionSurvivalSetup3_Init () {
    gt_MissionSurvivalSetup3 = TriggerCreate("gt_MissionSurvivalSetup3_Func");
    TriggerEnable(gt_MissionSurvivalSetup3, false);
    lib90F7C81D_gf_StartGameMode(gt_MissionSurvivalSetup3, "Mission Survival");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Convoy Unstuck
//--------------------------------------------------------------------------------------------------
bool gt_ConvoyUnstuck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_indexi;

    // Automatic Variable Declarations
    const int auto703CAE66_ae = 4;
    const int auto703CAE66_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_indexi = 0;
    for ( ; ( (auto703CAE66_ai >= 0 && lv_indexi <= auto703CAE66_ae) || (auto703CAE66_ai < 0 && lv_indexi >= auto703CAE66_ae) ) ; lv_indexi += auto703CAE66_ai ) {
        UnitIssueOrder(gv_missionSurvivalVariant1.lv_convoyUnit[lv_indexi], OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(60))), c_orderQueueReplace);
    }
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoyUnstuck_Init () {
    gt_ConvoyUnstuck = TriggerCreate("gt_ConvoyUnstuck_Func");
    TriggerEnable(gt_ConvoyUnstuck, false);
    TriggerAddEventPlayerEffectUsed(gt_ConvoyUnstuck, 13, "ConvoyAntiStuck");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Convoy Death
//--------------------------------------------------------------------------------------------------
bool gt_ConvoyDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_missionSurvivalVariant1.lv_convoyUnit[0]) || (EventUnit() == gv_missionSurvivalVariant1.lv_convoyUnit[1]) || (EventUnit() == gv_missionSurvivalVariant1.lv_convoyUnit[2]) || (EventUnit() == gv_missionSurvivalVariant1.lv_convoyUnit[3]) || (EventUnit() == gv_missionSurvivalVariant1.lv_convoyUnit[4])))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "MATVConvoy"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/747EB7A3"), gv_debug.lv_gameEvents);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ConvoyExit, false);
    lib90F7C81D_gf_RemoveConvoyPathDisplay();
    ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateFailed);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/B56B8A61"));
    Wait(5.0, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/3EE029D6"));
    Wait(5.0, c_timeGame);
    lib90F7C81D_gf_RunEvent("GameOver");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoyDeath_Init () {
    gt_ConvoyDeath = TriggerCreate("gt_ConvoyDeath_Func");
    TriggerEnable(gt_ConvoyDeath, false);
    TriggerAddEventUnitDied(gt_ConvoyDeath, UnitRefFromVariable("gv_missionSurvivalVariant1.lv_convoyUnit[0]"));
    TriggerAddEventUnitDied(gt_ConvoyDeath, UnitRefFromVariable("gv_missionSurvivalVariant1.lv_convoyUnit[1]"));
    TriggerAddEventUnitDied(gt_ConvoyDeath, UnitRefFromVariable("gv_missionSurvivalVariant1.lv_convoyUnit[2]"));
    TriggerAddEventUnitDied(gt_ConvoyDeath, UnitRefFromVariable("gv_missionSurvivalVariant1.lv_convoyUnit[3]"));
    TriggerAddEventUnitDied(gt_ConvoyDeath, UnitRefFromVariable("gv_missionSurvivalVariant1.lv_convoyUnit[4]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Convoy Exit
//--------------------------------------------------------------------------------------------------
bool gt_ConvoyExit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_additionalXPCounter;
    text lv_flavorText;
    bool lv_convoyAch;

    // Automatic Variable Declarations
    playergroup auto1A441E37_g;
    int auto1A441E37_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventUnit() == gv_missionSurvivalVariant1.lv_convoyUnit[0]) || (EventUnit() == gv_missionSurvivalVariant1.lv_convoyUnit[1]) || (EventUnit() == gv_missionSurvivalVariant1.lv_convoyUnit[2]) || (EventUnit() == gv_missionSurvivalVariant1.lv_convoyUnit[3]) || (EventUnit() == gv_missionSurvivalVariant1.lv_convoyUnit[4])))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "MATVConvoy"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/7BCAECF0"), gv_debug.lv_gameEvents);
    libNtve_gf_ShowHideUnit(EventUnit(), false);
    if ((gv_missionSurvivalVariant1.lv_convoyExitStarted == false)) {
        gv_missionSurvivalVariant1.lv_convoyExitStarted = true;
    }
    if ((gv_missionSurvivalVariant1.lv_convoysExited > 3)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_ConvoyDeath, false);
        TriggerEnable(gt_ConvoyUnstuck, false);
        lib90F7C81D_gf_RemoveConvoyPathDisplay();
        if ((UnitGetPropertyFixed(gv_missionSurvivalVariant1.lv_convoyUnit[0], c_unitPropShields, c_unitPropCurrent) >= 2400.0)) {
            lv_additionalXPCounter = FixedToInt(lib90F7C81D_gf_GetModeXP("ms.Convoy Flawless"));
            lv_flavorText = lib90F7C81D_gf_GetModeText("ms.Convoy Flawless");
        }
        else if ((UnitGetPropertyFixed(gv_missionSurvivalVariant1.lv_convoyUnit[0], c_unitPropShields, c_unitPropCurrent) >= 1200.0)) {
            lv_additionalXPCounter = FixedToInt(lib90F7C81D_gf_GetModeXP("ms.Convoy Scratch"));
            lv_flavorText = lib90F7C81D_gf_GetModeText("ms.Convoy Scratch");
        }
        else if ((UnitGetPropertyFixed(gv_missionSurvivalVariant1.lv_convoyUnit[0], c_unitPropShields, c_unitPropCurrent) >= 1.0)) {
            lv_additionalXPCounter = FixedToInt(lib90F7C81D_gf_GetModeXP("ms.Convoy Paycheck"));
            lv_flavorText = lib90F7C81D_gf_GetModeText("ms.Convoy Paycheck");
        }
        else if ((UnitGetPropertyFixed(gv_missionSurvivalVariant1.lv_convoyUnit[0], c_unitPropLife, c_unitPropCurrent) >= 1200.0)) {
            lv_additionalXPCounter = FixedToInt(lib90F7C81D_gf_GetModeXP("ms.Convoy Tried"));
            lv_flavorText = lib90F7C81D_gf_GetModeText("ms.Convoy Tried");
        }
        else if ((UnitGetPropertyFixed(gv_missionSurvivalVariant1.lv_convoyUnit[0], c_unitPropLife, c_unitPropCurrent) >= 1.0)) {
            lv_additionalXPCounter = FixedToInt(lib90F7C81D_gf_GetModeXP("ms.Convoy Something"));
            lv_flavorText = lib90F7C81D_gf_GetModeText("ms.Convoy Something");
        }
        if ((UnitGetPropertyFixed(gv_missionSurvivalVariant1.lv_convoyUnit[0], c_unitPropShieldsPercent, c_unitPropCurrent) >= 90.0)) {
            lv_convoyAch = true;
        }
        UnitRemove(gv_missionSurvivalVariant1.lv_convoyUnit[0]);
        SoundPlay(SoundLink("TRaynor01MusicOutro", -1), PlayerGroupAll(), 100.0, 0.0);
        gf_PauseSpawning(true);
        UnitPauseAll(true);
        lib90F7C81D_gf_HeroUnitGroupInvunerable(true);
        lib90F7C81D_gf_GameVictory();
        gf_FirstWinCheck();
        auto1A441E37_g = lib90F7C81D_gv_players;
        auto1A441E37_var = -1;
        while (true) {
            auto1A441E37_var = PlayerGroupNextPlayer(auto1A441E37_g, auto1A441E37_var);
            if (auto1A441E37_var < 0) { break; }
            if ((lib90F7C81D_gv_sTATS.lv_deaths[auto1A441E37_var] == 0)) {
                if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[24][auto1A441E37_var] == false)) {
                    TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/AC596FBC") + IntToText(auto1A441E37_var) + StringExternal("Param/Value/CE99BD99")), gv_debug.lv_gameEvents);
                    lib90F7C81D_gv_bankData.lv_achievementsUnlocked[24][auto1A441E37_var] = true;
                    lib90F7C81D_gf_FlashAchievementBadge("Flawless Victory - Mission Survival", auto1A441E37_var);
                }
                else if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[23][auto1A441E37_var] == true) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[24][auto1A441E37_var] == false) && (lib90F7C81D_gv_bankData.lv_achievementsUnlocked[25][auto1A441E37_var] == true) && (lib90F7C81D_gv_bankData.lv_decalsUnlocked[15][auto1A441E37_var] == false)) {
                    TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/FF21EAC4") + IntToText(auto1A441E37_var) + StringExternal("Param/Value/204F3ED7")), gv_debug.lv_gameEvents);
                    lib90F7C81D_gv_bankData.lv_achievementsUnlocked[24][auto1A441E37_var] = true;
                    lib90F7C81D_gf_FlashAchievementBadge("Flawless Victory - Mission Survival", auto1A441E37_var);
                    lib90F7C81D_gf_FlashAchievementBadge("Flawless Victory", auto1A441E37_var);
                    lib90F7C81D_gf_UnlockTexture(lib90F7C81D_ge_TextureType_Decal, "Default", "Bear Claw", auto1A441E37_var, false);
                }
            }
            if ((lv_convoyAch == true)) {
                if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[31][auto1A441E37_var] == false)) {
                    TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/4605687D") + IntToText(auto1A441E37_var) + StringExternal("Param/Value/A584D8C8")), gv_debug.lv_gameEvents);
                    lib90F7C81D_gv_bankData.lv_achievementsUnlocked[31][auto1A441E37_var] = true;
                    lib90F7C81D_gf_FlashAchievementBadge("Just A Scratch", auto1A441E37_var);
                }
            }
        }
        gf_XPGainGlobal(FixedToInt(lv_additionalXPCounter), lv_flavorText);
        Wait(2.5, c_timeGame);
        gf_XPGainGlobal(FixedToInt(lib90F7C81D_gv_xPGained), StringExternal("Param/Value/EE2E81EE"));
        Wait(2.5, c_timeGame);
        lib90F7C81D_gf_RunEvent("GameOver");
    }
    else {
        gv_missionSurvivalVariant1.lv_convoysExited += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoyExit_Init () {
    gt_ConvoyExit = TriggerCreate("gt_ConvoyExit_Func");
    TriggerEnable(gt_ConvoyExit, false);
    TriggerAddEventUnitRegion(gt_ConvoyExit, UnitRefFromVariable("gv_missionSurvivalVariant1.lv_convoyUnit[0]"), RegionFromId(51), true);
    TriggerAddEventUnitRegion(gt_ConvoyExit, UnitRefFromVariable("gv_missionSurvivalVariant1.lv_convoyUnit[1]"), RegionFromId(51), true);
    TriggerAddEventUnitRegion(gt_ConvoyExit, UnitRefFromVariable("gv_missionSurvivalVariant1.lv_convoyUnit[2]"), RegionFromId(51), true);
    TriggerAddEventUnitRegion(gt_ConvoyExit, UnitRefFromVariable("gv_missionSurvivalVariant1.lv_convoyUnit[3]"), RegionFromId(51), true);
    TriggerAddEventUnitRegion(gt_ConvoyExit, UnitRefFromVariable("gv_missionSurvivalVariant1.lv_convoyUnit[4]"), RegionFromId(51), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Convoy Movement
//--------------------------------------------------------------------------------------------------
bool gt_ConvoyMovement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    unitgroup lv_convoyGroup;

    // Automatic Variable Declarations
    const int autoB575E8F4_ae = 4;
    const int autoB575E8F4_ai = 1;
    const int autoAB153D9C_n = 5;
    int autoAB153D9C_i;
    unitgroup auto4564ED19_g;
    int auto4564ED19_u;
    unit auto4564ED19_var;
    unitgroup autoD7E63164_g;
    int autoD7E63164_u;
    unit autoD7E63164_var;

    // Variable Initialization
    lv_convoyGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MATVConvoy"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/28CDA994"), gv_debug.lv_gameEvents);
    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_missionSurvivalVariant1.lv_convoyMovementCurrentIndex <= gv_missionSurvivalVariant1.lv_convoyPoints[(gv_missionSurvivalVariant1.lv_currentRoute - 1)])) {
        lv_index = 0;
        for ( ; ( (autoB575E8F4_ai >= 0 && lv_index <= autoB575E8F4_ae) || (autoB575E8F4_ai < 0 && lv_index >= autoB575E8F4_ae) ) ; lv_index += autoB575E8F4_ai ) {
            UnitGroupAdd(lv_convoyGroup, gv_missionSurvivalVariant1.lv_convoyUnit[lv_index]);
        }
        for (autoAB153D9C_i = 1; autoAB153D9C_i <= autoAB153D9C_n; autoAB153D9C_i += 1) {
            if ((gv_missionSurvivalVariant1.lv_convoyMovementCurrentIndex >= gv_missionSurvivalVariant1.lv_convoyPoints[(gv_missionSurvivalVariant1.lv_currentRoute - 1)])) {
                TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/5B088A49"), gv_debug.lv_gameEvents);
                auto4564ED19_g = lv_convoyGroup;
                auto4564ED19_u = UnitGroupCount(auto4564ED19_g, c_unitCountAll);
                for (;; auto4564ED19_u -= 1) {
                    auto4564ED19_var = UnitGroupUnitFromEnd(auto4564ED19_g, auto4564ED19_u);
                    if (auto4564ED19_var == null) { break; }
                    UnitIssueOrder(auto4564ED19_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(51))), c_orderQueueAddToEnd);
                }
            }
            else {
                autoD7E63164_g = lv_convoyGroup;
                autoD7E63164_u = UnitGroupCount(autoD7E63164_g, c_unitCountAll);
                for (;; autoD7E63164_u -= 1) {
                    autoD7E63164_var = UnitGroupUnitFromEnd(autoD7E63164_g, autoD7E63164_u);
                    if (autoD7E63164_var == null) { break; }
                    UnitIssueOrder(autoD7E63164_var, OrderTargetingPoint(AbilityCommand("move", 0), gv_missionSurvivalVariant1.lv_convoyRoute[gv_missionSurvivalVariant1.lv_convoyMovementCurrentIndex]), c_orderQueueAddToEnd);
                }
                gv_missionSurvivalVariant1.lv_convoyMovementCurrentIndex += 1;
            }
        }
        RegionSetCenter(RegionFromId(60), gv_missionSurvivalVariant1.lv_convoyRoute[(gv_missionSurvivalVariant1.lv_convoyMovementCurrentIndex - 1)]);
        TriggerEnable(TriggerGetCurrent(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoyMovement_Init () {
    gt_ConvoyMovement = TriggerCreate("gt_ConvoyMovement_Func");
    TriggerEnable(gt_ConvoyMovement, false);
    TriggerAddEventUnitRegion(gt_ConvoyMovement, UnitRefFromVariable("gv_missionSurvivalVariant1.lv_convoyUnit[0]"), RegionFromId(60), true);
    TriggerAddEventUnitRegion(gt_ConvoyMovement, UnitRefFromVariable("gv_missionSurvivalVariant1.lv_convoyUnit[1]"), RegionFromId(60), true);
    TriggerAddEventUnitRegion(gt_ConvoyMovement, UnitRefFromVariable("gv_missionSurvivalVariant1.lv_convoyUnit[2]"), RegionFromId(60), true);
    TriggerAddEventUnitRegion(gt_ConvoyMovement, UnitRefFromVariable("gv_missionSurvivalVariant1.lv_convoyUnit[3]"), RegionFromId(60), true);
    TriggerAddEventUnitRegion(gt_ConvoyMovement, UnitRefFromVariable("gv_missionSurvivalVariant1.lv_convoyUnit[4]"), RegionFromId(60), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Convoy ETA Timer
//--------------------------------------------------------------------------------------------------
bool gt_ConvoyETATimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), false);
    Wait(5.0, c_timeGame);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Convoy", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConvoyETATimer_Init () {
    gt_ConvoyETATimer = TriggerCreate("gt_ConvoyETATimer_Func");
    TriggerEnable(gt_ConvoyETATimer, false);
    TriggerAddEventTimer(gt_ConvoyETATimer, lib90F7C81D_gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bruiser Brothers
//--------------------------------------------------------------------------------------------------
bool gt_BruiserBrothers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoC494FC5D_g;
    int autoC494FC5D_var;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }

        if (!(lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (7))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/EF520442"), gv_debug.lv_spawnMechanics);
    if ((libNtve_gf_UnitGroupIsDead(gv_missionSurvivalVariant1.lv_bruiserBrothersGroup) == true)) {
        TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/D3499354"), gv_debug.lv_spawnMechanics);
        TriggerEnable(TriggerGetCurrent(), false);
        autoC494FC5D_g = lib90F7C81D_gv_players;
        autoC494FC5D_var = -1;
        while (true) {
            autoC494FC5D_var = PlayerGroupNextPlayer(autoC494FC5D_g, autoC494FC5D_var);
            if (autoC494FC5D_var < 0) { break; }
            if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[22][autoC494FC5D_var] == false)) {
                TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/26F23FD0") + IntToText(autoC494FC5D_var) + StringExternal("Param/Value/617881BA")), gv_debug.lv_gameEvents);
                lib90F7C81D_gv_bankData.lv_achievementsUnlocked[22][autoC494FC5D_var] = true;
                lib90F7C81D_gf_FlashAchievementBadge("Bruiser Bros", autoC494FC5D_var);
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[1][5], PlayerGroupSingle(autoC494FC5D_var), "AchievementBadge", "Earned");
            }
        }
        ObjectiveSetState(gv_missionSurvivalVariant1.lv_bruiserBrothersObjective, c_objectiveStateCompleted);
        gf_XPGainGlobal(FixedToInt(lib90F7C81D_gf_GetModeXP("ms.Mini Boss")), lib90F7C81D_gf_GetModeText("ms.Mini Boss"));
        Wait(5.0, c_timeGame);
        ObjectiveDestroy(gv_missionSurvivalVariant1.lv_bruiserBrothersObjective);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BruiserBrothers_Init () {
    gt_BruiserBrothers = TriggerCreate("gt_BruiserBrothers_Func");
    TriggerEnable(gt_BruiserBrothers, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Satchel Item Use
//--------------------------------------------------------------------------------------------------
bool gt_SatchelItemUse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sector;
    int lv_target;
    point lv_satchelTarget;
    unit lv_satchelItem;
    bool lv_satchelPlaced;
    bool lv_bonusExceeded;
    bool lv_targetPointInBonus;

    // Automatic Variable Declarations
    const int auto985AD17B_ae = 3;
    const int auto985AD17B_ai = 1;
    const int auto46B0398D_ae = 8;
    const int auto46B0398D_ai = 1;
    const int auto35C3861F_ae = 6;
    const int auto35C3861F_ai = 1;

    // Variable Initialization
    lv_satchelTarget = EventUnitInventoryItemTargetPoint();
    lv_satchelItem = EventUnitInventoryItem();

    // Conditions
    if (testConds) {
        if (!((EventUnitInventoryItem() == gv_missionSurvivalVariant1.lv_satchelItem))) {
            return false;
        }

        if (!((UnitGetType(EventUnitInventoryItem()) == "SatchelCharge"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_sector = 1;
    for ( ; ( (auto985AD17B_ai >= 0 && lv_sector <= auto985AD17B_ae) || (auto985AD17B_ai < 0 && lv_sector >= auto985AD17B_ae) ) ; lv_sector += auto985AD17B_ai ) {
        lv_target = 1;
        for ( ; ( (auto46B0398D_ai >= 0 && lv_target <= auto46B0398D_ae) || (auto46B0398D_ai < 0 && lv_target >= auto46B0398D_ae) ) ; lv_target += auto46B0398D_ai ) {
            if (((UnitGetType(gv_missionSurvivalVariant1.lv_saniesTargetUnit[(lv_sector - 1)][(lv_target - 1)]) == "Sanies") && (RegionContainsPoint(RegionCircle(UnitGetPosition(gv_missionSurvivalVariant1.lv_saniesTargetUnit[(lv_sector - 1)][(lv_target - 1)]), 4.5), lv_satchelTarget) == true) && (gv_missionSurvivalVariant1.lv_saniesTargetAllowed[(lv_sector - 1)][(lv_target - 1)] == true))) {
                TriggerEnable(TriggerGetCurrent(), false);
                if ((RandomInt(0, 1) == 1)) {
                    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/DE518178"));
                }
                else {
                    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/277F1811"));
                }
                gv_missionSurvivalVariant1.lv_saniesCurrentTarget = gv_missionSurvivalVariant1.lv_saniesTargetUnit[(lv_sector - 1)][(lv_target - 1)];
                gf_SpawnSatchel(lv_satchelTarget, lv_sector, lv_target, false);
                TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/03E11228") + StringExternal("Param/Value/0FCA1FF4") + IntToText(lv_sector) + StringExternal("Param/Value/0C9BFA8D") + IntToText(lv_target)), gv_debug.lv_gameEvents);
                gf_SpawnZombiesAtSanies();
                gf_SpawnZombiesAtSanies();
                return true;
            }

        }
        lv_target = 1;
        for ( ; ( (auto35C3861F_ai >= 0 && lv_target <= auto35C3861F_ae) || (auto35C3861F_ai < 0 && lv_target >= auto35C3861F_ae) ) ; lv_target += auto35C3861F_ai ) {
            if (((UnitGetType(gv_missionSurvivalVariant1.lv_saniesBonusUnit[(lv_sector - 1)][(lv_target - 1)]) == "Sanies") && (RegionContainsPoint(RegionCircle(UnitGetPosition(gv_missionSurvivalVariant1.lv_saniesBonusUnit[(lv_sector - 1)][(lv_target - 1)]), 4.5), lv_satchelTarget) == true))) {
                lv_targetPointInBonus = true;
            }
            if ((gv_missionSurvivalVariant1.lv_saniesBonusCount == (gv_missionSurvivalVariant1.lv_saniesTotalBonusAllowed - 1))) {
                lv_bonusExceeded = true;
            }
            if (((UnitGetType(gv_missionSurvivalVariant1.lv_saniesBonusUnit[(lv_sector - 1)][(lv_target - 1)]) == "Sanies") && (RegionContainsPoint(RegionCircle(UnitGetPosition(gv_missionSurvivalVariant1.lv_saniesBonusUnit[(lv_sector - 1)][(lv_target - 1)]), 4.5), lv_satchelTarget) == true) && (gv_missionSurvivalVariant1.lv_saniesBonusAllowed[(lv_sector - 1)][(lv_target - 1)] == true) && (gv_missionSurvivalVariant1.lv_saniesTotalBonusAllowed < gv_missionSurvivalVariant1.lv_saniesBonusMax))) {
                TriggerEnable(TriggerGetCurrent(), false);
                if ((RandomInt(0, 1) == 1)) {
                    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/31D622AB"));
                }
                else {
                    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/E28DB456"));
                }
                gf_SpawnSatchel(lv_satchelTarget, lv_sector, lv_target, true);
                TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/4D61325E") + StringExternal("Param/Value/C32649AA") + IntToText(lv_sector) + StringExternal("Param/Value/FFBEDAD9") + IntToText(lv_target)), gv_debug.lv_gameEvents);
                gv_missionSurvivalVariant1.lv_saniesTotalBonusAllowed += 1;
                gv_missionSurvivalVariant1.lv_saniesCurrentTarget = gv_missionSurvivalVariant1.lv_saniesBonusUnit[(lv_sector - 1)][(lv_target - 1)];
                gf_SpawnZombiesAtSanies();
                gf_SpawnZombiesAtSanies();
                return true;
            }

        }
    }
    if ((lv_bonusExceeded == true) && (lv_targetPointInBonus == true)) {
        lib90F7C81D_gf_MissionText(StringExternal("Param/Value/853B8EBA"));
    }
    else if ((lv_satchelPlaced == false)) {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, StringExternal("Param/Value/B7C036DD"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SatchelItemUse_Init () {
    gt_SatchelItemUse = TriggerCreate("gt_SatchelItemUse_Func");
    TriggerEnable(gt_SatchelItemUse, false);
    TriggerAddEventUnitInventoryChange(gt_SatchelItemUse, null, c_unitInventoryChangeUses, UnitRefFromVariable("gv_missionSurvivalVariant1.lv_satchelItem"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Satchel Timer
//--------------------------------------------------------------------------------------------------
bool gt_SatchelTimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_bonus;
    string lv_temptext;
    int lv_previoustarget;
    int lv_previoussector;
    point lv_satchellocation;
    int lv_locali;
    int lv_locali2;
    int lv_t1;

    // Automatic Variable Declarations
    int auto56F11374_n;
    int auto56F11374_i;
    const int auto3505C3E2_ae = 2;
    const int auto3505C3E2_ai = 1;
    const int auto7CF79E87_ae = 5;
    const int auto7CF79E87_ai = 1;
    playergroup auto27995887_g;
    int auto27995887_var;
    playergroup auto7A8CBA1A_g;
    int auto7A8CBA1A_var;

    // Variable Initialization
    lv_temptext = "";
    lv_satchellocation = UnitGetPosition(gv_missionSurvivalVariant1.lv_satchelUnit);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_missionSurvivalVariant1.lv_satchelDestroyed == false)) {
        if ((gv_missionSurvivalVariant1.lv_satchelTimeRemaining == 15)) {
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(gv_missionSurvivalVariant1.lv_satchelUnit), c_animNameDefault, "Work", c_animFlagPlayForever, c_animTimeDefault);
        }
        if ((gv_missionSurvivalVariant1.lv_satchelTimeRemaining == 10)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", UnitGetPosition(gv_missionSurvivalVariant1.lv_satchelUnit), ColorWithAlpha(50.20, 0.00, 0.00, 0.00), 10.0, 270.0);
            SoundPlayForPlayer(SoundLink("TUIWarningPing", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            gv_missionSurvivalVariant1.lv_satchelExplosionPing = PingLastCreated();
        }
        gv_missionSurvivalVariant1.lv_satchelTimeRemaining -= 1;
        if ((gv_missionSurvivalVariant1.lv_satchelTimeRemaining > 0)) {
            libNtve_gf_SetDialogItemText(gv_missionSurvivalVariant1.lv_satchelLabel, IntToText(gv_missionSurvivalVariant1.lv_satchelTimeRemaining), PlayerGroupAll());
            DialogControlSendAnimationEvent(gv_missionSurvivalVariant1.lv_satchelLabel, PlayerGroupAll(), "Animate");
            BossBarUpdateTitleUAD((StringExternal("Param/Value/932E8CD1") + TextWithColor(IntToText(gv_missionSurvivalVariant1.lv_satchelTimeRemaining), Color(50.20, 0.00, 0.00))));
        }
        else {
            TriggerEnable(TriggerGetCurrent(), false);
            TriggerEnable(gt_SatchelDeath, false);
            gv_missionSurvivalVariant1.lv_satchelMO = false;
            gv_missionSurvivalVariant1.lv_satchelDestroyed = true;
            lib90F7C81D_gf_MissionItemPingRemoveItem(gv_missionSurvivalVariant1.lv_satchelUnit);
            PingDestroy(gv_missionSurvivalVariant1.lv_satchelExplosionPing);
            UnitRemove(gv_missionSurvivalVariant1.lv_satchelUnit);
            PlayerCreateEffectPoint(14, "MissionSurvivalSatchelDamage", lv_satchellocation);
            ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateCompleted);
            ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateHidden);
            gv_missionSurvivalVariant1.lv_saniesAlive -= 1;
            gv_missionSurvivalVariant1.lv_saniesKilled += 1;
            DialogControlDestroy(gv_missionSurvivalVariant1.lv_satchelLabel);
            gv_missionSurvivalVariant1.lv_satchelLabel = c_invalidDialogControlId;
            gv_missionSurvivalVariant1.lv_saniesCurrentTarget = UnitGroupRandomUnit(lib90F7C81D_gv_heroesGroup, c_unitCountAlive);
            lv_previoussector = gv_missionSurvivalVariant1.lv_currentSanie[0];
            lv_previoustarget = gv_missionSurvivalVariant1.lv_currentSanie[1];
            if ((gv_missionSurvivalVariant1.lv_saniesKilled == 2)) {
                gf_UndeadGroupFilter(ge_UndeadUnitFilter_All, true);
            }
            if ((gv_missionSurvivalVariant1.lv_saniesKilled >= 10)) {
                lv_t1 = 1;
                if ((PlayerGroupCount(lib90F7C81D_gv_players) >= 6)) {
                    lv_t1 += 1;
                }
                if ((gv_missionSurvivalVariant1.lv_saniesKilled > 11)) {
                    lv_t1 += 1;
                }
                auto56F11374_n = lv_t1;
                for (auto56F11374_i = 1; auto56F11374_i <= auto56F11374_n; auto56F11374_i += 1) {
                    gf_SpawnUnitGroup("T1", true);
                }
            }
            if ((gv_missionSurvivalVariant1.lv_currentSanie[2] == 1)) {
                gf_AddHalfHeroLevel();
                gf_XPGainGlobal(FixedToInt(lib90F7C81D_gf_GetModeXP("ms.Bonus Sanie")), lib90F7C81D_gf_GetModeText("ms.Bonus Sanie"));
                gv_missionSurvivalVariant1.lv_saniesBonusCount += 1;
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[1][6], IntToText(gv_missionSurvivalVariant1.lv_saniesBonusCount), PlayerGroupAll());
                TextExpressionSetToken("Param/Expression/F5E971F0", "A", IntToText(gv_missionSurvivalVariant1.lv_saniesBonusCount));
                ObjectiveSetName(lib90F7C81D_gv_optionalObj, TextExpressionAssemble("Param/Expression/F5E971F0"));
                lv_temptext = ("Sector " + IntToString(lv_previoussector) + " - Bonus " + IntToString(lv_previoustarget));
                PingDestroy(libHots_gf_PingStoredForUnit(gv_missionSurvivalVariant1.lv_saniesBonusUnit[(lv_previoussector - 1)][(lv_previoustarget - 1)], 1));
                gf_BonusCheck(lv_previoussector, lv_previoustarget);
                UnitKill(gv_missionSurvivalVariant1.lv_saniesBonusUnit[(gv_missionSurvivalVariant1.lv_currentSanie[0] - 1)][(gv_missionSurvivalVariant1.lv_currentSanie[1] - 1)]);
                UnitGroupRemove(gv_missionSurvivalVariant1.lv_saniesGroup, gv_missionSurvivalVariant1.lv_saniesBonusUnit[(gv_missionSurvivalVariant1.lv_currentSanie[0] - 1)][(gv_missionSurvivalVariant1.lv_currentSanie[1] - 1)]);
                if ((gv_missionSurvivalVariant1.lv_saniesBonusCount == gv_missionSurvivalVariant1.lv_saniesBonusMax)) {
                    lv_locali = 0;
                    for ( ; ( (auto3505C3E2_ai >= 0 && lv_locali <= auto3505C3E2_ae) || (auto3505C3E2_ai < 0 && lv_locali >= auto3505C3E2_ae) ) ; lv_locali += auto3505C3E2_ai ) {
                        lv_locali2 = 0;
                        for ( ; ( (auto7CF79E87_ai >= 0 && lv_locali2 <= auto7CF79E87_ae) || (auto7CF79E87_ai < 0 && lv_locali2 >= auto7CF79E87_ae) ) ; lv_locali2 += auto7CF79E87_ai ) {
                            gv_missionSurvivalVariant1.lv_saniesBonusAllowed[lv_locali][lv_locali2] = false;
                        }
                    }
                    gv_missionSurvivalVariant1.lv_saniesBonusComplete = true;
                }
            }
            else {
                lv_temptext = ("Sector " + IntToString(lv_previoussector) + " - Target " + IntToString(lv_previoustarget));
                PingDestroy(libHots_gf_PingStoredForUnit(gv_missionSurvivalVariant1.lv_saniesTargetUnit[(lv_previoussector - 1)][(lv_previoustarget - 1)], 1));
                UnitKill(gv_missionSurvivalVariant1.lv_saniesTargetUnit[(gv_missionSurvivalVariant1.lv_currentSanie[0] - 1)][(gv_missionSurvivalVariant1.lv_currentSanie[1] - 1)]);
                UnitGroupRemove(gv_missionSurvivalVariant1.lv_saniesGroup, gv_missionSurvivalVariant1.lv_saniesTargetUnit[(gv_missionSurvivalVariant1.lv_currentSanie[0] - 1)][(gv_missionSurvivalVariant1.lv_currentSanie[1] - 1)]);
                if (((gv_missionSurvivalVariant1.lv_route[gv_missionSurvivalVariant1.lv_currentTarget][0] == 3) && (gv_missionSurvivalVariant1.lv_route[gv_missionSurvivalVariant1.lv_currentTarget][1] == 8))) {
                    gf_AddHeroLevels(2);
                    gf_XPGainGlobal(FixedToInt(lib90F7C81D_gf_GetModeXP("ms.Cleared All Sanies")), lib90F7C81D_gf_GetModeText("ms.Cleared All Sanies"));
                    gv_missionSurvivalVariant1.lv_saniesCoreCount += 1;
                    TextExpressionSetToken("Param/Expression/0458959B", "A", IntToText(gv_missionSurvivalVariant1.lv_saniesCoreCount));
                    TextExpressionSetToken("Param/Expression/0458959B", "B", IntToText(gv_missionSurvivalVariant1.lv_saniesCoreMax));
                    ObjectiveSetName(lib90F7C81D_gv_mainObj, TextExpressionAssemble("Param/Expression/0458959B"));
                    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
                    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/F3A6FD20"));
                    if ((gv_missionSurvivalVariant1.lv_satchelDamaged == false)) {
                        auto27995887_g = lib90F7C81D_gv_players;
                        auto27995887_var = -1;
                        while (true) {
                            auto27995887_var = PlayerGroupNextPlayer(auto27995887_g, auto27995887_var);
                            if (auto27995887_var < 0) { break; }
                            if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[30][auto27995887_var] == false)) {
                                TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/82A3D73E") + IntToText(auto27995887_var) + StringExternal("Param/Value/AA3749F2")), gv_debug.lv_gameEvents);
                                lib90F7C81D_gv_bankData.lv_achievementsUnlocked[30][auto27995887_var] = true;
                                lib90F7C81D_gf_FlashAchievementBadge("Mission Impossible", auto27995887_var);
                                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[1][8], PlayerGroupSingle(auto27995887_var), "AchievementBadge", "Earned");
                            }
                        }
                    }
                    Wait(5.0, c_timeGame);
                    ObjectiveShow(lib90F7C81D_gv_mainObj, PlayerGroupAll(), false);
                    ObjectiveShow(lib90F7C81D_gv_optionalObj, PlayerGroupAll(), false);
                    gf_CreateConvoy();
                    return true;
                }

                gf_AddHeroLevels(1);
                gf_XPGainGlobal(FixedToInt(gv_missionSurvivalVariant1.lv_experienceCounter), lib90F7C81D_gf_GetModeText("ms.Initial Sanie"));
                gv_missionSurvivalVariant1.lv_experienceCounter += FixedToInt(lib90F7C81D_gf_GetModeXP("ms.Sanie Experience Step"));
                gv_missionSurvivalVariant1.lv_currentTarget += 1;
                gv_missionSurvivalVariant1.lv_saniesCoreCount += 1;
                TextExpressionSetToken("Param/Expression/600869FF", "A", IntToText(gv_missionSurvivalVariant1.lv_saniesCoreCount));
                TextExpressionSetToken("Param/Expression/600869FF", "B", IntToText(gv_missionSurvivalVariant1.lv_saniesCoreMax));
                ObjectiveSetName(lib90F7C81D_gv_mainObj, TextExpressionAssemble("Param/Expression/600869FF"));
                if (((gv_missionSurvivalVariant1.lv_route[gv_missionSurvivalVariant1.lv_currentTarget][0] != 0) && (gv_missionSurvivalVariant1.lv_route[gv_missionSurvivalVariant1.lv_currentTarget][1] != 0))) {
                    PingSetVisible(libHots_gf_PingStoredForUnit(gv_missionSurvivalVariant1.lv_saniesTargetUnit[(gv_missionSurvivalVariant1.lv_route[gv_missionSurvivalVariant1.lv_currentTarget][0] - 1)][(gv_missionSurvivalVariant1.lv_route[gv_missionSurvivalVariant1.lv_currentTarget][1] - 1)], 1), true);
                    gv_missionSurvivalVariant1.lv_saniesTargetAllowed[(gv_missionSurvivalVariant1.lv_route[gv_missionSurvivalVariant1.lv_currentTarget][0] - 1)][(gv_missionSurvivalVariant1.lv_route[gv_missionSurvivalVariant1.lv_currentTarget][1] - 1)] = true;
                }

            }
            gf_DropoffSatchelItem(PointFromName(lv_temptext));
            TriggerEnable(gt_SatchelItemUse, true);
            if ((gv_missionSurvivalVariant1.lv_saniesBonusComplete == true) && (ObjectiveGetState(lib90F7C81D_gv_optionalObj) != c_objectiveStateHidden)) {
                ObjectiveSetState(lib90F7C81D_gv_optionalObj, c_objectiveStateCompleted);
                auto7A8CBA1A_g = lib90F7C81D_gv_players;
                auto7A8CBA1A_var = -1;
                while (true) {
                    auto7A8CBA1A_var = PlayerGroupNextPlayer(auto7A8CBA1A_g, auto7A8CBA1A_var);
                    if (auto7A8CBA1A_var < 0) { break; }
                    if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[27][auto7A8CBA1A_var] == false)) {
                        TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/ADE9EC43") + IntToText(auto7A8CBA1A_var) + StringExternal("Param/Value/30BFD92E")), gv_debug.lv_gameEvents);
                        lib90F7C81D_gv_bankData.lv_achievementsUnlocked[27][auto7A8CBA1A_var] = true;
                        lib90F7C81D_gf_FlashAchievementBadge("Maximum Effort", auto7A8CBA1A_var);
                        DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[1][6], PlayerGroupSingle(auto7A8CBA1A_var), "AchievementBadge", "Earned");
                        PlayerBankSave(auto7A8CBA1A_var);
                    }
                }
                Wait(5.0, c_timeGame);
                ObjectiveShow(lib90F7C81D_gv_optionalObj, PlayerGroupAll(), false);
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SatchelTimer_Init () {
    gt_SatchelTimer = TriggerCreate("gt_SatchelTimer_Func");
    TriggerEnable(gt_SatchelTimer, false);
    TriggerAddEventTimePeriodic(gt_SatchelTimer, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Satchel Beacon
//--------------------------------------------------------------------------------------------------
bool gt_SatchelBeacon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitInventoryItem() == gv_missionSurvivalVariant1.lv_satchelItem))) {
            return false;
        }

        if (!((UnitGetType(EventUnitInventoryItem()) == "SatchelCharge"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_KillModel(gv_missionSurvivalVariant1.lv_satchelBeacon);
    gv_missionSurvivalVariant1.lv_satchelBeacon = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SatchelBeacon_Init () {
    gt_SatchelBeacon = TriggerCreate("gt_SatchelBeacon_Func");
    TriggerEnable(gt_SatchelBeacon, false);
    TriggerAddEventUnitInventoryChange(gt_SatchelBeacon, null, c_unitInventoryChangePicksUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Satchel Death
//--------------------------------------------------------------------------------------------------
bool gt_SatchelDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnit() == gv_missionSurvivalVariant1.lv_satchelUnit))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "M200SatchelCharge"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("UI_MissionFailed", 2), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/ACFBEF11"), gv_debug.lv_gameEvents);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_SatchelTimer, false);
    TriggerEnable(gt_SatchelDamaged, false);
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateFailed);
    ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateFailed);
    TextExpressionSetToken("Param/Expression/556EDAA1", "A", UnitGetName(libNtve_gf_KillingUnit()));
    lib90F7C81D_gf_MissionText(TextExpressionAssemble("Param/Expression/556EDAA1"));
    Wait(5.0, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/DD2257A5"));
    Wait(5.0, c_timeGame);
    lib90F7C81D_gf_RunEvent("GameOver");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SatchelDeath_Init () {
    gt_SatchelDeath = TriggerCreate("gt_SatchelDeath_Func");
    TriggerEnable(gt_SatchelDeath, false);
    TriggerAddEventUnitDied(gt_SatchelDeath, UnitRefFromVariable("gv_missionSurvivalVariant1.lv_satchelUnit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Satchel Damaged
//--------------------------------------------------------------------------------------------------
bool gt_SatchelDamaged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_missionSurvivalVariant1.lv_satchelMO == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/F43A9FB4"), gv_debug.lv_gameEvents);
    TriggerEnable(TriggerGetCurrent(), false);
    gv_missionSurvivalVariant1.lv_satchelDamaged = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SatchelDamaged_Init () {
    gt_SatchelDamaged = TriggerCreate("gt_SatchelDamaged_Func");
    TriggerEnable(gt_SatchelDamaged, false);
    TriggerAddEventPlayerEffectUsed(gt_SatchelDamaged, 0, "SatchelDamaged");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mission Survival Variant 1 Setup
//--------------------------------------------------------------------------------------------------
bool gt_MissionSurvivalSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_route;
    int lv_index;

    // Automatic Variable Declarations
    unitgroup auto7473FA4F_g;
    int auto7473FA4F_u;
    unit auto7473FA4F_var;
    unitgroup auto8DE0B106_g;
    int auto8DE0B106_u;
    unit auto8DE0B106_var;
    int autoB2B827DA_ae;
    const int autoB2B827DA_ai = 1;
    int autoA6DF61C4_ae;
    const int autoA6DF61C4_ai = 1;
    const int auto166DB319_ae = 8;
    const int auto166DB319_ai = 1;

    // Variable Initialization
    lv_route = RandomInt(1, UserDataInstanceCount("MissionSurvivalRoutes"));

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib90F7C81D_gf_TurnWeaponsItemsOnOff("Weapons&Items_1", true);
    lib90F7C81D_gf_ModifyWeaponsItemsLoop("Weapons&Items_1", 210.0, c_playerPropOperSetTo);
    TriggerEnable(gt_MissionSurvDebugVariant1, true);
    GameSetMissionTimePaused(false);
    gf_UndeadGroupFilter(ge_UndeadUnitFilter_All, false);
    gf_StartInfestationLevel();
    TriggerEnable(lib90F7C81D_gt_PeriodicWeatherEvent, true);
    lib90F7C81D_gf_EnableNightVision();
    gv_missionSurvivalVariant1.lv_saniesCoreMax = UserDataGetInt("MissionSurvivalRoutes", UserDataInstance("MissionSurvivalRoutes", lv_route), "Max", 1);
    TextExpressionSetToken("Param/Expression/21A06BA0", "A", IntToText(gv_missionSurvivalVariant1.lv_saniesCoreCount));
    TextExpressionSetToken("Param/Expression/21A06BA0", "B", IntToText(gv_missionSurvivalVariant1.lv_saniesCoreMax));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/21A06BA0"), StringExternal("Param/Value/5CE24276"), c_objectiveStateActive, true);
    lib90F7C81D_gv_mainObj = ObjectiveLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/A4AD9FE1"), StringExternal("Param/Value/426CB1B5"), c_objectiveStateActive, true);
    lib90F7C81D_gv_secondObj = ObjectiveLastCreated();
    ObjectiveSetState(lib90F7C81D_gv_secondObj, c_objectiveStateHidden);
    TextExpressionSetToken("Param/Expression/511AD51D", "A", IntToText(gv_missionSurvivalVariant1.lv_saniesBonusCount));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/511AD51D"), StringExternal("Param/Value/11FCA8B4"), c_objectiveStateActive, false);
    lib90F7C81D_gv_optionalObj = ObjectiveLastCreated();
    gv_missionSurvivalVariant1.lv_bonusRewardRegions[0] = RegionFromId(52);
    gv_missionSurvivalVariant1.lv_bonusRewardRegions[1] = RegionFromId(53);
    gv_missionSurvivalVariant1.lv_bonusRewardRegions[2] = RegionFromId(54);
    gv_missionSurvivalVariant1.lv_bonusRewardRegions[3] = RegionFromId(55);
    gv_missionSurvivalVariant1.lv_bonusRewardRegions[4] = RegionFromId(56);
    gv_missionSurvivalVariant1.lv_bonusRewardRegions[5] = RegionFromId(57);
    gv_missionSurvivalVariant1.lv_bonusRewardRegions[6] = RegionFromId(58);
    gv_missionSurvivalVariant1.lv_bonusRewardRegions[7] = RegionFromId(59);
    gv_missionSurvivalVariant1.lv_bonusRewardRegions[8] = RegionFromId(31);
    gv_missionSurvivalVariant1.lv_bonusRewardRegions[9] = RegionFromId(45);
    gv_missionSurvivalVariant1.lv_experienceCounter = FixedToInt(lib90F7C81D_gf_GetModeXP("ms.Initial Sanie"));
    auto7473FA4F_g = UnitGroupFromId(1);
    auto7473FA4F_u = UnitGroupCount(auto7473FA4F_g, c_unitCountAll);
    for (;; auto7473FA4F_u -= 1) {
        auto7473FA4F_var = UnitGroupUnitFromEnd(auto7473FA4F_g, auto7473FA4F_u);
        if (auto7473FA4F_var == null) { break; }
        UnitRemove(auto7473FA4F_var);
    }
    auto8DE0B106_g = UnitGroupFromId(2);
    auto8DE0B106_u = UnitGroupCount(auto8DE0B106_g, c_unitCountAll);
    for (;; auto8DE0B106_u -= 1) {
        auto8DE0B106_var = UnitGroupUnitFromEnd(auto8DE0B106_g, auto8DE0B106_u);
        if (auto8DE0B106_var == null) { break; }
        UnitRemove(auto8DE0B106_var);
    }
    gv_missionSurvivalVariant1.lv_currentRoute = lv_route;
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/0E47A839"), gv_debug.lv_gameEvents);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/A450CC4D") + IntToText(lv_route)), gv_debug.lv_gameEvents);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/FBC17C50"), gv_debug.lv_gameEvents);
    autoB2B827DA_ae = UserDataInstanceCount("MissionSurvivalSanies");
    lv_index = 1;
    for ( ; ( (autoB2B827DA_ai >= 0 && lv_index <= autoB2B827DA_ae) || (autoB2B827DA_ai < 0 && lv_index >= autoB2B827DA_ae) ) ; lv_index += autoB2B827DA_ai ) {
        gf_SpawnSanies(UserDataGetString("MissionSurvivalSanies", UserDataInstance("MissionSurvivalSanies", lv_index), "Sanies Spawn Point", 1));
    }
    gf_CreateDebris();
    gf_SelectRandomBonus();
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/1E730B26"), gv_debug.lv_gameEvents);
    autoA6DF61C4_ae = UserDataGetInt("MissionSurvivalRoutes", UserDataInstance("MissionSurvivalRoutes", lv_route), "Max", 1);
    lv_index = 1;
    for ( ; ( (autoA6DF61C4_ai >= 0 && lv_index <= autoA6DF61C4_ae) || (autoA6DF61C4_ai < 0 && lv_index >= autoA6DF61C4_ae) ) ; lv_index += autoA6DF61C4_ai ) {
        gv_missionSurvivalVariant1.lv_route[(lv_index - 1)][0] = UserDataGetInt("MissionSurvivalRoutes", UserDataInstance("MissionSurvivalRoutes", lv_route), "Sector", lv_index);
        gv_missionSurvivalVariant1.lv_route[(lv_index - 1)][1] = UserDataGetInt("MissionSurvivalRoutes", UserDataInstance("MissionSurvivalRoutes", lv_route), "Target", lv_index);
        TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringToText("index ") + IntToText(lv_index) + StringToText(" Sector ") + IntToText(gv_missionSurvivalVariant1.lv_route[(lv_index - 1)][0]) + StringToText(" Target ") + IntToText(gv_missionSurvivalVariant1.lv_route[(lv_index - 1)][1])), gv_debug.lv_gameEvents);
    }
    gf_SetupConvoyRoutes(gv_missionSurvivalVariant1.lv_currentRoute);
    gv_missionSurvivalVariant1.lv_saniesTargetAllowed[(gv_missionSurvivalVariant1.lv_route[0][0] - 1)][(gv_missionSurvivalVariant1.lv_route[0][1] - 1)] = true;
    lv_index = 0;
    for ( ; ( (auto166DB319_ai >= 0 && lv_index <= auto166DB319_ae) || (auto166DB319_ai < 0 && lv_index >= auto166DB319_ae) ) ; lv_index += auto166DB319_ai ) {
        if ((gv_missionSurvivalVariant1.lv_route[lv_index][1] != 0) && (gv_missionSurvivalVariant1.lv_route[lv_index][0] != 0)) {
            libNtve_gf_AttachModelToUnit(gv_missionSurvivalVariant1.lv_saniesTargetUnit[(gv_missionSurvivalVariant1.lv_route[lv_index][0] - 1)][(gv_missionSurvivalVariant1.lv_route[lv_index][1] - 1)], "BeaconAttack", "Ref_Head");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetHeight 1.250000");
            ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor 128,0,0");
        }
    }
    Wait(0.5, c_timeGame);
    gf_AddHeroLevels(1);
    Wait(1.0, c_timeGame);
    gf_DropoffSatchelItem(PointFromId(189817471));
    libNtve_gf_SetUpgradeLevelForPlayer(14, "BruiserBrothers", 1);
    PingSetVisible(libHots_gf_PingStoredForUnit(gv_missionSurvivalVariant1.lv_saniesTargetUnit[(gv_missionSurvivalVariant1.lv_route[0][0] - 1)][(gv_missionSurvivalVariant1.lv_route[0][1] - 1)], 1), true);
    gv_missionSurvivalVariant1.lv_saniesCurrentTarget = gv_missionSurvivalVariant1.lv_saniesTargetUnit[(gv_missionSurvivalVariant1.lv_route[0][0] - 1)][(gv_missionSurvivalVariant1.lv_route[0][1] - 1)];
    lib90F7C81D_gf_MissionItemPingEnable(true);
    TriggerEnable(gt_SatchelItemUse, true);
    TriggerEnable(gt_SatchelDamaged, true);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/6118EAC8"));
    Wait(0.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/FCCBCC99"));
    Wait(0.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/37C66192"));
    gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_Sanies, true);
    Wait(30.0, c_timeGame);
    if ((PlayerGroupCount(lib90F7C81D_gv_players) >= 6)) {
        lib90F7C81D_gf_SetSpawnLoopTimer(lib90F7C81D_ge_LoopType_T3, (120.0 - (IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)) * 2.5)));
        gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_T3, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MissionSurvivalSetup_Init () {
    gt_MissionSurvivalSetup = TriggerCreate("gt_MissionSurvivalSetup_Func");
    TriggerEnable(gt_MissionSurvivalSetup, false);
    gf_StartMissionSurvivalVariant(gt_MissionSurvivalSetup, "Variant1");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mission Surv Debug Variant 1
//--------------------------------------------------------------------------------------------------
bool gt_MissionSurvDebugVariant1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_message;
    int lv_user;
    int lv_index;

    // Automatic Variable Declarations
    string autoD59006A3_val;
    const int auto87FCA0C1_ae = 8;
    const int auto87FCA0C1_ai = 1;

    // Variable Initialization
    lv_message = EventChatMessage(false);
    lv_user = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(lib90F7C81D_gf_DevHandles(PlayerHandle(EventPlayer())))) {
            return false;
        }

        if (!((StringEqual(StringWord(lv_message, 1), "gm", c_stringNoCase) == true))) {
            return false;
        }

        if (!(lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (7))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD59006A3_val = StringCase(StringWord(lv_message, 2), true);
    if (autoD59006A3_val == "CONVOY") {
        lv_index = 0;
        for ( ; ( (auto87FCA0C1_ai >= 0 && lv_index <= auto87FCA0C1_ae) || (auto87FCA0C1_ai < 0 && lv_index >= auto87FCA0C1_ae) ) ; lv_index += auto87FCA0C1_ai ) {
            if ((gv_missionSurvivalVariant1.lv_route[lv_index][1] != 0) && (gv_missionSurvivalVariant1.lv_route[lv_index][0] != 0)) {
                UnitRemove(gv_missionSurvivalVariant1.lv_saniesTargetUnit[(gv_missionSurvivalVariant1.lv_route[lv_index][0] - 1)][(gv_missionSurvivalVariant1.lv_route[lv_index][1] - 1)]);
            }
        }
        gf_CreateConvoy();
        UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaSubtitle, StringExternal("Param/Value/3C46AF4C"));
        UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaSubtitle, StringExternal("Param/Value/E5A52085"));
    }
    else if (autoD59006A3_val == "ZOMBIES") {
        gf_SpawnZombiesAtSanies();
        UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaSubtitle, StringExternal("Param/Value/1328DC6C"));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/1064AF49"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MissionSurvDebugVariant1_Init () {
    gt_MissionSurvDebugVariant1 = TriggerCreate("gt_MissionSurvDebugVariant1_Func");
    TriggerEnable(gt_MissionSurvDebugVariant1, false);
    TriggerAddEventChatMessage(gt_MissionSurvDebugVariant1, c_playerAny, "gm", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mission Survival Variant 2 Setup
//--------------------------------------------------------------------------------------------------
bool gt_MissionSurvivalSetup2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_route;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_route = RandomInt(1, UserDataInstanceCount("MissionSurvivalRoutes"));

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lib90F7C81D_gf_TurnWeaponsItemsOnOff("Weapons&Items_1", true);
    lib90F7C81D_gf_ModifyWeaponsItemsLoop("Weapons&Items_1", 210.0, c_playerPropOperSetTo);
    TriggerEnable(gt_MissionSurvDebugVariant2, true);
    GameSetMissionTimePaused(false);
    gf_UndeadGroupFilter(ge_UndeadUnitFilter_All, false);
    gf_StartInfestationLevel();
    lib90F7C81D_gf_EnableNightVision();
    TriggerDebugOutput(1, StringExternal("Param/Value/77F20AF6"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MissionSurvivalSetup2_Init () {
    gt_MissionSurvivalSetup2 = TriggerCreate("gt_MissionSurvivalSetup2_Func");
    TriggerEnable(gt_MissionSurvivalSetup2, false);
    gf_StartMissionSurvivalVariant(gt_MissionSurvivalSetup2, "Variant2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mission Surv Debug Variant 2
//--------------------------------------------------------------------------------------------------
bool gt_MissionSurvDebugVariant2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_message;
    int lv_user;
    int lv_index;

    // Automatic Variable Declarations
    string autoB9842FAF_val;

    // Variable Initialization
    lv_message = EventChatMessage(false);
    lv_user = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(lib90F7C81D_gf_DevHandles(PlayerHandle(EventPlayer())))) {
            return false;
        }

        if (!((StringEqual(StringWord(lv_message, 1), "gm", c_stringNoCase) == true))) {
            return false;
        }

        if (!(lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (7))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB9842FAF_val = StringCase(StringWord(lv_message, 2), true);
    if (autoB9842FAF_val == "CONVOY") {
        gf_CreateConvoyEscort(1);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/3096862F"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MissionSurvDebugVariant2_Init () {
    gt_MissionSurvDebugVariant2 = TriggerCreate("gt_MissionSurvDebugVariant2_Func");
    TriggerEnable(gt_MissionSurvDebugVariant2, false);
    TriggerAddEventChatMessage(gt_MissionSurvDebugVariant2, c_playerAny, "gm", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Timed Rush Boss Death
//--------------------------------------------------------------------------------------------------
bool gt_TimedRushBossDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }

        if (!(lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(libHots_gf_PingStoredForUnit(EventUnit(), 1));
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/B38B22E5"), gv_debug.lv_gameEvents);
    if ((libNtve_gf_UnitGroupIsDead(gv_bossRush.lv_bossGroup) == true)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/FE6DE02A"), gv_debug.lv_gameEvents);
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_RushBossTimer, false);
        ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
        Wait(3.0, c_timeGame);
        ObjectiveDestroy(lib90F7C81D_gv_mainObj);
        gf_AddHeroLevels(1);
        libNtve_gf_StopTimer(lib90F7C81D_gv_missiontimer);
        gf_XPGainGlobal(10, TextExpressionAssemble("Param/Expression/6DD3A7FF"));
        gv_bossRush.lv_bossGroup = UnitGroupEmpty();
        gf_ProgressRound();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TimedRushBossDeath_Init () {
    gt_TimedRushBossDeath = TriggerCreate("gt_TimedRushBossDeath_Func");
    TriggerEnable(gt_TimedRushBossDeath, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rush Boss Timer
//--------------------------------------------------------------------------------------------------
bool gt_RushBossTimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_randomCave;

    // Automatic Variable Declarations
    unitgroup auto02D92CD7_g;
    int auto02D92CD7_u;
    unit auto02D92CD7_var;

    // Variable Initialization
    lv_randomCave = UnitGroupClosestToPoint(gv_bossRush.lv_bossGroup, RegionGetCenter(gf_GetRushRegion()));

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }

        if (!(lib90F7C81D_gf_GetGameMode(8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/FBDAD940"), gv_debug.lv_gameEvents);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_TimedRushBossDeath, false);
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateFailed);
    Wait(3.0, c_timeGame);
    ObjectiveDestroy(lib90F7C81D_gv_mainObj);
    gf_AddHalfHeroLevel();
    RegionSetCenter(gv_bossRush.lv_spawnerRegion, UnitGetPosition(lv_randomCave));
    auto02D92CD7_g = gv_bossRush.lv_bossGroup;
    auto02D92CD7_u = UnitGroupCount(auto02D92CD7_g, c_unitCountAll);
    for (;; auto02D92CD7_u -= 1) {
        auto02D92CD7_var = UnitGroupUnitFromEnd(auto02D92CD7_g, auto02D92CD7_u);
        if (auto02D92CD7_var == null) { break; }
        UnitBehaviorAdd(auto02D92CD7_var, "GhostHoldFireB", auto02D92CD7_var, 1);
        UnitBehaviorAdd(auto02D92CD7_var, "Invulnerable", auto02D92CD7_var, 1);
        UnitIssueOrder(auto02D92CD7_var, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_randomCave)), c_orderQueueReplace);
        TriggerAddEventUnitRegion(gt_RushBossExit, UnitRefFromUnit(auto02D92CD7_var), gv_bossRush.lv_spawnerRegion, true);
        PingDestroy(libHots_gf_PingStoredForUnit(auto02D92CD7_var, 1));
    }
    TriggerEnable(gt_RushBossExit, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RushBossTimer_Init () {
    gt_RushBossTimer = TriggerCreate("gt_RushBossTimer_Func");
    TriggerEnable(gt_RushBossTimer, false);
    TriggerAddEventTimer(gt_RushBossTimer, lib90F7C81D_gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rush Boss Exit
//--------------------------------------------------------------------------------------------------
bool gt_RushBossExit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }

        if (!(lib90F7C81D_gf_GetGameMode(8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/651CE5DE"), gv_debug.lv_gameEvents);
    UnitKill(EventUnit());
    if ((libNtve_gf_UnitGroupIsDead(gv_bossRush.lv_bossGroup) == true)) {
        TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/B20A3DF1"), gv_debug.lv_gameEvents);
        TriggerEnable(TriggerGetCurrent(), false);
        gv_bossRush.lv_bossGroup = UnitGroupEmpty();
        gf_ProgressRound();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RushBossExit_Init () {
    gt_RushBossExit = TriggerCreate("gt_RushBossExit_Func");
    TriggerEnable(gt_RushBossExit, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rush Point A To B Timer
//--------------------------------------------------------------------------------------------------
bool gt_RushPointAToBTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto92318BFB_g;
    int auto92318BFB_var;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }

        if (!(lib90F7C81D_gf_GetGameMode(8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/2356B232"), gv_debug.lv_gameEvents);
    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_StopTimer(lib90F7C81D_gv_missiontimer);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/6505CE11"), gv_debug.lv_gameEvents);
    gv_bossRush.lv_decayActive = true;
    ObjectiveSetState(lib90F7C81D_gv_mainObj, c_objectiveStateCompleted);
    Wait(1.5, c_timeGame);
    ObjectiveDestroy(lib90F7C81D_gv_mainObj);
    TextExpressionSetToken("Param/Expression/2E864474", "B", gf_GetRushName());
    TextExpressionSetToken("Param/Expression/2E864474", "A", IntToText(gv_bossRush.lv_currentRound));
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/2E864474"), StringToText(""), c_objectiveStateActive, true);
    lib90F7C81D_gv_mainObj = ObjectiveLastCreated();
    auto92318BFB_g = lib90F7C81D_gv_players;
    auto92318BFB_var = -1;
    while (true) {
        auto92318BFB_var = PlayerGroupNextPlayer(auto92318BFB_g, auto92318BFB_var);
        if (auto92318BFB_var < 0) { break; }
        VisRevealArea(auto92318BFB_var, gf_GetRushRegion(), gf_GetRushTimeScaled(), false);
    }
    gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_BossRush, true);
    TimerStart(lib90F7C81D_gv_missiontimer, gf_GetRushTimeScaled(), false, c_timeGame);
    TimerWindowShow(lib90F7C81D_gv_missiontimerwindow, PlayerGroupAll(), true);
    lib90F7C81D_gv_missiontimer = TimerLastStarted();
    Wait(gf_GetRushTimeScaled(), c_timeGame);
    gf_XPGainGlobal(6, TextExpressionAssemble("Param/Expression/4745209E"));
    gv_bossRush.lv_decayActive = false;
    gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_BossRush, false);
    gf_AddHalfHeroLevel();
    gf_ProgressRound();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RushPointAToBTimer_Init () {
    gt_RushPointAToBTimer = TriggerCreate("gt_RushPointAToBTimer_Func");
    TriggerEnable(gt_RushPointAToBTimer, false);
    TriggerAddEventTimer(gt_RushPointAToBTimer, lib90F7C81D_gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Decay
//--------------------------------------------------------------------------------------------------
bool gt_Decay_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoEF63FCB9_g;
    int autoEF63FCB9_u;
    unit autoEF63FCB9_var;
    unitgroup autoA1150D40_g;
    int autoA1150D40_u;
    unit autoA1150D40_var;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }

        if (!(lib90F7C81D_gf_GetGameMode(8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_bossRush.lv_decayActive == true)) {
        autoEF63FCB9_g = UnitGroupAlliance(1, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoEF63FCB9_u = UnitGroupCount(autoEF63FCB9_g, c_unitCountAll);
        for (;; autoEF63FCB9_u -= 1) {
            autoEF63FCB9_var = UnitGroupUnitFromEnd(autoEF63FCB9_g, autoEF63FCB9_u);
            if (autoEF63FCB9_var == null) { break; }
            if ((libNtve_gf_UnitInRegion(autoEF63FCB9_var, gf_GetRushRegion()) == false)) {
                UnitBehaviorAdd(autoEF63FCB9_var, "DarkDecay", autoEF63FCB9_var, 1);
            }
            else {
                UnitBehaviorRemove(autoEF63FCB9_var, "DarkDecay", 1);
            }
        }
    }
    else {
        autoA1150D40_g = UnitGroupAlliance(1, c_unitAllianceAlly, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA1150D40_u = UnitGroupCount(autoA1150D40_g, c_unitCountAll);
        for (;; autoA1150D40_u -= 1) {
            autoA1150D40_var = UnitGroupUnitFromEnd(autoA1150D40_g, autoA1150D40_u);
            if (autoA1150D40_var == null) { break; }
            UnitBehaviorRemove(autoA1150D40_var, "DarkDecay", 1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Decay_Init () {
    gt_Decay = TriggerCreate("gt_Decay_Func");
    TriggerEnable(gt_Decay, false);
    TriggerAddEventTimePeriodic(gt_Decay, 1.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss Rush Setup
//--------------------------------------------------------------------------------------------------
bool gt_BossRushSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_locali;

    // Automatic Variable Declarations
    unitgroup auto577D3A7C_g;
    int auto577D3A7C_u;
    unit auto577D3A7C_var;
    unitgroup autoEEBC4110_g;
    int autoEEBC4110_u;
    unit autoEEBC4110_var;
    const int auto4BA22FD0_ae = 5;
    const int auto4BA22FD0_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }

        if (!(lib90F7C81D_gf_GetGameMode(8))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/479596A2"), gv_debug.lv_gameEvents);
    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_BossRushDebugCommands, true);
    GameSetMissionTimePaused(false);
    gf_UndeadGroupFilter(ge_UndeadUnitFilter_All, true);
    gf_StartInfestationLevel();
    lib90F7C81D_gf_SetSpawnLoopTimer(lib90F7C81D_ge_LoopType_BossRush, RandomFixed(7.0, 15.0));
    lib90F7C81D_gf_EnableNightVision();
    auto577D3A7C_g = UnitGroupFromId(1);
    auto577D3A7C_u = UnitGroupCount(auto577D3A7C_g, c_unitCountAll);
    for (;; auto577D3A7C_u -= 1) {
        auto577D3A7C_var = UnitGroupUnitFromEnd(auto577D3A7C_g, auto577D3A7C_u);
        if (auto577D3A7C_var == null) { break; }
        UnitRemove(auto577D3A7C_var);
    }
    autoEEBC4110_g = UnitGroupFromId(2);
    autoEEBC4110_u = UnitGroupCount(autoEEBC4110_g, c_unitCountAll);
    for (;; autoEEBC4110_u -= 1) {
        autoEEBC4110_var = UnitGroupUnitFromEnd(autoEEBC4110_g, autoEEBC4110_u);
        if (autoEEBC4110_var == null) { break; }
        UnitRemove(autoEEBC4110_var);
    }
    gv_bossRush.lv_spawnerRegion = RegionCircle(PointFromId(2067552197), 5.0);
    lv_locali = 1;
    for ( ; ( (auto4BA22FD0_ai >= 0 && lv_locali <= auto4BA22FD0_ae) || (auto4BA22FD0_ai < 0 && lv_locali >= auto4BA22FD0_ae) ) ; lv_locali += auto4BA22FD0_ai ) {
        UnitCreate(1, "BossRushSpawner", 0, 14, RegionGetCenter(RegionFromName(("Cave " + IntToString(lv_locali)))), 270.0);
        UnitGroupAdd(gv_bossRush.lv_spawnerUnitGroups, UnitLastCreated());
    }
    gv_bossRush.lv_bossTypes[0] = "Arachnathid";
    gv_bossRush.lv_bossTypes[1] = "Ares";
    gv_bossRush.lv_bossTypes[2] = "Baron";
    gv_bossRush.lv_bossTypes[3] = "Dilophosaur";
    gv_bossRush.lv_bossTypes[4] = "Gargantuan";
    gv_bossRush.lv_bossTypes[5] = "Gourmand";
    gv_bossRush.lv_bossTypes[6] = "Immussilus";
    gv_bossRush.lv_bossTypes[7] = "Metasis";
    gv_bossRush.lv_bossTypes[8] = "Minerva";
    gv_bossRush.lv_bossTypes[9] = "Raisuli";
    gv_bossRush.lv_bossTypes[10] = "Scorpio";
    gv_bossRush.lv_bossTypes[11] = "Widower";
    ObjectiveCreate(TextExpressionAssemble("Param/Expression/CFC166AD"), StringExternal("Param/Value/9BB3389B"), c_objectiveStateActive, true);
    lib90F7C81D_gv_mainObj = ObjectiveLastCreated();
    Wait(5.0, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/E8AE3A6C"));
    Wait(1.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/C109B5E6"));
    Wait(1.5, c_timeGame);
    lib90F7C81D_gf_MissionText(StringExternal("Param/Value/C8FE7FF6"));
    Wait(5.0, c_timeGame);
    TriggerEnable(gt_Decay, true);
    gf_ProgressRound();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BossRushSetup_Init () {
    gt_BossRushSetup = TriggerCreate("gt_BossRushSetup_Func");
    TriggerEnable(gt_BossRushSetup, false);
    lib90F7C81D_gf_StartGameMode(gt_BossRushSetup, "Boss Rush");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss Rush Debug Commands
//--------------------------------------------------------------------------------------------------
bool gt_BossRushDebugCommands_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_message;
    int lv_user;
    int lv_index;

    // Automatic Variable Declarations
    string autoDF24E3D1_val;

    // Variable Initialization
    lv_message = EventChatMessage(false);
    lv_user = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (8))) {
            return false;
        }

        if (!(lib90F7C81D_gf_DevHandles(PlayerHandle(EventPlayer())))) {
            return false;
        }

        if (!((StringEqual(StringWord(lv_message, 1), "gm", c_stringNoCase) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDF24E3D1_val = StringCase(StringWord(lv_message, 2), true);
    if (autoDF24E3D1_val == "BOSS") {
        UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaSubtitle, StringExternal("Param/Value/1D7A8FEE"));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/57D6BF2A"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BossRushDebugCommands_Init () {
    gt_BossRushDebugCommands = TriggerCreate("gt_BossRushDebugCommands_Func");
    TriggerEnable(gt_BossRushDebugCommands, false);
    TriggerAddEventChatMessage(gt_BossRushDebugCommands, c_playerAny, "gm", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: List Selected Index
//--------------------------------------------------------------------------------------------------
bool gt_ListSelectedIndex_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_selectionIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_sandbox.lv_itemListSelectedIndex)) {
        gv_sandbox.lv_list[1][lv_player] = false;
        gv_sandbox.lv_list[0][lv_player] = true;
        lv_selectionIndex = (DialogControlGetSelectedItem(gv_sandbox.lv_itemListSelectedIndex, lv_player) - 1);
        gf_UpdateCursor(lv_selectionIndex, lv_player, ge_ListType_Item);
    }
    else if ((EventDialogControl() == gv_sandbox.lv_unitListSelectedIndex)) {
        gv_sandbox.lv_list[0][lv_player] = false;
        gv_sandbox.lv_list[1][lv_player] = true;
        lv_selectionIndex = (DialogControlGetSelectedItem(gv_sandbox.lv_unitListSelectedIndex, lv_player) - 1);
        gv_sandbox.lv_unitSelectedIndex[lv_player] = lv_selectionIndex;
        if ((lv_selectionIndex > 0) && (lv_selectionIndex <= UserDataInstanceCount("MOSSetup"))) {
            gv_sandbox.lv_unitMOSSelectedIndex[lv_player] = lv_selectionIndex;
        }
        gf_UpdateCursor(lv_selectionIndex, lv_player, ge_ListType_Unit);
    }
    else if ((EventDialogControl() == gv_sandbox.lv_enemyListSelectedIndex)) {
        gv_sandbox.lv_list[0][lv_player] = false;
        gv_sandbox.lv_list[1][lv_player] = false;
        lv_selectionIndex = (DialogControlGetSelectedItem(gv_sandbox.lv_enemyListSelectedIndex, lv_player) - 1);
        gv_sandbox.lv_enemySelectedIndex[lv_player] = lv_selectionIndex;
    }
    else if ((EventDialogControl() == gv_sandbox.lv_enemyGroupListSelectedIndex)) {
        gv_sandbox.lv_list[0][lv_player] = false;
        gv_sandbox.lv_list[1][lv_player] = false;
        lv_selectionIndex = (DialogControlGetSelectedItem(gv_sandbox.lv_enemyGroupListSelectedIndex, lv_player) - 1);
        gv_sandbox.lv_enemyGroupSelectedIndex[lv_player] = lv_selectionIndex;
    }
    else if ((EventDialogControl() == gv_sandbox.lv_enemyGroupTargetPointButton)) {
        gv_sandbox.lv_list[0][lv_player] = false;
        gv_sandbox.lv_list[1][lv_player] = false;
        lv_selectionIndex = -1;
        gv_sandbox.lv_enemyGroupPointEnabled[lv_player] = true;
        gf_UpdateCursor(lv_selectionIndex, lv_player, ge_ListType_Target);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ListSelectedIndex_Init () {
    gt_ListSelectedIndex = TriggerCreate("gt_ListSelectedIndex_Func");
    TriggerEnable(gt_ListSelectedIndex, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Count
//--------------------------------------------------------------------------------------------------
bool gt_SpawnCount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_selectionIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_sandbox.lv_itemSliderCount)) {
        lv_selectionIndex = (FixedToInt(libNtve_gf_DialogItemValue(EventDialogControl(), lv_player)) + 1);
        gv_sandbox.lv_itemSpawnCount[lv_player] = lv_selectionIndex;
    }
    else if ((EventDialogControl() == gv_sandbox.lv_unitSliderCount)) {
        lv_selectionIndex = (FixedToInt(libNtve_gf_DialogItemValue(EventDialogControl(), lv_player)) + 1);
        gv_sandbox.lv_unitSpawnCount[lv_player] = lv_selectionIndex;
    }
    else if ((EventDialogControl() == gv_sandbox.lv_enemySliderCount)) {
        lv_selectionIndex = (FixedToInt(libNtve_gf_DialogItemValue(EventDialogControl(), lv_player)) + 1);
        gv_sandbox.lv_enemySpawnCount[lv_player] = lv_selectionIndex;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnCount_Init () {
    gt_SpawnCount = TriggerCreate("gt_SpawnCount_Func");
    TriggerEnable(gt_SpawnCount, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Place Unit
//--------------------------------------------------------------------------------------------------
bool gt_PlaceUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_worldPoint;

    // Automatic Variable Declarations
    int auto0CAB6E83_n;
    int auto0CAB6E83_i;
    int auto1F47D405_n;
    int auto1F47D405_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventPingedMinimap() == false))) {
            return false;
        }

        if (!((gv_sandbox.lv_cursor[EventPlayer()] != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_sandbox.lv_list[0][EventPlayer()] == true)) {
        lv_worldPoint = EventPingPoint();
        auto0CAB6E83_n = gv_sandbox.lv_itemSpawnCount[EventPlayer()];
        for (auto0CAB6E83_i = 1; auto0CAB6E83_i <= auto0CAB6E83_n; auto0CAB6E83_i += 1) {
            lib90F7C81D_gf_SpawnItemAtLocationNEW(gv_sandbox.lv_unit[EventPlayer()], 1, lv_worldPoint, 0, 1, 1);
        }
        if ((gv_sandbox.lv_clearCursor[EventPlayer()] == true)) {
            gf_DestroyCursorModel(EventPlayer());
        }
    }
    else if ((gv_sandbox.lv_list[1][EventPlayer()] == true)) {
        lv_worldPoint = EventPingPoint();
        if ((gv_sandbox.lv_unitSelectedIndex[EventPlayer()] <= UserDataInstanceCount("MOSSetup"))) {
            gf_DestroyCursorModel(EventPlayer());
            DialogControlSetVisible(gv_sandbox.lv_mOSButtons[gv_sandbox.lv_unitMOSSelectedIndex[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_sandbox.lv_mOSIcons[gv_sandbox.lv_unitMOSSelectedIndex[EventPlayer()]], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_sandbox.lv_mOSButtons[gv_sandbox.lv_previousSelectedMOS[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_sandbox.lv_mOSIcons[gv_sandbox.lv_previousSelectedMOS[EventPlayer()]], PlayerGroupSingle(EventPlayer()), true);
            gv_sandbox.lv_previousSelectedMOS[EventPlayer()] = gv_sandbox.lv_unitMOSSelectedIndex[EventPlayer()];
            DialogControlSetAnimationState(gv_sandbox.lv_unitListContainer, PlayerGroupSingle(EventPlayer()), "Enabled", "False");
            gf_RemoveUpgrades(EventPlayer(), lv_worldPoint);
        }
        else {
            auto1F47D405_n = gv_sandbox.lv_unitSpawnCount[EventPlayer()];
            for (auto1F47D405_i = 1; auto1F47D405_i <= auto1F47D405_n; auto1F47D405_i += 1) {
                UnitCreate(1, gv_sandbox.lv_unit[EventPlayer()], 0, gv_sandbox.lv_nPCSetting[EventPlayer()], lv_worldPoint, libNtve_gf_RandomAngle());
            }
            if ((gv_sandbox.lv_clearCursor[EventPlayer()] == true)) {
                gf_DestroyCursorModel(EventPlayer());
            }
        }
    }
    else if ((gv_sandbox.lv_enemyGroupPointEnabled[EventPlayer()] == true)) {
        lv_worldPoint = EventPingPoint();
        gv_sandbox.lv_enemyGroupSpawnPoint[EventPlayer()] = lv_worldPoint;
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, gv_sandbox.lv_enemyGroupSpawnPoint[EventPlayer()]);
        gf_DestroyCursorModel(EventPlayer());
    }
    lv_worldPoint = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlaceUnit_Init () {
    gt_PlaceUnit = TriggerCreate("gt_PlaceUnit_Func");
    TriggerEnable(gt_PlaceUnit, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Undead Type
//--------------------------------------------------------------------------------------------------
bool gt_SpawnUndeadType_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_sandbox.lv_enemySelectedIndex[EventPlayer()] != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SpawnEnemyType(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnUndeadType_Init () {
    gt_SpawnUndeadType = TriggerCreate("gt_SpawnUndeadType_Func");
    TriggerEnable(gt_SpawnUndeadType, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Enemy Group
//--------------------------------------------------------------------------------------------------
bool gt_SpawnEnemyGroup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_sandbox.lv_enemyGroupSelectedIndex[EventPlayer()] != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_sandbox.lv_enemyGroupSelectedIndex[EventPlayer()] == 1)) {
        gf_SpawnPMCSquad(EventPlayer());
    }
    else {
        gf_SpawnUndeadGroup(EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnEnemyGroup_Init () {
    gt_SpawnEnemyGroup = TriggerCreate("gt_SpawnEnemyGroup_Func");
    TriggerEnable(gt_SpawnEnemyGroup, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Destroy Cursor
//--------------------------------------------------------------------------------------------------
bool gt_DestroyCursor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_DestroyCursorModel(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DestroyCursor_Init () {
    gt_DestroyCursor = TriggerCreate("gt_DestroyCursor_Func");
    TriggerEnable(gt_DestroyCursor, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Abilities Researched
//--------------------------------------------------------------------------------------------------
bool gt_AbilitiesResearched_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == EventPlayer()))) {
            return false;
        }

        if (!((libNtve_gf_TriggeringProgressUpgrade() != "ClassicCommandCard"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_sandbox.lv_upgradeCount[EventPlayer()] += 1;
    DataTableSetString(true, (IntToString(EventPlayer()) + IntToString(gv_sandbox.lv_upgradeCount[EventPlayer()])), (libNtve_gf_TriggeringProgressUpgrade()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AbilitiesResearched_Init () {
    gt_AbilitiesResearched = TriggerCreate("gt_AbilitiesResearched_Func");
    TriggerEnable(gt_AbilitiesResearched, false);
    TriggerAddEventUnitResearchProgress(gt_AbilitiesResearched, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Option Settings
//--------------------------------------------------------------------------------------------------
bool gt_OptionSettings_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    string lv_ailmentInstance;

    // Automatic Variable Declarations
    playergroup auto02EBC2F0_g;
    int auto02EBC2F0_var;
    playergroup auto82D5BB44_g;
    int auto82D5BB44_var;
    unitgroup auto19ECF027_g;
    int auto19ECF027_u;
    unit auto19ECF027_var;
    string auto9E1224FD_userType;
    int auto9E1224FD_i;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_sandbox.lv_optionSettings[0])) {
        if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), lv_player) == false)) {
            VisRevealerCreate(lv_player, RegionEntireMap());
            gv_sandbox.lv_revealer[lv_player] = VisRevealerLastCreated();
        }
        else {
            VisRevealerDestroy(gv_sandbox.lv_revealer[lv_player]);
            gv_sandbox.lv_revealer[lv_player] = null;
        }
    }
    else if ((EventDialogControl() == gv_sandbox.lv_optionSettings[1])) {
        if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), lv_player) == true)) {
            libNtve_gf_MakeUnitInvulnerable(lib90F7C81D_gv_playerHeroes[lv_player], true);
        }
        else {
            libNtve_gf_MakeUnitInvulnerable(lib90F7C81D_gv_playerHeroes[lv_player], false);
        }
    }
    else if ((EventDialogControl() == gv_sandbox.lv_optionSettings[2])) {
        if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), lv_player) == true)) {
            gv_sandbox.lv_maxSUOn[lv_player] = true;
            gv_sandbox.lv_skillUpgradesCurrent[lv_player] = PlayerGetPropertyInt(lv_player, c_playerPropTerrazine);
            PlayerModifyPropertyInt(lv_player, c_playerPropTerrazine, c_playerPropOperAdd, 10);
            gv_sandbox.lv_skillUpgradesCurrent[lv_player] = PlayerGetPropertyInt(lv_player, c_playerPropTerrazine);
        }
        else {
            gv_sandbox.lv_maxSUOn[lv_player] = false;
            PlayerModifyPropertyInt(lv_player, c_playerPropTerrazine, c_playerPropOperSubtract, 10);
            gv_sandbox.lv_skillUpgradesCurrent[lv_player] = PlayerGetPropertyInt(lv_player, c_playerPropTerrazine);
        }
    }
    else if ((EventDialogControl() == gv_sandbox.lv_optionSettings[3])) {
        if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), lv_player) == true)) {
            gv_sandbox.lv_nPCSetting[lv_player] = 0;
        }
        else {
            gv_sandbox.lv_nPCSetting[lv_player] = lv_player;
        }
    }
    else if ((EventDialogControl() == gv_sandbox.lv_optionSettings[4]) && (UnitXPGetCurrentLevel(lib90F7C81D_gv_playerHeroes[lv_player], lib90F7C81D_gv_veterancyType[lv_player]) < 21)) {
        UnitXPAddXP(lib90F7C81D_gv_playerHeroes[lv_player], null, 2.0);
    }
    else if ((EventDialogControl() == gv_sandbox.lv_optionSettings[5])) {
        if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), lv_player) == false)) {
            gv_sandbox.lv_clearCursor[lv_player] = false;
        }
        else {
            gv_sandbox.lv_clearCursor[lv_player] = true;
        }
    }
    else if ((EventDialogControl() == gv_sandbox.lv_optionSettings[6]) && (gv_sandbox.lv_optionLock[0] == false)) {
        gv_sandbox.lv_optionLock[0] = true;
        if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), lv_player) == true)) {
            if ((PlayerGroupCount(lib90F7C81D_gv_players) > 1)) {
                auto82D5BB44_g = lib90F7C81D_gv_players;
                auto82D5BB44_var = -1;
                while (true) {
                    auto82D5BB44_var = PlayerGroupNextPlayer(auto82D5BB44_g, auto82D5BB44_var);
                    if (auto82D5BB44_var < 0) { break; }
                    if ((auto82D5BB44_var != lv_player)) {
                        libNtve_gf_SetDialogItemChecked(gv_sandbox.lv_optionSettings[6], true, PlayerGroupSingle(auto82D5BB44_var));
                    }
                }
            }
            gv_sandbox.lv_disableInfestationLevel = true;
            TechTreeUpgradeAddLevel(14, "DisableInfestationLevel", 1);
            if ((gv_mutateBuffCount > 0)) {
                gv_mutateBuffCount = 0;
                libNtve_gf_SetDialogItemText(lib90F7C81D_gv_mutationLabel, IntToText(gv_mutateBuffCount), PlayerGroupAll());
                libNtve_gf_SetUpgradeLevelForPlayer(14, "MutationUpgrade", gv_mutateBuffCount);
            }
        }
        else {
            gv_sandbox.lv_optionLock[0] = true;
            gv_sandbox.lv_disableInfestationLevel = false;
            TechTreeUpgradeAddLevel(14, "DisableInfestationLevel", -1);
            if ((PlayerGroupCount(lib90F7C81D_gv_players) > 1)) {
                auto02EBC2F0_g = lib90F7C81D_gv_players;
                auto02EBC2F0_var = -1;
                while (true) {
                    auto02EBC2F0_var = PlayerGroupNextPlayer(auto02EBC2F0_g, auto02EBC2F0_var);
                    if (auto02EBC2F0_var < 0) { break; }
                    if ((auto02EBC2F0_var != lv_player)) {
                        libNtve_gf_SetDialogItemChecked(gv_sandbox.lv_optionSettings[6], false, PlayerGroupSingle(auto02EBC2F0_var));
                    }
                }
            }
        }
        gv_sandbox.lv_optionLock[0] = false;
    }
    else if ((EventDialogControl() == gv_sandbox.lv_optionSettings[7]) && (gv_sandbox.lv_optionLock[1] == false)) {
        gv_sandbox.lv_optionLock[1] = true;
        if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), lv_player) == true)) {
            lib90F7C81D_gf_SetGlobalLightingChange(2.0, "UADNight");
        }
        else {
            lib90F7C81D_gf_SetGlobalLightingChange(2.0, "UADDawn");
        }
        gv_sandbox.lv_optionLock[1] = false;
    }
    else if ((EventDialogControl() == gv_sandbox.lv_optionSettings[8])) {
        lib90F7C81D_gv_weather.lv_weatherSwitch = true;
        if ((DialogControlGetSelectedItem(gv_sandbox.lv_optionSettings[8], lv_player) == 1)) {
            lib90F7C81D_gf_DebugWeatherEvent("Clear");
        }
        else if ((DialogControlGetSelectedItem(gv_sandbox.lv_optionSettings[8], lv_player) == 2)) {
            lib90F7C81D_gf_DebugWeatherEvent("Fog");
        }
        else if ((DialogControlGetSelectedItem(gv_sandbox.lv_optionSettings[8], lv_player) == 3)) {
            lib90F7C81D_gf_DebugWeatherEvent("RainStorm");
        }
        else if ((DialogControlGetSelectedItem(gv_sandbox.lv_optionSettings[8], lv_player) == 4)) {
            lib90F7C81D_gf_DebugWeatherEvent("Snow");
        }
        else if ((DialogControlGetSelectedItem(gv_sandbox.lv_optionSettings[8], lv_player) == 5)) {
            lib90F7C81D_gf_DebugWeatherEvent("Cloudy");
        }
        else if ((DialogControlGetSelectedItem(gv_sandbox.lv_optionSettings[8], lv_player) == 6)) {
            lib90F7C81D_gf_DebugWeatherEvent("IntenseSunlight");
        }
        else if ((DialogControlGetSelectedItem(gv_sandbox.lv_optionSettings[8], lv_player) == 7)) {
            lib90F7C81D_gf_DebugWeatherEvent("BloodMoon");
        }
    }
    else if ((EventDialogControl() == gv_sandbox.lv_optionSettings[9])) {
        if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), lv_player) == true)) {
            UnitBehaviorAdd(lib90F7C81D_gv_playerHeroes[lv_player], "UB", lib90F7C81D_gv_playerHeroes[lv_player], 1);
        }
        else {
            UnitBehaviorRemove(lib90F7C81D_gv_playerHeroes[lv_player], "UB", 1);
        }
    }
    else if ((EventDialogControl() == gv_sandbox.lv_optionSettings[10])) {
        auto19ECF027_g = UnitGroupSelected(lv_player);
        auto19ECF027_u = UnitGroupCount(auto19ECF027_g, c_unitCountAll);
        for (;; auto19ECF027_u -= 1) {
            auto19ECF027_var = UnitGroupUnitFromEnd(auto19ECF027_g, auto19ECF027_u);
            if (auto19ECF027_var == null) { break; }
            ResetAllAbilityCooldownsForUnit(auto19ECF027_var);
            UnitSetPropertyFixed(auto19ECF027_var, c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(auto19ECF027_var, c_unitPropEnergyPercent, 100.0);
            if ((UnitGetType(auto19ECF027_var) == "Cyborg")) {
                UnitSetPropertyFixed(auto19ECF027_var, c_unitPropShieldsPercent, 100.0);
            }
            auto9E1224FD_userType = "Ailments";
            auto9E1224FD_i = 1;
            for ( ; auto9E1224FD_i <= UserDataInstanceCount(auto9E1224FD_userType) ; auto9E1224FD_i += 1 ) {
                lv_ailmentInstance = UserDataInstance(auto9E1224FD_userType, auto9E1224FD_i);
                if ((UnitHasBehavior2(auto19ECF027_var, UserDataGetGameLink("Ailments", lv_ailmentInstance, "Ailment Behavior", 1)) == true)) {
                    UnitBehaviorRemove(auto19ECF027_var, UserDataGetGameLink("Ailments", lv_ailmentInstance, "Ailment Behavior", 1), 1);
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OptionSettings_Init () {
    gt_OptionSettings = TriggerCreate("gt_OptionSettings_Func");
    TriggerEnable(gt_OptionSettings, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Revive
//--------------------------------------------------------------------------------------------------
bool gt_AutoRevive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto787097E9_n = 30;
    int auto787097E9_i;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_playersHeroisDead[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto787097E9_i = 1; auto787097E9_i <= auto787097E9_n; auto787097E9_i += 1) {
        if ((lib90F7C81D_gv_playersHeroisDead[EventPlayer()] == false)) {
            break;
        }
        else {
            PlayerCreateEffectUnit(EventPlayer(), "ReviveDummy", lib90F7C81D_gv_deadHeroIndicator[EventPlayer()]);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutoRevive_Init () {
    gt_AutoRevive = TriggerCreate("gt_AutoRevive_Func");
    TriggerEnable(gt_AutoRevive, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sandbox Setup
//--------------------------------------------------------------------------------------------------
bool gt_SandboxSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_indexInner;
    string lv_instance;
    string lv_gameLink;

    // Automatic Variable Declarations
    playergroup auto7DD03745_g;
    int auto7DD03745_var;
    const int auto1DF31647_ae = 3;
    const int auto1DF31647_ai = 1;
    string autoA73F2B55_userType;
    int autoA73F2B55_i;
    string autoAA098188_userType;
    int autoAA098188_i;
    string auto23A551B5_userType;
    int auto23A551B5_i;
    string autoA03063C9_userType;
    int autoA03063C9_i;
    int auto45C37992_e;
    int auto45C37992_i;
    playergroup auto70412051_g;
    int auto70412051_var;

    // Variable Initialization
    lv_indexInner = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(lib90F7C81D_gt_GraphUpdate, false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/436343C8"), gv_debug.lv_gameEvents);
    PingSetPlayerPingsShown(PlayerGroupAll(), false);
    lib90F7C81D_gf_TurnWeaponsItemsOnOff("Weapons&Items_1", true);
    lib90F7C81D_gf_ModifyWeaponsItemsLoop("Weapons&Items_1", 270.0, c_playerPropOperSetTo);
    gf_PolicePostInit();
    if ((GameIsOnline() == true)) {
        auto7DD03745_g = lib90F7C81D_gv_players;
        auto7DD03745_var = -1;
        while (true) {
            auto7DD03745_var = PlayerGroupNextPlayer(auto7DD03745_g, auto7DD03745_var);
            if (auto7DD03745_var < 0) { break; }
            if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[28][auto7DD03745_var] == false)) {
                lib90F7C81D_gv_bankData.lv_achievementsUnlocked[28][auto7DD03745_var] = true;
                lib90F7C81D_gf_FlashAchievementBadge("Free Time", auto7DD03745_var);
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[4][0], PlayerGroupSingle(auto7DD03745_var), "AchievementBadge", "Earned");
                PlayerBankSave(auto7DD03745_var);
            }
        }
        gf_BankSavingGlobal(false);
        TriggerEnable(lib90F7C81D_gt_GameOver, false);
        lib90F7C81D_gf_TurnOffAchievements();
    }
    DialogControlSetAnimationState(lib90F7C81D_gv_voteKick.lv_vKB, PlayerGroupAll(), "Lock", "Menu");
    GameSetMissionTimePaused(false);
    gf_StartInfestationLevel();
    lib90F7C81D_gf_EnableNightVision();
    lv_index = 0;
    for ( ; ( (auto1DF31647_ai >= 0 && lv_index <= auto1DF31647_ae) || (auto1DF31647_ai < 0 && lv_index >= auto1DF31647_ae) ) ; lv_index += auto1DF31647_ai ) {
        DialogControlHookupStandard(c_triggerControlTypeButton, ("UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/TabButtonsContainer/Button0" + IntToString(lv_index)));
        gv_sandbox.lv_sandBoxPanelButtons[lv_index] = DialogControlLastCreated();
        TriggerAddEventDialogControl(gt_DestroyCursor, c_playerAny, DialogControlLastCreated(), c_triggerControlEventTypeClick);
    }
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/CloseButton");
    gv_sandbox.lv_closeButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_DestroyCursor, c_playerAny, gv_sandbox.lv_closeButton, c_triggerControlEventTypeClick);
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/CursorButton");
    gv_sandbox.lv_clearCursorButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_DestroyCursor, c_playerAny, gv_sandbox.lv_clearCursorButton, c_triggerControlEventTypeClick);
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/SpawnButton");
    gv_sandbox.lv_spawnButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_SpawnUndeadType, c_playerAny, gv_sandbox.lv_spawnButton, c_triggerControlEventTypeClick);
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/SpawnGroupButton");
    gv_sandbox.lv_spawnGroupButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_SpawnEnemyGroup, c_playerAny, gv_sandbox.lv_spawnGroupButton, c_triggerControlEventTypeClick);
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/OptionsButton");
    gv_sandbox.lv_optionsButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_DestroyCursor, c_playerAny, gv_sandbox.lv_optionsButton, c_triggerControlEventTypeClick);
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TriggerContainer/AutoReviveButton");
    gv_sandbox.lv_autoReviveButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_AutoRevive, c_playerAny, gv_sandbox.lv_autoReviveButton, c_triggerControlEventTypeClick);
    DialogControlHookupStandard(c_triggerControlTypeButton, "$SBEnemyListButton");
    gv_sandbox.lv_enemyListButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_DestroyCursor, c_playerAny, gv_sandbox.lv_enemyListButton, c_triggerControlEventTypeClick);
    DialogControlHookupStandard(c_triggerControlTypeButton, "$SBEnemyTargetButton");
    gv_sandbox.lv_enemyGroupTargetPointButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_ListSelectedIndex, c_playerAny, gv_sandbox.lv_enemyGroupTargetPointButton, c_triggerControlEventTypeClick);
    DialogControlHookupStandard(c_triggerControlTypeSlider, "UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/Panel00/Count");
    gv_sandbox.lv_itemSliderCount = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_SpawnCount, c_playerAny, gv_sandbox.lv_itemListSelectedIndex, c_triggerControlEventTypeValueChanged);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/Panel00/List");
    gv_sandbox.lv_itemListContainer = DialogControlLastCreated();
    DialogControlHookup(gv_sandbox.lv_itemListContainer, c_triggerControlTypePulldown, "ReadablePulldown");
    gv_sandbox.lv_itemListSelectedIndex = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_ListSelectedIndex, c_playerAny, gv_sandbox.lv_itemListSelectedIndex, c_triggerControlEventTypeSelectionChanged);
    lv_index = 1;
    autoA73F2B55_userType = "SandBoxItemList";
    autoA73F2B55_i = 1;
    for ( ; autoA73F2B55_i <= UserDataInstanceCount(autoA73F2B55_userType) ; autoA73F2B55_i += 1 ) {
        lv_instance = UserDataInstance(autoA73F2B55_userType, autoA73F2B55_i);
        lv_gameLink = UserDataGetGameLink("SandBoxItemList", lv_instance, "Item", 1);
        DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/Panel00/List/ScrollableList/ContainerFrame/ImageFrame" + IntToString((lv_index - 1)) + "/Icon"));
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), (CatalogFieldValueGet(c_gameCatalogUnit, lv_gameLink, "EquipmentArray[" + IntToString(0) + "].Icon", c_playerAny)), PlayerGroupAll());
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/Panel00/List/ScrollableList/ContainerFrame/Button" + IntToString((lv_index - 1)) + "/Label"));
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal((lv_instance)), PlayerGroupAll());
        DialogControlAddItem(gv_sandbox.lv_itemListSelectedIndex, PlayerGroupAll(), StringToText(IntToString(lv_index)));
        lv_index += 1;
    }
    lv_index = 1;
    DialogControlHookupStandard(c_triggerControlTypeSlider, "UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/Panel01/Count");
    gv_sandbox.lv_unitSliderCount = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_SpawnCount, c_playerAny, gv_sandbox.lv_unitListSelectedIndex, c_triggerControlEventTypeValueChanged);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/Panel01/List");
    gv_sandbox.lv_unitListContainer = DialogControlLastCreated();
    DialogControlHookup(gv_sandbox.lv_unitListContainer, c_triggerControlTypePulldown, "ReadablePulldown");
    gv_sandbox.lv_unitListSelectedIndex = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_ListSelectedIndex, c_playerAny, gv_sandbox.lv_unitListSelectedIndex, c_triggerControlEventTypeSelectionChanged);
    autoAA098188_userType = "SandBoxUnitList";
    autoAA098188_i = 1;
    for ( ; autoAA098188_i <= UserDataInstanceCount(autoAA098188_userType) ; autoAA098188_i += 1 ) {
        lv_instance = UserDataInstance(autoAA098188_userType, autoAA098188_i);
        lv_gameLink = UserDataGetGameLink("SandBoxUnitList", lv_instance, "MOS Unit", 1);
        DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/Panel01/List/ScrollableList/ContainerFrame/ImageFrame" + IntToString((lv_index - 1)) + "/Icon"));
        gv_sandbox.lv_mOSIcons[lv_index] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImage(gv_sandbox.lv_mOSIcons[lv_index], UserDataGetImagePath("SandBoxUnitList", lv_instance, "MOS Image", 1), PlayerGroupAll());
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/Panel01/List/ScrollableList/ContainerFrame/Button" + IntToString((lv_index - 1)) + "/Label"));
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal((lv_instance)), PlayerGroupAll());
        DialogControlAddItem(gv_sandbox.lv_unitListSelectedIndex, PlayerGroupAll(), StringToText(IntToString(lv_index)));
        lv_index += 1;
    }
    lv_index = 1;
    DialogControlHookupStandard(c_triggerControlTypeSlider, "UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/Panel02/Count");
    gv_sandbox.lv_enemySliderCount = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_SpawnCount, c_playerAny, gv_sandbox.lv_itemListSelectedIndex, c_triggerControlEventTypeValueChanged);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/Panel02/List");
    gv_sandbox.lv_enemyListContainer = DialogControlLastCreated();
    DialogControlHookup(gv_sandbox.lv_enemyListContainer, c_triggerControlTypePulldown, "ReadablePulldown");
    gv_sandbox.lv_enemyListSelectedIndex = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_ListSelectedIndex, c_playerAny, gv_sandbox.lv_enemyListSelectedIndex, c_triggerControlEventTypeSelectionChanged);
    auto23A551B5_userType = "SandBoxEnemyList";
    auto23A551B5_i = 1;
    for ( ; auto23A551B5_i <= UserDataInstanceCount(auto23A551B5_userType) ; auto23A551B5_i += 1 ) {
        lv_instance = UserDataInstance(auto23A551B5_userType, auto23A551B5_i);
        lv_gameLink = UserDataGetGameLink("SandBoxEnemyList", lv_instance, "Unit", 1);
        DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/Panel02/List/ScrollableList/ContainerFrame/ImageFrame" + IntToString((lv_index - 1)) + "/Icon"));
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), UserDataGetImagePath("SandBoxEnemyList", lv_instance, "Icon", 1), PlayerGroupAll());
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/Panel02/List/ScrollableList/ContainerFrame/Button" + IntToString((lv_index - 1)) + "/Label"));
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal((lv_instance)), PlayerGroupAll());
        DialogControlAddItem(gv_sandbox.lv_enemyListSelectedIndex, PlayerGroupAll(), StringToText(IntToString(lv_index)));
        lv_index += 1;
    }
    lv_index = 1;
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/Panel02/SpawnGroupList");
    gv_sandbox.lv_enemyGroupListContainer = DialogControlLastCreated();
    DialogControlHookup(gv_sandbox.lv_enemyGroupListContainer, c_triggerControlTypePulldown, "ReadablePulldown");
    gv_sandbox.lv_enemyGroupListSelectedIndex = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_ListSelectedIndex, c_playerAny, gv_sandbox.lv_enemyGroupListSelectedIndex, c_triggerControlEventTypeSelectionChanged);
    lib90F7C81D_gv_pMC.lv_maxUnitType += 2;
    UserDataSetInt("PMCUnits", "All", "Enabled", 6, 1);
    UserDataSetInt("PMCUnits", "All", "Enabled", 7, 1);
    PlayerAddResponse(15, "PMCDeath");
    DialogControlHookupStandard(c_triggerControlTypeButton, "$SBMKills");
    DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "Campaign", "True");
    DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/Panel02/SpawnGroupList/ScrollableList/ContainerFrame/ImageFrame" + IntToString(0) + "/Icon"));
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Icon Pack\\btn-custom-terran-marine-merc.dds", PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypeButton, ("UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/Panel02/SpawnGroupList/ScrollableList/ContainerFrame/Button" + IntToString(0)));
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/2B7A3D53"), PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/Panel02/SpawnGroupList/ScrollableList/ContainerFrame/Button" + IntToString(0) + "/Label"));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/704EA9D3"), PlayerGroupAll());
    DialogControlAddItem(gv_sandbox.lv_enemyGroupListSelectedIndex, PlayerGroupAll(), StringToText(IntToString(lv_indexInner)));
    autoA03063C9_userType = "UndeadUnits";
    autoA03063C9_i = 1;
    for ( ; autoA03063C9_i <= UserDataInstanceCount(autoA03063C9_userType) ; autoA03063C9_i += 1 ) {
        lv_instance = UserDataInstance(autoA03063C9_userType, autoA03063C9_i);
        if ((lv_index >= 11)) {
            DialogControlHookupStandard(c_triggerControlTypeImage, ("UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/Panel02/SpawnGroupList/ScrollableList/ContainerFrame/ImageFrame" + IntToString((lv_index - 10)) + "/Icon"));
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\btn-upgrade-mengsk-veterancy.dds", PlayerGroupAll());
            DialogControlHookupStandard(c_triggerControlTypeButton, ("UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/Panel02/SpawnGroupList/ScrollableList/ContainerFrame/Button" + IntToString((lv_index - 10))));
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), UserDataGetText("UndeadUnits", lv_instance, "Id", 1), PlayerGroupAll());
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/Panel02/SpawnGroupList/ScrollableList/ContainerFrame/Button" + IntToString((lv_index - 10)) + "/Label"));
            libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal((lv_instance)), PlayerGroupAll());
            DialogControlAddItem(gv_sandbox.lv_enemyGroupListSelectedIndex, PlayerGroupAll(), StringToText(IntToString(lv_indexInner)));
            lv_indexInner += 1;
        }
        lv_index += 1;
    }
    DialogControlAddItem(gv_sandbox.lv_enemyGroupListSelectedIndex, PlayerGroupAll(), StringToText(IntToString(lv_indexInner)));
    lv_index = 1;
    auto45C37992_e = UserDataInstanceCount("MOSSetup");
    for (auto45C37992_i = 1; auto45C37992_i <= auto45C37992_e; auto45C37992_i += 1) {
        lv_instance = UserDataInstance("MOSSetup", auto45C37992_i);
        DialogControlHookupStandard(c_triggerControlTypeButton, ("UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/Panel01/List/ScrollableList/ContainerFrame/Button" + IntToString((lv_index - 1))));
        gv_sandbox.lv_mOSButtons[lv_index] = DialogControlLastCreated();
        lv_index += 1;
    }
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel/PanelsContainer/Panel03");
    gv_sandbox.lv_optionsPanel = DialogControlLastCreated();
    DialogControlHookup(gv_sandbox.lv_optionsPanel, c_triggerControlTypeCheckBox, "Option0");
    gv_sandbox.lv_optionSettings[0] = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_OptionSettings, c_playerAny, gv_sandbox.lv_optionSettings[0], c_triggerControlEventTypeChecked);
    DialogControlHookup(gv_sandbox.lv_optionsPanel, c_triggerControlTypeCheckBox, "Option1");
    gv_sandbox.lv_optionSettings[1] = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_OptionSettings, c_playerAny, gv_sandbox.lv_optionSettings[1], c_triggerControlEventTypeChecked);
    DialogControlHookup(gv_sandbox.lv_optionsPanel, c_triggerControlTypeCheckBox, "Option2");
    gv_sandbox.lv_optionSettings[2] = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_OptionSettings, c_playerAny, gv_sandbox.lv_optionSettings[2], c_triggerControlEventTypeChecked);
    DialogControlHookup(gv_sandbox.lv_optionsPanel, c_triggerControlTypeCheckBox, "Option3");
    gv_sandbox.lv_optionSettings[3] = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_OptionSettings, c_playerAny, gv_sandbox.lv_optionSettings[3], c_triggerControlEventTypeChecked);
    DialogControlHookup(gv_sandbox.lv_optionsPanel, c_triggerControlTypeButton, "LevelButton");
    gv_sandbox.lv_optionSettings[4] = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_OptionSettings, c_playerAny, gv_sandbox.lv_optionSettings[4], c_triggerControlEventTypeClick);
    DialogControlHookup(gv_sandbox.lv_optionsPanel, c_triggerControlTypeCheckBox, "Option4");
    gv_sandbox.lv_optionSettings[5] = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_OptionSettings, c_playerAny, gv_sandbox.lv_optionSettings[5], c_triggerControlEventTypeChecked);
    DialogControlHookup(gv_sandbox.lv_optionsPanel, c_triggerControlTypeCheckBox, "Option5");
    gv_sandbox.lv_optionSettings[6] = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_OptionSettings, c_playerAny, gv_sandbox.lv_optionSettings[6], c_triggerControlEventTypeChecked);
    DialogControlHookup(gv_sandbox.lv_optionsPanel, c_triggerControlTypeCheckBox, "Option6");
    gv_sandbox.lv_optionSettings[7] = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_OptionSettings, c_playerAny, gv_sandbox.lv_optionSettings[7], c_triggerControlEventTypeChecked);
    DialogControlHookup(gv_sandbox.lv_optionsPanel, c_triggerControlTypePulldown, "WeatherPulldown");
    gv_sandbox.lv_optionSettings[8] = DialogControlLastCreated();
    DialogControlAddItem(gv_sandbox.lv_optionSettings[8], PlayerGroupAll(), StringExternal("Param/Value/AC63806E"));
    DialogControlAddItem(gv_sandbox.lv_optionSettings[8], PlayerGroupAll(), StringExternal("Param/Value/BF45D575"));
    DialogControlAddItem(gv_sandbox.lv_optionSettings[8], PlayerGroupAll(), StringExternal("Param/Value/FC5E4DBB"));
    DialogControlAddItem(gv_sandbox.lv_optionSettings[8], PlayerGroupAll(), StringExternal("Param/Value/E1B060C8"));
    DialogControlAddItem(gv_sandbox.lv_optionSettings[8], PlayerGroupAll(), StringExternal("Param/Value/3B82416C"));
    DialogControlAddItem(gv_sandbox.lv_optionSettings[8], PlayerGroupAll(), StringExternal("Param/Value/A9FB7113"));
    DialogControlAddItem(gv_sandbox.lv_optionSettings[8], PlayerGroupAll(), StringExternal("Param/Value/E730E4BF"));
    DialogControlSelectItem(gv_sandbox.lv_optionSettings[8], PlayerGroupAll(), 1);
    TriggerAddEventDialogControl(gt_OptionSettings, c_playerAny, gv_sandbox.lv_optionSettings[8], c_triggerControlEventTypeSelectionChanged);
    auto70412051_g = lib90F7C81D_gv_players;
    auto70412051_var = -1;
    while (true) {
        auto70412051_var = PlayerGroupNextPlayer(auto70412051_g, auto70412051_var);
        if (auto70412051_var < 0) { break; }
        DialogControlSetVisible(gv_sandbox.lv_mOSButtons[gv_menu.lv_mOSSelected[auto70412051_var]], PlayerGroupSingle(auto70412051_var), false);
        DialogControlSetVisible(gv_sandbox.lv_mOSIcons[gv_menu.lv_mOSSelected[auto70412051_var]], PlayerGroupSingle(auto70412051_var), false);
        gv_sandbox.lv_previousSelectedMOS[auto70412051_var] = gv_menu.lv_mOSSelected[auto70412051_var];
        gv_sandbox.lv_nPCSetting[auto70412051_var] = auto70412051_var;
        TechTreeUpgradeAddLevel(auto70412051_var, "Sandbox", 1);
    }
    DialogControlHookup(gv_sandbox.lv_optionsPanel, c_triggerControlTypeCheckBox, "Option7");
    gv_sandbox.lv_optionSettings[9] = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_OptionSettings, c_playerAny, gv_sandbox.lv_optionSettings[9], c_triggerControlEventTypeChecked);
    TriggerAddEventPing(gt_PlaceUnit, c_playerAny);
    DialogControlHookup(gv_sandbox.lv_optionsPanel, c_triggerControlTypeButton, "RecoverButton");
    gv_sandbox.lv_optionSettings[10] = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_OptionSettings, c_playerAny, gv_sandbox.lv_optionSettings[10], c_triggerControlEventTypeClick);
    TriggerEnable(gt_ListSelectedIndex, true);
    TriggerEnable(gt_PlaceUnit, true);
    TriggerEnable(gt_SpawnCount, true);
    TriggerEnable(gt_DestroyCursor, true);
    TriggerEnable(gt_SpawnUndeadType, true);
    TriggerEnable(gt_SpawnEnemyGroup, true);
    TriggerEnable(gt_AutoRevive, true);
    TriggerEnable(gt_AbilitiesResearched, true);
    TriggerEnable(gt_OptionSettings, true);
    Wait(1.5, c_timeGame);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TriggerContainer/SandBoxPanel");
    DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupAll(), "Display");
    lv_gameLink = null;
    lv_instance = null;
    DialogControlSelectItem(gv_sandbox.lv_enemyListSelectedIndex, PlayerGroupAll(), 2);
    DialogControlSelectItem(gv_sandbox.lv_enemyGroupListSelectedIndex, PlayerGroupAll(), 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SandboxSetup_Init () {
    gt_SandboxSetup = TriggerCreate("gt_SandboxSetup_Func");
    TriggerEnable(gt_SandboxSetup, false);
    lib90F7C81D_gf_StartGameMode(gt_SandboxSetup, "Sandbox");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deathmatch Setup
//--------------------------------------------------------------------------------------------------
bool gt_DeathmatchSetup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_indexInner;
    string lv_instance;
    string lv_gameLink;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_indexInner = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerDebugOutput(gv_debug.lv_gameEventsType, StringExternal("Param/Value/0C080DFA"), gv_debug.lv_gameEvents);
    PingSetPlayerPingsShown(PlayerGroupAll(), false);
    lib90F7C81D_gf_TurnWeaponsItemsOnOff("Weapons&Items_1", true);
    lib90F7C81D_gf_ModifyWeaponsItemsLoop("Weapons&Items_1", 270.0, c_playerPropOperSetTo);
    gf_PolicePostInit();
    if ((GameIsOnline() == true)) {
        gf_BankSavingGlobal(false);
        TriggerEnable(lib90F7C81D_gt_GameOver, false);
        lib90F7C81D_gf_TurnOffAchievements();
    }
    DialogControlSetAnimationState(lib90F7C81D_gv_voteKick.lv_vKB, PlayerGroupAll(), "Lock", "Menu");
    GameSetMissionTimePaused(false);
    gf_StartInfestationLevel();
    lib90F7C81D_gf_EnableNightVision();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeathmatchSetup_Init () {
    gt_DeathmatchSetup = TriggerCreate("gt_DeathmatchSetup_Func");
    TriggerEnable(gt_DeathmatchSetup, false);
    lib90F7C81D_gf_StartGameMode(gt_DeathmatchSetup, "Deathmatch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize
//--------------------------------------------------------------------------------------------------
bool gt_Initialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;
    int lv_x;
    int lv_int;
    int lv_z;

    // Automatic Variable Declarations
    const int auto254E724C_ae = 12;
    const int auto254E724C_ai = 1;
    const int autoA16771BC_ae = 12;
    const int autoA16771BC_ai = 1;
    const int autoE9757136_ae = 13;
    const int autoE9757136_ai = 1;
    playergroup auto30319CCA_g;
    int auto30319CCA_var;
    int auto263A28CF_ae;
    const int auto263A28CF_ai = 1;
    playergroup autoD721257E_g;
    playergroup auto58447F47_g;
    const int autoB646FADF_ae = 12;
    const int autoB646FADF_ai = 1;
    const int auto747DF903_ae = 12;
    const int auto747DF903_ai = 1;

    // Variable Initialization
    lv_x = 1;
    lv_int = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_a = 1;
    for ( ; ( (auto254E724C_ai >= 0 && lv_a <= auto254E724C_ae) || (auto254E724C_ai < 0 && lv_a >= auto254E724C_ae) ) ; lv_a += auto254E724C_ai ) {
        if ((PlayerStatus(lv_a) != c_playerStatusActive)) {
            continue;
        }
        BankLoad("UAD", lv_a);
        lib90F7C81D_gv_bankData.lv_banks[lv_a] = BankLastCreated();
        BankLoad("UAD3", lv_a);
        gv_stR[lv_a] = BankLastCreated();
        BankOptionSet(gv_stR[lv_a], c_bankOptionSignature, true);
    }
    GameSetSpeedValue(c_gameSpeedNormal);
    GameSetSpeedLocked(true);
    GameSetMissionTimePaused(true);
    GameSetPauseable(false);
    lib90F7C81D_gf_SetGlobalLightingChange(0.0, "UADDawn");
    libE6C8C21C_gf_DebugStatus(libE6C8C21C_ge_DebugOnOff_DebugOn);
    gf_SetupDebug();
    gf_XPEvents();
    UnitEventSetNullVariableInvalid(true);
    UISetResourceTradingAllowed(c_resourceTypeMinerals, false);
    UISetResourceTradingAllowed(c_resourceTypeVespene, false);
    UISetResourceTradingAllowed(c_resourceTypeCustom, false);
    UISetResourceTradingAllowed(c_resourceTypeTerrazine, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAchievementMenuButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogSaveButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogLoadButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Prot", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Terr", false);
    HelpPanelShowTechTreeRace(PlayerGroupAll(), "Zerg", false);
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCommandPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMenuBar, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, false);
    GameCheatAllow(c_gameCheatAny, false);
    PlayerSetColorIndex(13, 13, true);
    PlayerSetColorIndex(14, 14, true);
    PlayerSetColorIndex(15, 14, true);
    VisRevealArea(14, RegionPlayableMap(), 0.0, false);
    DialogControlHookupStandard(c_triggerControlTypeLabel, "$PlayerID");
    gv_menu.lv_playerID = DialogControlLastCreated();
    lv_int = 1;
    for ( ; ( (autoA16771BC_ai >= 0 && lv_int <= autoA16771BC_ae) || (autoA16771BC_ai < 0 && lv_int >= autoA16771BC_ae) ) ; lv_int += autoA16771BC_ai ) {
        MeleeSetOption(lv_int, c_meleeOptionSplitResources, false);
        libNtve_gf_SetAlliance(lv_int, 14, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(lv_int, 15, libNtve_ge_AllianceSetting_Enemy);
        libNtve_gf_SetAlliance(lv_int, 13, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        libNtve_gf_SetAlliance(lv_int, 0, libNtve_ge_AllianceSetting_Ally);
        PlayerSetAlliance(0, c_allianceIdVision, lv_int, false);
        if ((PlayerStatus(lv_int) == c_playerStatusActive) && (PlayerType(lv_int) != c_playerTypeNone)) {
            PlayerGroupAdd(lib90F7C81D_gv_players, lv_int);
            PlayerGroupAdd(lib90F7C81D_gv_scoreScreenPlayers, lv_int);
            gv_modeSelection.lv_votesRemaining += 1;
            PlayerModifyPropertyInt(lv_int, c_playerPropCustom, c_playerPropOperAdd, 1);
            PlayerOptionOverride(lv_int, "simplecommandcard", "0");
            PlayerOptionOverride(lv_int, "selectuncontrolable", "1");
            PlayerOptionOverride(lv_int, "displayunitstatus", "All");
            PlayerOptionOverride(lv_int, "showcurrentordermodel", "0");
            libNtve_gf_SetDialogItemText(gv_menu.lv_playerID, IntToText(lv_int), PlayerGroupSingle(lv_int));
            CameraSave(lv_int);
            CameraPan(lv_int, RegionGetCenter(RegionFromId(13)), 0.0, -1, 10.0, false);
            if (lib90F7C81D_gf_DevHandles(PlayerHandle(lv_int))) {
                PlayerGroupAdd(gv_devGroup, lv_int);
            }
        }
        else {
            continue;
        }
        lv_z = 1;
        lv_z = 0;
        for ( ; ( (autoE9757136_ai >= 0 && lv_z <= autoE9757136_ae) || (autoE9757136_ai < 0 && lv_z >= autoE9757136_ae) ) ; lv_z += autoE9757136_ai ) {
            PlayerSetAlliance(lv_int, c_allianceIdSeekHelp, lv_z, false);
            PlayerSetAlliance(lv_int, c_allianceIdGiveHelp, lv_z, false);
            PlayerSetAlliance(lv_z, c_allianceIdTrade, lv_int, false);
            PlayerSetAlliance(lv_int, c_allianceIdTrade, lv_z, false);
        }
    }
    libNtve_gf_SetAlliance(14, 13, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(14, 0, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(15, 13, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(15, 0, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(14, 15, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(13, 0, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetPlayerGroupAlliance(lib90F7C81D_gv_players, libNtve_ge_AllianceSetting_Ally);
    auto30319CCA_g = PlayerGroupAll();
    auto30319CCA_var = -1;
    while (true) {
        auto30319CCA_var = PlayerGroupNextPlayer(auto30319CCA_g, auto30319CCA_var);
        if (auto30319CCA_var < 0) { break; }
        PlayerModifyPropertyInt(auto30319CCA_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, 40);
        PlayerModifyPropertyInt(auto30319CCA_var, c_playerPropHandicap, c_playerPropOperSetTo, 100);
    }
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneHero/WeaponIcon");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "EquipmentIconBorder");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glues_achievement_fanfare_achievementcontainer_terr.dds", PlayerGroupAll());
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ConsoleUIContainer/InfoPanel/InfoPaneHero/ArmorIcon");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "EquipmentIconBorder");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_battlenet_glues_achievement_fanfare_achievementcontainer_terr.dds", PlayerGroupAll());
    lib90F7C81D_gf_InitializeUIItems();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/CharSelectionTabs");
    gv_menu.lv_charScreen = DialogControlLastCreated();
    DialogControlHookup(gv_menu.lv_charScreen, c_triggerControlTypePulldown, "MOSSelection");
    gv_menu.lv_mOSTabSelectedIndex = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_MOSButtons, c_playerAny, gv_menu.lv_mOSTabSelectedIndex, c_triggerControlEventTypeSelectionChanged);
    DialogControlHookup(gv_menu.lv_charScreen, c_triggerControlTypeButton, "Ready");
    gv_menu.lv_readyButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_ReadyButton, c_playerAny, gv_menu.lv_readyButton, c_triggerControlEventTypeClick);
    DialogControlHookup(gv_menu.lv_readyButton, c_triggerControlTypeLabel, "ReadyLabel");
    gv_menu.lv_readyLabel = DialogControlLastCreated();
    DialogControlHookup(gv_menu.lv_charScreen, c_triggerControlTypePanel, "TabButtonsContainer");
    gv_menu.lv_mOSButtonsContainer = DialogControlLastCreated();
    auto263A28CF_ae = UserDataInstanceCount("MOSSetup");
    lv_a = 1;
    for ( ; ( (auto263A28CF_ai >= 0 && lv_a <= auto263A28CF_ae) || (auto263A28CF_ai < 0 && lv_a >= auto263A28CF_ae) ) ; lv_a += auto263A28CF_ai ) {
        DialogControlAddItem(gv_menu.lv_mOSTabSelectedIndex, lib90F7C81D_gv_players, IntToText(lv_a));
        DialogControlHookup(gv_menu.lv_mOSButtonsContainer, c_triggerControlTypeButton, libNtve_gf_ConvertStringToUILayoutFrameName(("Button0" + IntToString((lv_a - 1)))));
        gv_menu.lv_mOSButtons[(lv_a - 1)] = DialogControlLastCreated();
        DialogControlHookup(gv_menu.lv_mOSButtons[(lv_a - 1)], c_triggerControlTypeLabel, libNtve_gf_ConvertStringToUILayoutFrameName("Charge"));
        gv_menu.lv_buttonChargeLabel[(lv_a - 1)] = DialogControlLastCreated();
        gv_menu.lv_mOSCharges[(lv_a - 1)] = UserDataGetInt("MOSSetup", UserDataInstance("MOSSetup", lv_a), "MOS Charges", 1);
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/CharSelectionTabs/PanelsContainer/Panel0" + IntToString((lv_a - 1))));
        gv_menu.lv_mOSPanel[lv_a] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeUnitModel, ("UIContainer/FullscreenUpperContainer/CharSelectionTabs/PanelsContainer/Panel0" + IntToString((lv_a - 1)) + "/MOS"));
        autoD721257E_g = lib90F7C81D_gv_players;
        lv_int = -1;
        while (true) {
            lv_int = PlayerGroupNextPlayer(autoD721257E_g, lv_int);
            if (lv_int < 0) { break; }
            gv_menu.lv_mOSModelRankInsig[lv_a][lv_int] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemTeamColor(gv_menu.lv_mOSModelRankInsig[lv_a][lv_int], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_int, false)), PlayerGroupSingle(lv_int));
        }
        DialogControlHookupStandard(c_triggerControlTypeUnitModel, ("UIContainer/FullscreenUpperContainer/AchievementContainer/PanelsContainer/Panel00/ModelContainer/ModelFrame" + IntToString(lv_a)));
        auto58447F47_g = lib90F7C81D_gv_players;
        lv_int = -1;
        while (true) {
            lv_int = PlayerGroupNextPlayer(auto58447F47_g, lv_int);
            if (lv_int < 0) { break; }
            lib90F7C81D_gv_achievementPanel.lv_modelPanel[lv_a][lv_int] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemTeamColor(lib90F7C81D_gv_achievementPanel.lv_modelPanel[lv_a][lv_int], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_int, false)), PlayerGroupSingle(lv_int));
        }
    }
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/XPContainer/XPButton");
    gv_xPButton = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_DisplayXP, c_playerAny, gv_xPButton, c_triggerControlEventTypeClick);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/XPFrame");
    gv_xPFrame = DialogControlLastCreated();
    DialogControlHookup(gv_xPFrame, c_triggerControlTypeLabel, "ID");
    gv_xPLabels[0] = DialogControlLastCreated();
    DialogControlHookup(gv_xPFrame, c_triggerControlTypeLabel, "ID#");
    gv_xPLabels[1] = DialogControlLastCreated();
    DialogControlHookup(gv_xPFrame, c_triggerControlTypeCountdownLabel, "XP");
    gv_xPLabels[2] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/TimerContainer/TimeLabel");
    gv_voteTimeFrame = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePulldown, "UIContainer/FullscreenUpperContainer/TopNavigator/ModeContainer/ReadablePulldown");
    gv_modeSelection.lv_modeCategoriesIndex = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_ModeSelection, c_playerAny, gv_modeSelection.lv_modeCategoriesIndex, c_triggerControlEventTypeSelectionChanged);
    DialogControlAddItem(gv_modeSelection.lv_modeCategoriesIndex, PlayerGroupAll(), StringExternal("Param/Value/42E8B526"));
    DialogControlAddItem(gv_modeSelection.lv_modeCategoriesIndex, PlayerGroupAll(), StringExternal("Param/Value/6A6F57BC"));
    DialogControlAddItem(gv_modeSelection.lv_modeCategoriesIndex, PlayerGroupAll(), StringExternal("Param/Value/4B80B11C"));
    DialogControlAddItem(gv_modeSelection.lv_modeCategoriesIndex, PlayerGroupAll(), StringExternal("Param/Value/0C221C89"));
    DialogControlAddItem(gv_modeSelection.lv_modeCategoriesIndex, PlayerGroupAll(), StringExternal("Param/Value/F339D61F"));
    DialogControlAddItem(gv_modeSelection.lv_modeCategoriesIndex, PlayerGroupAll(), StringExternal("Param/Value/E259A432"));
    DialogControlAddItem(gv_modeSelection.lv_modeCategoriesIndex, PlayerGroupAll(), StringExternal("Param/Value/1643F4AE"));
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TopNavigator/ModeContainer/PanelsContainer/Panel02/SurvivalModesContainer");
    gv_modeSelection.lv_survivalModesContainer = DialogControlLastCreated();
    DialogControlHookup(gv_modeSelection.lv_survivalModesContainer, c_triggerControlTypePulldown, "ReadablePulldown");
    gv_modeSelection.lv_survivalSelectedIndex = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_ModeSelection, c_playerAny, gv_modeSelection.lv_survivalSelectedIndex, c_triggerControlEventTypeSelectionChanged);
    DialogControlAddItem(gv_modeSelection.lv_survivalSelectedIndex, PlayerGroupAll(), StringExternal("Param/Value/E483F597"));
    DialogControlAddItem(gv_modeSelection.lv_survivalSelectedIndex, PlayerGroupAll(), StringExternal("Param/Value/73532D45"));
    DialogControlAddItem(gv_modeSelection.lv_survivalSelectedIndex, PlayerGroupAll(), StringExternal("Param/Value/74AF99AD"));
    DialogControlAddItem(gv_modeSelection.lv_survivalSelectedIndex, PlayerGroupAll(), StringExternal("Param/Value/BBE10E16"));
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TopNavigator/ModeContainer/PanelsContainer/Panel01/CampaignModesContainer");
    gv_modeSelection.lv_campaignModesContainer = DialogControlLastCreated();
    DialogControlHookup(gv_modeSelection.lv_campaignModesContainer, c_triggerControlTypePulldown, "ReadablePulldown");
    gv_modeSelection.lv_campaignSelectedIndex = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_ModeSelection, c_playerAny, gv_modeSelection.lv_campaignSelectedIndex, c_triggerControlEventTypeSelectionChanged);
    DialogControlAddItem(gv_modeSelection.lv_campaignSelectedIndex, PlayerGroupAll(), StringExternal("Param/Value/7EBD9BF1"));
    DialogControlAddItem(gv_modeSelection.lv_campaignSelectedIndex, PlayerGroupAll(), StringExternal("Param/Value/AFF339BB"));
    DialogControlAddItem(gv_modeSelection.lv_campaignSelectedIndex, PlayerGroupAll(), StringExternal("Param/Value/75A95231"));
    DialogControlAddItem(gv_modeSelection.lv_campaignSelectedIndex, PlayerGroupAll(), StringExternal("Param/Value/1FB3CE5A"));
    DialogControlAddItem(gv_modeSelection.lv_campaignSelectedIndex, PlayerGroupAll(), StringExternal("Param/Value/6A0B5508"));
    DialogControlAddItem(gv_modeSelection.lv_campaignSelectedIndex, PlayerGroupAll(), StringExternal("Param/Value/BA543466"));
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TopNavigator/ModeContainer/PanelsContainer/Panel06/ModifierContainer");
    gv_modeSelection.lv_modifierContainer = DialogControlLastCreated();
    DialogControlHookup(gv_modeSelection.lv_modifierContainer, c_triggerControlTypePulldown, "ReadablePulldown");
    gv_modeSelection.lv_modifierSelectedIndex = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_ModeSelection, c_playerAny, gv_modeSelection.lv_modifierSelectedIndex, c_triggerControlEventTypeSelectionChanged);
    DialogControlAddItem(gv_modeSelection.lv_modifierSelectedIndex, PlayerGroupAll(), StringExternal("Param/Value/735CE0F4"));
    DialogControlAddItem(gv_modeSelection.lv_modifierSelectedIndex, PlayerGroupAll(), StringExternal("Param/Value/78B487CB"));
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/BottomNavigator/Vote00/Label/CountLabel");
    gv_modeSelection.lv_votesRemainingLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(gv_modeSelection.lv_votesRemainingLabel, IntToText(gv_modeSelection.lv_votesRemaining), PlayerGroupAll());
    lv_a = 1;
    for ( ; ( (autoB646FADF_ai >= 0 && lv_a <= autoB646FADF_ae) || (autoB646FADF_ai < 0 && lv_a >= autoB646FADF_ae) ) ; lv_a += autoB646FADF_ai ) {
        DialogControlHookupStandard(c_triggerControlTypeButton, ("UIContainer/FullscreenUpperContainer/BottomNavigator/Vote0" + IntToString(lv_a)));
        gv_modeSelection.lv_voteContainers[lv_a] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/BottomNavigator/Vote0" + IntToString(lv_a) + "/Label/CountLabel"));
        gv_modeSelection.lv_voteCountLabel[lv_a] = DialogControlLastCreated();
    }
    DialogControlHookupStandard(c_triggerControlTypeButton, ("UIContainer/FullscreenUpperContainer/BottomNavigator/Vote00"));
    gv_modeSelection.lv_voteContainers[11] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeCheckBox, "UIContainer/FullscreenUpperContainer/CommandCardType/Option");
    gv_classicCardOption = DialogControlLastCreated();
    TriggerAddEventDialogControl(gt_ClassicCard, c_playerAny, gv_classicCardOption, c_triggerControlEventTypeChecked);
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/DebugButton");
    gv_debug.lv_debugPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/CampaignDebugButton");
    gv_debug.lv_campaignMissions = DialogControlLastCreated();
    lv_a = 1;
    for ( ; ( (auto747DF903_ai >= 0 && lv_a <= auto747DF903_ae) || (auto747DF903_ai < 0 && lv_a >= auto747DF903_ae) ) ; lv_a += auto747DF903_ai ) {
        DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/SDMenu/Player" + IntToString(lv_a) + "NotReadySlot"));
        gv_menu.lv_notReadySlots[lv_a] = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/SDMenu/Player" + IntToString(lv_a) + "NotReadySlot/Waiting"));
        gv_menu.lv_notReadySlotsLabel[lv_a] = DialogControlLastCreated();
    }
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ModeLabel/FirstWinBonusFrame");
    gv_menu.lv_firstWinBonusFrame = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "$InfoPaneGroup");
    gv_menu.lv_infoPaneGroup = DialogControlLastCreated();
    lib90F7C81D_gv_lZs[1] = RegionFromId(30);
    lib90F7C81D_gv_lZs[2] = RegionFromId(31);
    lib90F7C81D_gv_lZs[3] = RegionFromId(32);
    gv_t3Ground[1] = RegionFromId(6);
    gv_t3Ground[2] = RegionFromId(3);
    gv_t3Ground[3] = RegionFromId(19);
    gv_t3Ground[4] = RegionFromId(25);
    gv_t3Ground[5] = RegionFromId(26);
    gv_t3Ground[6] = RegionFromId(27);
    gv_t3Ground[7] = RegionFromId(28);
    gv_t3Ground[8] = RegionFromId(29);
    gv_t3Ground[9] = RegionFromId(9);
    gv_t3Ground[10] = RegionFromId(11);
    gv_t3Ground[11] = RegionFromId(13);
    gv_t3Ground[12] = RegionFromId(24);
    gv_t3Ground[13] = RegionFromId(23);
    gv_t3Ground[14] = RegionFromId(21);
    gv_t3Ground[15] = RegionFromId(17);
    gv_t3Ground[16] = RegionFromId(2);
    gv_t3Ground[17] = RegionFromId(22);
    gv_t3Ground[18] = RegionFromId(1);
    gv_t3Ground[19] = RegionFromId(5);
    gv_t3Ground[20] = RegionFromId(7);
    gv_t2Ground[1] = RegionFromId(19);
    gv_t2Ground[2] = RegionFromId(3);
    gv_t2Ground[3] = RegionFromId(6);
    gv_t2Ground[4] = RegionFromId(17);
    gv_t2Ground[5] = RegionFromId(24);
    gv_t2Ground[6] = RegionFromId(9);
    gv_t2Ground[7] = RegionFromId(11);
    gv_t2Ground[8] = RegionFromId(13);
    gv_t2Ground[9] = RegionFromId(2);
    gv_t2Ground[10] = RegionFromId(23);
    gv_t2Ground[11] = RegionFromId(22);
    gv_t2Ground[12] = RegionFromId(1);
    gv_t2Ground[13] = RegionFromId(5);
    gv_t2Ground[14] = RegionFromId(7);
    gv_t2Ground[15] = RegionFromId(21);
    gv_airSpawns[1] = RegionFromId(19);
    gv_airSpawns[2] = RegionFromId(3);
    gv_airSpawns[3] = RegionFromId(6);
    gv_airSpawns[4] = RegionFromId(20);
    gv_airSpawns[5] = RegionFromId(17);
    gv_airSpawns[6] = RegionFromId(15);
    gv_airSpawns[7] = RegionFromId(18);
    gv_airSpawns[8] = RegionFromId(24);
    gv_airSpawns[9] = RegionFromId(9);
    gv_airSpawns[10] = RegionFromId(11);
    gv_airSpawns[11] = RegionFromId(10);
    gv_airSpawns[12] = RegionFromId(12);
    gv_airSpawns[13] = RegionFromId(14);
    gv_airSpawns[14] = RegionFromId(13);
    gv_airSpawns[15] = RegionFromId(2);
    gv_airSpawns[16] = RegionFromId(23);
    gv_airSpawns[17] = RegionFromId(22);
    gv_airSpawns[18] = RegionFromId(1);
    gv_airSpawns[19] = RegionFromId(16);
    gv_airSpawns[20] = RegionFromId(5);
    gv_airSpawns[21] = RegionFromId(4);
    gv_airSpawns[22] = RegionFromId(7);
    gv_airSpawns[23] = RegionFromId(8);
    gv_airSpawns[24] = RegionFromId(21);
    lib90F7C81D_gv_lZs[1] = RegionFromId(31);
    lib90F7C81D_gv_lZs[2] = RegionFromId(32);
    gf_ModifyUndeadSupplyLimit(135.0, c_playerPropOperSetTo);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/CC684DE4"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/263B0C19"), StringToText(""), "Images\\UA3 Logo.dds");
    TimerWindowCreate(lib90F7C81D_gv_missiontimer, StringExternal("Param/Value/D28B9164"), false, false);
    lib90F7C81D_gv_missiontimerwindow = TimerWindowLastCreated();
    TimerWindowSetFormat(lib90F7C81D_gv_missiontimerwindow, StringToText("<min2/>:<sec2/>"));
    TechTreeUpgradeAddLevel(15, "PMC", 1);
    TechTreeUpgradeAddLevel(14, "Player14", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialize_Init () {
    gt_Initialize = TriggerCreate("gt_Initialize_Func");
    TriggerAddEventMapInit(gt_Initialize);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Load Bank
//--------------------------------------------------------------------------------------------------
bool gt_LoadBank_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_int;
    int lv_max;
    text lv_votesRemaining;
    int lv_days;

    // Automatic Variable Declarations
    playergroup autoCC5D7327_g;
    playergroup auto47DF8C1C_g;
    int auto47DF8C1C_var;
    playergroup auto2EFFE187_g;
    int auto2EFFE187_var;

    // Variable Initialization
    lv_int = 1;
    lv_votesRemaining = StringExternal("Param/Value/D1B7FA15");

    // Actions
    if (!runActions) {
        return true;
    }

    lib90F7C81D_gf_MoveChatBar(lib90F7C81D_ge_ChatBarAnchor_Move);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "IntroMenuMusic", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    libNtve_gf_CinematicMode(true, PlayerGroupAll(), 0.0);
    autoCC5D7327_g = lib90F7C81D_gv_players;
    lv_int = -1;
    while (true) {
        lv_int = PlayerGroupNextPlayer(autoCC5D7327_g, lv_int);
        if (lv_int < 0) { break; }
        if ((PlayerStatus(lv_int) == c_playerStatusActive)) {
            gf_LoadBank(lv_int);
        }

    }
    if ((gv_dEBUG_GAME == true) && (GameIsTestMap(false) == true)) {
        Wait(1.25, c_timeGame);
        gf_SetupMOSUI();
        gf_HideXPFrame("Close");
        gf_UpdateVoteCount(gv_dEBUG_MODE);
        TriggerEnable(gt_VoteTimerTimeout, true);
        TimerStart(lib90F7C81D_gv_missiontimer, 0.0, false, c_timeGame);
        UISetCursorVisible(PlayerGroupAll(), true);
        TriggerEnable(lib90F7C81D_gt_PlayerLeavesGame, false);
        gv_menu.lv_mOSSelected[1] = gv_dEBUG_MOS;
        TriggerEnable(gt_AutoSelectMOS, true);
        Wait(0.0625, c_timeGame);
        lib90F7C81D_gf_RunEvent("AutoPick");
        return true;
    }
    Wait(2.0, c_timeGame);
    gf_SetupMOSUI();
    Wait(0.25, c_timeGame);
    gf_HideXPFrame("Close");
    lv_days = (7 - GetDateTimeWeekday(lib90F7C81D_gv_weeklyModifier.lv_date_Time));
    DialogControlHookupStandard(c_triggerControlTypeLabel, "$MutationLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), IntToText(lv_days), PlayerGroupAll());
    Wait(5.5, c_timeGame);
    TriggerEnable(gt_VoteTimerTimeout, true);
    auto47DF8C1C_g = lib90F7C81D_gv_players;
    auto47DF8C1C_var = -1;
    while (true) {
        auto47DF8C1C_var = PlayerGroupNextPlayer(auto47DF8C1C_g, auto47DF8C1C_var);
        if (auto47DF8C1C_var < 0) { break; }
        gf_SetupDayBonus(auto47DF8C1C_var);
    }
    if ((GameAttributeGameValue("3") == "0002")) {
        TriggerEnable(gt_ModeSelection, true);
        TimerStart(lib90F7C81D_gv_missiontimer, 30.0, false, c_timeReal);
        lv_max = PlayerGroupCount(lib90F7C81D_gv_players);
        lv_int = 0;
        auto2EFFE187_g = lib90F7C81D_gv_players;
        auto2EFFE187_var = -1;
        while (true) {
            auto2EFFE187_var = PlayerGroupNextPlayer(auto2EFFE187_g, auto2EFFE187_var);
            if (auto2EFFE187_var < 0) { break; }
            lv_int += 1;
            if ((lv_int == lv_max)) {
                lv_votesRemaining = (lv_votesRemaining + PlayerName(auto2EFFE187_var));
            }
            else {
                lv_votesRemaining = (lv_votesRemaining + (PlayerName(auto2EFFE187_var) + StringExternal("Param/Value/E3A5FA8F")));
            }
        }
        libNtve_gf_SetDialogItemTooltip(gv_modeSelection.lv_voteContainers[11], lv_votesRemaining, PlayerGroupAll());
    }
    else {
        TimerStart(lib90F7C81D_gv_missiontimer, 0.0, false, c_timeGame);
    }
    UISetCursorVisible(PlayerGroupAll(), true);
    if ((GameIsTestMap(false) == true)) {
        TriggerEnable(lib90F7C81D_gt_PlayerLeavesGame, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LoadBank_Init () {
    gt_LoadBank = TriggerCreate("gt_LoadBank_Func");
    TriggerAddEventTimeElapsed(gt_LoadBank, 0.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Stats
//--------------------------------------------------------------------------------------------------
bool gt_UpdateStats_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto139FCD72_ae;
    const int auto139FCD72_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(lib90F7C81D_gt_PeriodicWeatherEvent, false);
    if ((lib90F7C81D_gv_victory == false)) {
        gf_SaveGameStats();
        if ((lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (7) || lib90F7C81D_gf_GetGameMode(1))) {
            BossBarHideUAD();
            TriggerQueuePause(true);
        }
    }
    auto139FCD72_ae = PlayerGroupCount(lib90F7C81D_gv_players);
    lv_index = 1;
    for ( ; ( (auto139FCD72_ai >= 0 && lv_index <= auto139FCD72_ae) || (auto139FCD72_ai < 0 && lv_index >= auto139FCD72_ae) ) ; lv_index += auto139FCD72_ai ) {
        DialogControlSetAnimationState(lib90F7C81D_gv_commandCard.lv_selfCastFrame[lv_index], PlayerGroupAll(), "State", "Off");
    }
    TriggerDebugOutput(gv_debug.lv_gameEventsType, (StringExternal("Param/Value/CCBBC73D") + IntToText(lib90F7C81D_gf_GameMode()) + StringExternal("Param/Value/EC80C0E2") + IntToText(lib90F7C81D_gv_xPGained)), gv_debug.lv_gameEvents);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateStats_Init () {
    gt_UpdateStats = TriggerCreate("gt_UpdateStats_Func");
    lib90F7C81D_gf_GameEvent(gt_UpdateStats, "UpdateStats");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bank Backup
//--------------------------------------------------------------------------------------------------
bool gt_BankBackup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA4190EEC_g;
    int autoA4190EEC_var;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == true))) {
            return false;
        }

        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((lib90F7C81D_gv_victory))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoA4190EEC_g = lib90F7C81D_gv_players;
    autoA4190EEC_var = -1;
    while (true) {
        autoA4190EEC_var = PlayerGroupNextPlayer(autoA4190EEC_g, autoA4190EEC_var);
        if (autoA4190EEC_var < 0) { break; }
        BankBackup(lib90F7C81D_gv_bankData.lv_banks[autoA4190EEC_var], autoA4190EEC_var);
        BankBackup(gv_stR[autoA4190EEC_var], autoA4190EEC_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BankBackup_Init () {
    gt_BankBackup = TriggerCreate("gt_BankBackup_Func");
    TriggerAddEventGeneric(gt_BankBackup, "BankBackup");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Classic Card
//--------------------------------------------------------------------------------------------------
bool gt_ClassicCard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
        lib90F7C81D_gv_commandCard.lv_classicCard[EventPlayer()] = true;
        if ((lib90F7C81D_gv_commandCard.lv_selfCastUnit[EventPlayer()] != null)) {
            UnitIssueOrder(lib90F7C81D_gv_commandCard.lv_selfCastUnit[EventPlayer()], Order(AbilityCommand("CommandCardSwitch", 0)), c_orderQueueReplace);
        }
    }
    else {
        lib90F7C81D_gv_commandCard.lv_classicCard[EventPlayer()] = false;
        if ((lib90F7C81D_gv_commandCard.lv_selfCastUnit[EventPlayer()] != null)) {
            UnitIssueOrder(lib90F7C81D_gv_commandCard.lv_selfCastUnit[EventPlayer()], Order(AbilityCommand("CommandCardSwitch", 1)), c_orderQueueReplace);
        }
    }
    BankValueSetFromFlag(gv_stR[EventPlayer()], "X", "Flag", lib90F7C81D_gv_commandCard.lv_classicCard[EventPlayer()]);
    BankSave(gv_stR[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClassicCard_Init () {
    gt_ClassicCard = TriggerCreate("gt_ClassicCard_Func");
    TriggerEnable(gt_ClassicCard, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Display XP
//--------------------------------------------------------------------------------------------------
bool gt_DisplayXP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_text;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_text = StringToText("");
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_text = (StringExternal("Param/Value/79777846") + gf_PlayersCurrentRank(lv_player) + StringExternal("Param/Value/4EB92F86") + StringExternal("Param/Value/A50B2D0C") + FormatNumber(gf_MOSRankXPRequirement((gf_PlayersCurrentRankLevel(lib90F7C81D_gv_bankData.lv_xP[lv_player]) + 1))) + StringExternal("Param/Value/72704983") + gf_PlayersNextRank(lv_player) + StringExternal("Param/Value/00A8681E") + StringExternal("Param/Value/A18660AD") + FormatNumber(lib90F7C81D_gv_bankData.lv_xP[lv_player]) + StringExternal("Param/Value/DBCB2704") + UnitGetName(lib90F7C81D_gv_playerHeroes[lv_player]) + StringExternal("Param/Value/39D2129A") + gf_MOSLevelUnlocked(gv_menu.lv_mOSSelected[lv_player], lv_player) + StringExternal("Param/Value/9E621D5D") + StringExternal("Param/Value/102E36FE") + FormatNumber(gf_MOSLevelNextXP(gv_menu.lv_mOSSelected[lv_player], lv_player)) + StringExternal("Param/Value/BB8E45C5") + gf_MOSLevelName(gv_menu.lv_mOSSelected[lv_player], lv_player) + StringExternal("Param/Value/DE5A8425") + UnitGetName(lib90F7C81D_gv_playerHeroes[lv_player]) + StringExternal("Param/Value/AA7EE9E9") + FormatNumber(lib90F7C81D_gv_bankData.lv_mOSXP[gv_menu.lv_mOSSelected[lv_player]][lv_player]) + (StringExternal("Param/Value/CA432D1E") + FormatNumber(lib90F7C81D_gv_xPGained)));
    lib90F7C81D_gf_DisplayVisorTextDialog(lv_text, lv_player);
    lv_text = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisplayXP_Init () {
    gt_DisplayXP = TriggerCreate("gt_DisplayXP_Func");
    TriggerEnable(gt_DisplayXP, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Screen XP Card
//--------------------------------------------------------------------------------------------------
bool gt_ScoreScreenXPCard_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto62A997E9_g;
    int auto62A997E9_var;

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_SetDialogItemText(gv_xPLabels[0], StringExternal("Param/Value/A35B6995"), lib90F7C81D_gv_players);
    auto62A997E9_g = lib90F7C81D_gv_players;
    auto62A997E9_var = -1;
    while (true) {
        auto62A997E9_var = PlayerGroupNextPlayer(auto62A997E9_g, auto62A997E9_var);
        if (auto62A997E9_var < 0) { break; }
        if ((gv_xPEvents.lv_bonusXp[auto62A997E9_var] == true)) {
            libNtve_gf_SetDialogItemText(gv_xPLabels[2], (StringExternal("Param/Value/B4C9D40D") + FormatNumber((lib90F7C81D_gv_xPGained + FixedToInt(lib90F7C81D_gf_GetModeXP("bonus.First Win"))))), PlayerGroupSingle(auto62A997E9_var));
        }
        else {
            libNtve_gf_SetDialogItemText(gv_xPLabels[2], (StringExternal("Param/Value/95B2B767") + FormatNumber(lib90F7C81D_gv_xPGained)), PlayerGroupSingle(auto62A997E9_var));
        }
        libNtve_gf_SetDialogItemText(gv_xPLabels[1], (StringExternal("Param/Value/1F03946F") + FormatNumber(lib90F7C81D_gv_bankData.lv_xP[auto62A997E9_var])), PlayerGroupSingle(auto62A997E9_var));
    }
    gf_HideXPFrame("Display");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScoreScreenXPCard_Init () {
    gt_ScoreScreenXPCard = TriggerCreate("gt_ScoreScreenXPCard_Func");
    lib90F7C81D_gf_GameEvent(gt_ScoreScreenXPCard, "ScoreScreenXPCard");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init Supply Caches
//--------------------------------------------------------------------------------------------------
bool gt_InitSupplyCaches_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    point lv_point;

    // Automatic Variable Declarations
    const int autoE6EAD7A5_ae = 4;
    const int autoE6EAD7A5_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    RegionAddCircle(RegionFromId(39), false, RegionGetCenter(RegionFromId(30)), 25.0);
    RegionAddRect(RegionFromId(39), false, 64.0, 128.0, 128.0, 192.0);
    RegionAddRect(RegionFromId(40), false, 128.0, 128.0, 192.0, 192.0);
    RegionAddRect(RegionFromId(41), false, 128.0, 64.0, 192.0, 128.0);
    RegionAddRect(RegionFromId(42), false, 64.0, 64.0, 128.0, 128.0);
    gv_supplyCache.lv_supply_Cache_Region[0] = RegionFromId(33);
    gv_supplyCache.lv_supply_Cache_Region[1] = RegionFromId(34);
    gv_supplyCache.lv_supply_Cache_Region[2] = RegionFromId(35);
    gv_supplyCache.lv_supply_Cache_Region[3] = RegionFromId(36);
    gv_supplyCache.lv_supply_Cache_Region[4] = RegionFromId(37);
    lv_index = 0;
    for ( ; ( (autoE6EAD7A5_ai >= 0 && lv_index <= autoE6EAD7A5_ae) || (autoE6EAD7A5_ai < 0 && lv_index >= autoE6EAD7A5_ae) ) ; lv_index += autoE6EAD7A5_ai ) {
        while (true) {
            lv_point = RegionRandomPoint(RegionFromId(38 + lv_index));
            if ((PointPathingPassable(lv_point) == true) && (PointPathingIsConnected(lv_point, PointFromId(1254458203)) == true)) {
                break;
            }

            Wait(0.0625, c_timeGame);
        }
        RegionSetCenter(gv_supplyCache.lv_supply_Cache_Region[lv_index], lv_point);
        libNtve_gf_CreateModelAtPoint("Rock", RegionGetCenter(gv_supplyCache.lv_supply_Cache_Region[lv_index]));
        gv_supplyCache.lv_rock[lv_index] = libNtve_gf_ActorLastCreated();
        ActorSend(gv_supplyCache.lv_rock[lv_index], "TextureSelectById WeaponsCacheRock");
        ActorSend(gv_supplyCache.lv_rock[lv_index], "SetScale 1.400000");
    }
    lv_point = null;
    TriggerEnable(gt_FindSupplyCache, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InitSupplyCaches_Init () {
    gt_InitSupplyCaches = TriggerCreate("gt_InitSupplyCaches_Func");
    lib90F7C81D_gf_GameEvent(gt_InitSupplyCaches, "SetupCacheSites");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Find Supply Cache
//--------------------------------------------------------------------------------------------------
bool gt_FindSupplyCache_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_random_Item_List;

    // Automatic Variable Declarations
    const int auto120E06E7_ae = 4;
    const int auto120E06E7_ai = 1;
    playergroup auto672508C0_g;
    int auto672508C0_var;
    const int auto5BE8D551_ae = 4;
    const int auto5BE8D551_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 0;
    for ( ; ( (auto120E06E7_ai >= 0 && lv_index <= auto120E06E7_ae) || (auto120E06E7_ai < 0 && lv_index >= auto120E06E7_ae) ) ; lv_index += auto120E06E7_ai ) {
        if ((EventUnitRegion() == gv_supplyCache.lv_supply_Cache_Region[lv_index]) && (gv_supplyCache.lv_supply_Cache_Found[lv_index] == false)) {
            gv_supplyCache.lv_supply_Cache_Found[lv_index] = true;
            gv_supplyCache.lv_supply_Cache_Found_Count += 1;
            libNtve_gf_SetDialogItemText(lib90F7C81D_gv_achievementPanel.lv_modeAchievementsCurP[0][5], IntToText(gv_supplyCache.lv_supply_Cache_Found_Count), PlayerGroupAll());
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingSimple", RegionGetCenter(gv_supplyCache.lv_supply_Cache_Region[lv_index]), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 25.0, 270.0);
            PingSetTooltip(PingLastCreated(), (StringExternal("Param/Value/9FCF234E") + (IntToText(gv_supplyCache.lv_supply_Cache_Found_Count) + StringExternal("Param/Value/EFD2C0B7"))));
            SoundPlay(SoundLink("UI_ObjectiveUpdate", -1), PlayerGroupAll(), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, (StringExternal("Param/Value/2E6E1AF3") + (IntToText(gv_supplyCache.lv_supply_Cache_Found_Count) + StringExternal("Param/Value/DB26577D"))));
            ActorSend(gv_supplyCache.lv_rock[lv_index], "TextureResetToDefault");
            gf_SupplyCacheSpawnItem("Magazines", RandomInt(2, 4), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
            gf_SupplyCacheSpawnItem("AmmoCase", RandomInt(1, 2), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
            gf_SupplyCacheSpawnItem("QuikClot", RandomInt(0, 1), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
            gf_SupplyCacheSpawnItem("FirstAidKit", RandomInt(0, 1), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
            gf_SupplyCacheSpawnItem("AntiVeninShot", RandomInt(0, 1), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
            gf_SupplyCacheSpawnItem("EnergyCell", RandomInt(0, 2), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
            gf_SupplyCacheSpawnItem("FlareGun", RandomInt(0, 1), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
            gf_SupplyCacheSpawnItem("GroundFlareItem", RandomInt(0, 1), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
            while (true) {
                lv_random_Item_List = RandomInt(1, gv_supplyCache.lv_supply_Cache_Max);
                if ((gv_supplyCache.lv_supply_Cache_List_Used[lv_random_Item_List] == false)) {
                    gv_supplyCache.lv_supply_Cache_List_Used[lv_random_Item_List] = true;
                    break;
                }
                Wait(0.0625, c_timeGame);
            }
            if ((lv_random_Item_List == 1)) {
                gf_SupplyCacheSpawnItem("AdvancedFirstAidKit", RandomInt(0, 1), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
                gf_SupplyCacheSpawnItem("AdvancedQuikClot", RandomInt(0, 1), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
                gf_SupplyCacheSpawnItem("AdvancedAntiVeninShot", RandomInt(0, 1), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
                gf_SupplyCacheSpawnItem("Magazines", RandomInt(2, 4), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
                gf_SupplyCacheSpawnItem("AmmoCase", RandomInt(1, 2), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
            }
            else if ((lv_random_Item_List == 2)) {
                gf_SupplyCacheSpawnItem("GroundFlareItem", RandomInt(1, 3), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
                gf_SupplyCacheSpawnItem("FlareGun", RandomInt(1, 3), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
                gf_SupplyCacheSpawnItem("EnergyCell", RandomInt(1, 2), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
            }
            else if ((lv_random_Item_List == 3)) {
                gf_SupplyCacheSpawnItem("40mmGrenadeItem", RandomInt(1, 2), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
                gf_SupplyCacheSpawnItem("MRLRocket2", RandomInt(1, 2), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
                gf_SupplyCacheSpawnItem("FragGrenade", RandomInt(2, 3), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
            }
            else if ((lv_random_Item_List == 4)) {
                gf_SupplyCacheSpawnItem("Magazines", RandomInt(3, 4), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
                gf_SupplyCacheSpawnItem("AmmoCase", RandomInt(2, 3), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
                gf_SupplyCacheSpawnItem("EnergyCell", RandomInt(2, 3), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
                gf_SupplyCacheSpawnItem("Flashlight", RandomInt(1, 2), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
            }
            else if ((lv_random_Item_List == 5)) {
                gf_SupplyCacheSpawnItem("AdvancedFirstAidKit", RandomInt(0, 1), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
                gf_SupplyCacheSpawnItem("AdvancedQuikClot", RandomInt(0, 1), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
                gf_SupplyCacheSpawnItem("AdvancedAntiVeninShot", RandomInt(0, 1), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
                gf_SupplyCacheSpawnItem("FragGrenade", RandomInt(1, 2), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
                gf_SupplyCacheSpawnItem("ClaymoreItem", RandomInt(1, 3), gv_supplyCache.lv_supply_Cache_Region[lv_index]);
                gf_SupplyCacheSpawnItem("Binoculars", 1, gv_supplyCache.lv_supply_Cache_Region[lv_index]);
            }
            break;
        }
    }
    if ((gv_supplyCache.lv_supply_Cache_Found_Count == 5) && lib90F7C81D_gf_GetGameMode(6)) {
        TriggerEnable(TriggerGetCurrent(), false);
        auto672508C0_g = lib90F7C81D_gv_players;
        auto672508C0_var = -1;
        while (true) {
            auto672508C0_var = PlayerGroupNextPlayer(auto672508C0_g, auto672508C0_var);
            if (auto672508C0_var < 0) { break; }
            if ((lib90F7C81D_gv_bankData.lv_achievementsUnlocked[20][auto672508C0_var] == false)) {
                lib90F7C81D_gv_bankData.lv_achievementsUnlocked[20][auto672508C0_var] = true;
                lib90F7C81D_gf_FlashAchievementBadge("Good & Plenty", auto672508C0_var);
                DialogControlSetAnimationState(lib90F7C81D_gv_achievementPanel.lv_modeAchievements[0][5], PlayerGroupSingle(auto672508C0_var), "AchievementBadge", "Earned");
                PlayerBankSave(auto672508C0_var);
            }
        }
        lv_index = 0;
        for ( ; ( (auto5BE8D551_ai >= 0 && lv_index <= auto5BE8D551_ae) || (auto5BE8D551_ai < 0 && lv_index >= auto5BE8D551_ae) ) ; lv_index += auto5BE8D551_ai ) {
            gv_supplyCache.lv_supply_Cache_Region[lv_index] = null;
            gv_supplyCache.lv_rock[lv_index] = null;
        }
        TriggerDestroy(TriggerGetCurrent());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FindSupplyCache_Init () {
    gt_FindSupplyCache = TriggerCreate("gt_FindSupplyCache_Func");
    TriggerEnable(gt_FindSupplyCache, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mode Selection
//--------------------------------------------------------------------------------------------------
bool gt_ModeSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_selectedIndex;
    int lv_index;
    int lv_previousVote;
    bool lv_allowVote;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();
    lv_allowVote = true;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == gv_modeSelection.lv_modeCategoriesIndex)) {
        lv_selectedIndex = (DialogControlGetSelectedItem(gv_modeSelection.lv_modeCategoriesIndex, lv_player) - 1);
        if (((lv_selectedIndex == 0) || (lv_selectedIndex == 1) || (lv_selectedIndex == 2) || (lv_selectedIndex == 6))) {
            return true;
        }
    }
    else if ((EventDialogControl() == gv_modeSelection.lv_survivalSelectedIndex)) {
        lv_selectedIndex = (DialogControlGetSelectedItem(gv_modeSelection.lv_survivalSelectedIndex, lv_player) - 1);
        if ((lv_selectedIndex == 0)) {
            return true;
        }
    }
    else if ((EventDialogControl() == gv_modeSelection.lv_campaignSelectedIndex)) {
        lv_selectedIndex = (DialogControlGetSelectedItem(gv_modeSelection.lv_campaignSelectedIndex, lv_player) - 1);
        if ((lv_selectedIndex == 0)) {
            return true;
        }
    }
    else if ((EventDialogControl() == gv_modeSelection.lv_modifierSelectedIndex)) {
        lv_selectedIndex = (DialogControlGetSelectedItem(gv_modeSelection.lv_modifierSelectedIndex, lv_player) - 1);
        if ((lv_selectedIndex == 0)) {
            return true;
        }
    }
    while (gv_modeSelection.lv_voteQueue) {
        Wait(1.0, c_timeGame);
    }
    gv_modeSelection.lv_voteQueue = true;
    if ((gv_modeSelection.lv_playerVoted[lv_player] == false)) {
        gv_modeSelection.lv_playerVoted[lv_player] = true;
        gv_modeSelection.lv_votesRemaining -= 1;
        libNtve_gf_SetDialogItemText(gv_modeSelection.lv_votesRemainingLabel, IntToText(gv_modeSelection.lv_votesRemaining), PlayerGroupAll());
        gf_UpdateVotesRemainingTooltip();
    }
    if ((gv_modeSelection.lv_modePlayerVoted[lv_player] > 0)) {
        lv_previousVote = gv_modeSelection.lv_modePlayerVoted[lv_player];
        gv_modeSelection.lv_modePlayerVoted[lv_player] = 0;
        gv_modeSelection.lv_votes[lv_previousVote] -= 1;
        libNtve_gf_SetDialogItemText(gv_modeSelection.lv_voteCountLabel[lv_previousVote], IntToText(gv_modeSelection.lv_votes[lv_previousVote]), PlayerGroupAll());
        if ((gv_modeSelection.lv_modeContainer[lv_previousVote] == true) && (gv_modeSelection.lv_votes[lv_previousVote] == 0)) {
            gv_modeSelection.lv_modeContainer[lv_previousVote] = false;
            DialogControlSetVisible(gv_modeSelection.lv_voteContainers[lv_previousVote], PlayerGroupAll(), false);
            libNtve_gf_SetDialogItemTooltip(gv_modeSelection.lv_voteContainers[lv_previousVote], StringToText(""), PlayerGroupAll());
        }
        else {
            gf_UpdateVoteContainerTooltip(lv_previousVote);
        }
    }
    if ((EventDialogControl() == gv_modeSelection.lv_campaignSelectedIndex)) {
        DialogControlSetAnimationState(gv_modeSelection.lv_survivalModesContainer, PlayerGroupSingle(lv_player), "Reset", "True");
        if ((lv_selectedIndex == 1) && (gv_modeSelection.lv_modePlayerVoted[lv_player] != UserDataGetInt("GameModes", "Recruit", "Mode #", 1))) {
            gv_modeSelection.lv_modePlayerVoted[lv_player] = UserDataGetInt("GameModes", "Recruit", "Mode #", 1);
            lv_index = gv_modeSelection.lv_modePlayerVoted[lv_player];
            gf_UpdateVoteCount(lv_index);
        }
        else if ((lv_selectedIndex == 2) && (gv_modeSelection.lv_modePlayerVoted[lv_player] != UserDataGetInt("GameModes", "Normal", "Mode #", 1))) {
            gv_modeSelection.lv_modePlayerVoted[lv_player] = UserDataGetInt("GameModes", "Normal", "Mode #", 1);
            lv_index = gv_modeSelection.lv_modePlayerVoted[lv_player];
            gf_UpdateVoteCount(lv_index);
        }
        else if ((lv_selectedIndex == 3) && (gv_modeSelection.lv_modePlayerVoted[lv_player] != UserDataGetInt("GameModes", "Hard", "Mode #", 1))) {
            gv_modeSelection.lv_modePlayerVoted[lv_player] = UserDataGetInt("GameModes", "Hard", "Mode #", 1);
            lv_index = gv_modeSelection.lv_modePlayerVoted[lv_player];
            gf_UpdateVoteCount(lv_index);
        }
        else if ((lv_selectedIndex == 4) && (gv_modeSelection.lv_modePlayerVoted[lv_player] != UserDataGetInt("GameModes", "Insane", "Mode #", 1))) {
            gv_modeSelection.lv_modePlayerVoted[lv_player] = UserDataGetInt("GameModes", "Insane", "Mode #", 1);
            lv_index = gv_modeSelection.lv_modePlayerVoted[lv_player];
            gf_UpdateVoteCount(lv_index);
        }
        else if ((lv_selectedIndex == 5) && (gv_modeSelection.lv_modePlayerVoted[lv_player] != UserDataGetInt("GameModes", "Nightmare", "Mode #", 1))) {
            gv_modeSelection.lv_modePlayerVoted[lv_player] = UserDataGetInt("GameModes", "Nightmare", "Mode #", 1);
            lv_index = gv_modeSelection.lv_modePlayerVoted[lv_player];
            gf_UpdateVoteCount(lv_index);
        }
        DialogControlSetAnimationState(gv_modeSelection.lv_survivalModesContainer, PlayerGroupSingle(lv_player), "Reset", "False");
    }
    else if ((EventDialogControl() == gv_modeSelection.lv_survivalSelectedIndex)) {
        DialogControlSetAnimationState(gv_modeSelection.lv_campaignModesContainer, PlayerGroupSingle(lv_player), "Reset", "True");
        if ((lv_selectedIndex == 1) && (gv_modeSelection.lv_modePlayerVoted[lv_player] != UserDataGetInt("GameModes", "Survival", "Mode #", 1))) {
            gv_modeSelection.lv_modePlayerVoted[lv_player] = UserDataGetInt("GameModes", "Survival", "Mode #", 1);
            lv_index = gv_modeSelection.lv_modePlayerVoted[lv_player];
            gf_UpdateVoteCount(lv_index);
        }
        else if ((lv_selectedIndex == 2) && (gv_modeSelection.lv_modePlayerVoted[lv_player] != UserDataGetInt("GameModes", "Mission Survival", "Mode #", 1))) {
            gv_modeSelection.lv_modePlayerVoted[lv_player] = UserDataGetInt("GameModes", "Mission Survival", "Mode #", 1);
            lv_index = gv_modeSelection.lv_modePlayerVoted[lv_player];
            gf_UpdateVoteCount(lv_index);
        }
        else if ((lv_selectedIndex == 3) && (gv_modeSelection.lv_modePlayerVoted[lv_player] != UserDataGetInt("GameModes", "Boss Rush", "Mode #", 1))) {
            gv_modeSelection.lv_modePlayerVoted[lv_player] = UserDataGetInt("GameModes", "Boss Rush", "Mode #", 1);
            lv_index = gv_modeSelection.lv_modePlayerVoted[lv_player];
            gf_UpdateVoteCount(lv_index);
        }
        DialogControlSetAnimationState(gv_modeSelection.lv_campaignModesContainer, PlayerGroupSingle(lv_player), "Reset", "False");
    }
    else if ((EventDialogControl() == gv_modeSelection.lv_modifierSelectedIndex)) {
        DialogControlSetAnimationState(gv_modeSelection.lv_modifierContainer, PlayerGroupSingle(lv_player), "Reset", "True");
        if ((lv_selectedIndex == 1) && (gv_modeSelection.lv_modePlayerVoted[lv_player] != UserDataGetInt("GameModes", "Weekly Modifiers", "Mode #", 1))) {
            gv_modeSelection.lv_modePlayerVoted[lv_player] = UserDataGetInt("GameModes", "Weekly Modifiers", "Mode #", 1);
            lv_index = gv_modeSelection.lv_modePlayerVoted[lv_player];
            gf_UpdateVoteCount(lv_index);
        }
        DialogControlSetAnimationState(gv_modeSelection.lv_modifierContainer, PlayerGroupSingle(lv_player), "Reset", "False");
    }
    else if ((EventDialogControl() == gv_modeSelection.lv_modeCategoriesIndex) && (GameIsTestMap(false) == true)) {
        if ((lv_selectedIndex == 4) && (gv_modeSelection.lv_modePlayerVoted[lv_player] != UserDataGetInt("GameModes", "Sandbox", "Mode #", 1))) {
            gv_modeSelection.lv_modePlayerVoted[lv_player] = UserDataGetInt("GameModes", "Sandbox", "Mode #", 1);
            lv_index = gv_modeSelection.lv_modePlayerVoted[lv_player];
            gf_UpdateVoteCount(lv_index);
        }
        else if ((lv_selectedIndex == 5) && (gv_modeSelection.lv_modePlayerVoted[lv_player] != UserDataGetInt("GameModes", "Deathmatch", "Mode #", 1))) {
            gv_modeSelection.lv_modePlayerVoted[lv_player] = UserDataGetInt("GameModes", "Deathmatch", "Mode #", 1);
            lv_index = gv_modeSelection.lv_modePlayerVoted[lv_player];
            gf_UpdateVoteCount(lv_index);
        }
    }
    if ((gv_modeSelection.lv_votesRemaining == 0) && (gv_modeSelection.lv_votingFinished == false) && (TimerGetRemaining(lib90F7C81D_gv_missiontimer) >= 1.0)) {
        gv_modeSelection.lv_votingFinished = true;
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_VoteTimerTimeout, false);
        gf_TallyVotes();
    }
    gv_modeSelection.lv_voteQueue = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModeSelection_Init () {
    gt_ModeSelection = TriggerCreate("gt_ModeSelection_Func");
    TriggerEnable(gt_ModeSelection, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vote Timer Timeout
//--------------------------------------------------------------------------------------------------
bool gt_VoteTimerTimeout_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_modeSelection.lv_votingFinished == false)) {
        gv_modeSelection.lv_votingFinished = true;
        TriggerEnable(gt_ModeSelection, false);
        gf_TallyVotes();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoteTimerTimeout_Init () {
    gt_VoteTimerTimeout = TriggerCreate("gt_VoteTimerTimeout_Func");
    TriggerEnable(gt_VoteTimerTimeout, false);
    TriggerAddEventTimer(gt_VoteTimerTimeout, lib90F7C81D_gv_missiontimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Choose Hero
//--------------------------------------------------------------------------------------------------
bool gt_ChooseHero_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pindex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pindex = UnitGetOwner(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_playerHeroes[lv_pindex] == null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SetupMOS(lv_pindex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChooseHero_Init () {
    gt_ChooseHero = TriggerCreate("gt_ChooseHero_Func");
    TriggerAddEventUnitCreated(gt_ChooseHero, null, "ChooseNewRifleman", null);
    TriggerAddEventUnitCreated(gt_ChooseHero, null, "ChooseCombatMedic", null);
    TriggerAddEventUnitCreated(gt_ChooseHero, null, "ChooseAutomaticRifleman", null);
    TriggerAddEventUnitCreated(gt_ChooseHero, null, "ChooseCavalryScout", null);
    TriggerAddEventUnitCreated(gt_ChooseHero, null, "ChooseSFAAT", null);
    TriggerAddEventUnitCreated(gt_ChooseHero, null, "ChooseJavelinGunner", null);
    TriggerAddEventUnitCreated(gt_ChooseHero, null, "ChooseSDM", null);
    TriggerAddEventUnitCreated(gt_ChooseHero, null, "ChoosePlatoonLeader", null);
    TriggerAddEventUnitCreated(gt_ChooseHero, null, "ChooseFlamethrower", null);
    TriggerAddEventUnitCreated(gt_ChooseHero, null, "ChooseCombatEngineer", null);
    TriggerAddEventUnitCreated(gt_ChooseHero, null, "ChooseCyborg", null);
    TriggerAddEventUnitCreated(gt_ChooseHero, null, "ChooseGhost", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ready Button
//--------------------------------------------------------------------------------------------------
bool gt_ReadyButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_menu.lv_charSelected[lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_menu.lv_charSelected[lv_player] = true;
    if ((gv_menu.lv_mOSCharges[gv_menu.lv_mOSSelected[lv_player]] > 0)) {
        DialogControlSetAnimationState(gv_menu.lv_readyLabel, PlayerGroupSingle(lv_player), "Button", "Enable");
        DialogControlSetAnimationState(gv_menu.lv_notReadySlots[lv_player], PlayerGroupAll(), "Player", "NotSelecting");
        gf_UpdateMOSUI(gv_menu.lv_mOSSelected[lv_player], lv_player);
    }
    else {
        gv_menu.lv_charSelected[lv_player] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReadyButton_Init () {
    gt_ReadyButton = TriggerCreate("gt_ReadyButton_Func");
    TriggerEnable(gt_ReadyButton, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MOS Buttons
//--------------------------------------------------------------------------------------------------
bool gt_MOSButtons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }

        if (!((gv_menu.lv_charSelected[lv_player] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = (DialogControlGetSelectedItem(gv_menu.lv_mOSTabSelectedIndex, lv_player) - 1);
    if ((gv_menu.lv_mOSCharges[lv_index] > 0)) {
        gv_menu.lv_mOSSelected[lv_player] = lv_index;
        lib90F7C81D_gv_iIIIIIlllllll[1][lv_player] = lv_index;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MOSButtons_Init () {
    gt_MOSButtons = TriggerCreate("gt_MOSButtons_Func");
    TriggerEnable(gt_MOSButtons, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AutoSelect MOS
//--------------------------------------------------------------------------------------------------
bool gt_AutoSelectMOS_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto97DF39A7_g;
    int auto97DF39A7_var;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ReadyButton, false);
    auto97DF39A7_g = lib90F7C81D_gv_players;
    auto97DF39A7_var = -1;
    while (true) {
        auto97DF39A7_var = PlayerGroupNextPlayer(auto97DF39A7_g, auto97DF39A7_var);
        if (auto97DF39A7_var < 0) { break; }
        if ((PlayerStatus(auto97DF39A7_var) == c_playerStatusActive) && (lib90F7C81D_gv_playerHeroes[auto97DF39A7_var] == null)) {
            if (((PlayerHandle(auto97DF39A7_var) == "1-S2-1-2812341") || ((GameIsTestMap(false) == true) && (gv_menu.lv_mOSSelected[auto97DF39A7_var] == 0)))) {
                gf_UpdateMOSUI(0, auto97DF39A7_var);
            }
            else {
                if ((gv_menu.lv_mOSSelected[auto97DF39A7_var] > 1) && (gv_menu.lv_mOSCharges[gv_menu.lv_mOSSelected[auto97DF39A7_var]] > 0)) {
                    gf_UpdateMOSUI(gv_menu.lv_mOSSelected[auto97DF39A7_var], auto97DF39A7_var);
                }
                else {
                    if ((gv_menu.lv_mOSCharges[1] > 0)) {
                        lib90F7C81D_gv_iIIIIIlllllll[1][auto97DF39A7_var] = 1;
                        gf_UpdateMOSUI(1, auto97DF39A7_var);
                    }
                    else {
                        lib90F7C81D_gv_iIIIIIlllllll[1][auto97DF39A7_var] = 0;
                        gf_UpdateMOSUI(0, auto97DF39A7_var);
                    }
                }
            }
            DialogControlSetAnimationState(gv_menu.lv_notReadySlots[auto97DF39A7_var], PlayerGroupAll(), "Player", "NotSelecting");
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutoSelectMOS_Init () {
    gt_AutoSelectMOS = TriggerCreate("gt_AutoSelectMOS_Func");
    TriggerEnable(gt_AutoSelectMOS, false);
    lib90F7C81D_gf_GameEvent(gt_AutoSelectMOS, "AutoPick");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Loop Main
//--------------------------------------------------------------------------------------------------
bool gt_SpawnLoopMain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomInt;

    // Automatic Variable Declarations
    int autoB353B04A_n;
    int autoB353B04A_i;
    int auto97937D51_n;
    int auto97937D51_i;
    int autoCD0EE5BA_val;
    const int auto7CF9B5C9_n = 2;
    int auto7CF9B5C9_i;
    const int auto2C8F6A96_n = 2;
    int auto2C8F6A96_i;
    const int auto163DAB83_n = 2;
    int auto163DAB83_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (gf_LoopEnabled(lib90F7C81D_ge_LoopType_Main)) {
        Wait(gf_GetCurrentInfestationRate(), c_timeGame);
        if ((TriggerIsEnabled(TriggerGetCurrent()) == false)) {
            break;
        }
        autoB353B04A_n = gf_MainLoopRepeat();
        for (autoB353B04A_i = 1; autoB353B04A_i <= autoB353B04A_n; autoB353B04A_i += 1) {
            if ((RandomInt(0, 2) > 0)) {
                gf_SpawnUnitGroup("Basic", true);
            }
            else {
                gf_SpawnUnitGroup("Assault Basic", true);
            }
        }
        auto97937D51_n = gf_MainLoopRepeat();
        for (auto97937D51_i = 1; auto97937D51_i <= auto97937D51_n; auto97937D51_i += 1) {
            lv_randomInt = RandomInt(0, PlayerGroupCount(lib90F7C81D_gv_players));
            autoCD0EE5BA_val = lv_randomInt;
            if (autoCD0EE5BA_val == 1) {
                gf_SpawnUnitGroup("Basic", true);
            }
            else if (autoCD0EE5BA_val == 2) {
                gf_SpawnUnitGroup("Assault Basic", true);
            }
            else if (autoCD0EE5BA_val == 3) {
                gf_SpawnUnitGroup("Variety", true);
            }
            else if (autoCD0EE5BA_val == 4) {
                gf_SpawnUnitGroup("Vermin", true);
            }
            else if (autoCD0EE5BA_val == 5) {
                gf_SpawnUnitGroup("Vermin Assault", true);
            }
            else if (autoCD0EE5BA_val == 6) {
                gf_SpawnUnitGroup("Assault Variety", true);
            }
            else if (autoCD0EE5BA_val == 7) {
                gf_SpawnUnitGroup("Ground Basic", true);
            }
            else if (autoCD0EE5BA_val == 8) {
                gf_SpawnUnitGroup("Special", true);
            }
            else if (autoCD0EE5BA_val == 9) {
                gf_SpawnUnitGroup("Special T3", true);
            }
            else if (autoCD0EE5BA_val == 10) {
                for (auto7CF9B5C9_i = 1; auto7CF9B5C9_i <= auto7CF9B5C9_n; auto7CF9B5C9_i += 1) {
                    gf_SpawnUnitGroup("Basic", true);
                }
            }
            else if (autoCD0EE5BA_val == 11) {
                for (auto2C8F6A96_i = 1; auto2C8F6A96_i <= auto2C8F6A96_n; auto2C8F6A96_i += 1) {
                    gf_SpawnUnitGroup("Assault Basic", true);
                }
            }
            else if (autoCD0EE5BA_val == 12) {
                for (auto163DAB83_i = 1; auto163DAB83_i <= auto163DAB83_n; auto163DAB83_i += 1) {
                    gf_SpawnUnitGroup("Basic", true);
                }
            }
            else {
                gf_SpawnUnitGroup("T3 Ground Variation", true);
            }
        }
        if ((RandomInt(0, CeilingI((IntToFixed(100) / Pow(1.33, IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)))))) == 0)) {
            if ((RandomInt(0, 3) > 0)) {
                gf_SpawnUnitGroup("Tier 1", true);
            }
            else {
                gf_SpawnUnitGroup("Tier 1 Air", true);
            }
        }
        lv_randomInt = 0;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnLoopMain_Init () {
    gt_SpawnLoopMain = TriggerCreate("gt_SpawnLoopMain_Func");
    TriggerEnable(gt_SpawnLoopMain, false);
    lib90F7C81D_gf_UndeadSpawnEvent(gt_SpawnLoopMain, "Main");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Loop Campaign
//--------------------------------------------------------------------------------------------------
bool gt_SpawnLoopCampaign_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomInt;
    int lv_chance;

    // Automatic Variable Declarations
    int auto79866170_n;
    int auto79866170_i;
    int autoFAAC3E56_val;
    int auto3F57A796_n;
    int auto3F57A796_i;
    const int auto73DC0F50_n = 2;
    int auto73DC0F50_i;

    // Variable Initialization
    lv_chance = 6;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib90F7C81D_gf_DifficultyisBetweenBounds(3, 5) == true)) {
        lv_chance = 4;
    }
    while (gf_LoopEnabled(lib90F7C81D_ge_LoopType_Campaign)) {
        Wait(gf_GetCurrentInfestationRate(), c_timeGame);
        gv_campaignReaperSpawned = false;
        if ((TriggerIsEnabled(TriggerGetCurrent()) == false)) {
            break;
        }
        auto79866170_n = gf_CampaignLoopRepeat();
        for (auto79866170_i = 1; auto79866170_i <= auto79866170_n; auto79866170_i += 1) {
            autoFAAC3E56_val = RandomInt(0, lib90F7C81D_gf_GameMode());
            if (autoFAAC3E56_val == 1) {
                gf_SpawnUnitGroup("Basic", true);
                gf_SpawnUnitGroup("Basic", true);
            }
            else if (autoFAAC3E56_val == 2) {
                gf_SpawnUnitGroup("Basic", true);
                gf_SpawnUnitGroup("Variety", true);
            }
            else if (autoFAAC3E56_val == 3) {
                gf_SpawnUnitGroup("Ground Basic", true);
                if ((RandomInt(0, 2) > 0)) {
                    gf_SpawnUnitGroup("Assault Basic", true);
                }
                else {
                    gf_SpawnUnitGroup("Fliers", true);
                }
            }
            else if (autoFAAC3E56_val == 4) {
                gf_SpawnUnitGroup("Basic", true);
                if ((RandomInt(0, 2) > 0)) {
                    gf_SpawnUnitGroup("Assault Basic", true);
                }
                else {
                    gf_SpawnUnitGroup("Fliers", true);
                }
            }
            else if (autoFAAC3E56_val == 5) {
                gf_SpawnUnitGroup("Ground Basic", true);
                gf_SpawnUnitGroup("Ground Assault Basic", true);
                gf_SpawnUnitGroup("Ground Assault Variation", true);
                gf_SpawnUnitGroup("Fliers", true);
            }
            else {
                gf_SpawnUnitGroup("Basic", true);
            }
        }
        auto3F57A796_n = gf_CampaignLoopRepeat();
        for (auto3F57A796_i = 1; auto3F57A796_i <= auto3F57A796_n; auto3F57A796_i += 1) {
            gf_SpawnUnitGroup(gf_CampaignLoopType(), true);
            if ((PlayerGroupCount(lib90F7C81D_gv_players) >= 10)) {
                for (auto73DC0F50_i = 1; auto73DC0F50_i <= auto73DC0F50_n; auto73DC0F50_i += 1) {
                    gf_SpawnUnitGroup(gf_CampaignLoopType(), true);
                }
            }
            else {
                gf_SpawnUnitGroup(gf_CampaignLoopType(), true);
            }
        }
        if ((RandomInt(0, CeilingI((IntToFixed(60) / Pow(1.16, IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)))))) == 0)) {
            if ((RandomInt(0, lv_chance) > 0)) {
                gf_SpawnUnitGroup("Tier 1", true);
            }
            else {
                gf_SpawnUnitGroup("Tier 1 Air", true);
            }
        }
        lv_randomInt = 0;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnLoopCampaign_Init () {
    gt_SpawnLoopCampaign = TriggerCreate("gt_SpawnLoopCampaign_Func");
    TriggerEnable(gt_SpawnLoopCampaign, false);
    lib90F7C81D_gf_UndeadSpawnEvent(gt_SpawnLoopCampaign, "Campaign");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Loop T3
//--------------------------------------------------------------------------------------------------
bool gt_SpawnLoopT3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoE1F18914_n;
    int autoE1F18914_i;

    // Actions
    if (!runActions) {
        return true;
    }

    while (gf_LoopEnabled(lib90F7C81D_ge_LoopType_T3)) {
        Wait(lib90F7C81D_gv_undeadSpawningTimers.lv_spawnLoopT3, c_timeGame);
        if ((TriggerIsEnabled(TriggerGetCurrent()) == false)) {
            break;
        }
        autoE1F18914_n = (1 + CeilingI((IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)) / IntToFixed(2))));
        for (autoE1F18914_i = 1; autoE1F18914_i <= autoE1F18914_n; autoE1F18914_i += 1) {
            if ((RandomInt(0, 2) > 0)) {
                gf_SpawnUnitGroup("Basic", true);
                if ((RandomInt(1, 6) == 5)) {
                    gf_SpawnUnitGroup("Assault Basic", true);
                }
            }
            else {
                gf_SpawnUnitGroup("Variety", true);
                if ((RandomInt(1, 4) == 3)) {
                    gf_SpawnUnitGroup("Assault Variety", true);
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnLoopT3_Init () {
    gt_SpawnLoopT3 = TriggerCreate("gt_SpawnLoopT3_Func");
    TriggerEnable(gt_SpawnLoopT3, false);
    lib90F7C81D_gf_UndeadSpawnEvent(gt_SpawnLoopT3, "T3");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Loop T1
//--------------------------------------------------------------------------------------------------
bool gt_SpawnLoopT1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto8A17F687_n;
    int auto8A17F687_i;

    // Actions
    if (!runActions) {
        return true;
    }

    while (gf_LoopEnabled(lib90F7C81D_ge_LoopType_T1)) {
        Wait(lib90F7C81D_gv_undeadSpawningTimers.lv_spawnLoopT1, c_timeGame);
        if ((lib90F7C81D_gv_gameOver == false) && (TriggerIsEnabled(TriggerGetCurrent()) == false)) {
            break;
        }
        auto8A17F687_n = (1 + CeilingI((IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)) / IntToFixed(6))));
        for (auto8A17F687_i = 1; auto8A17F687_i <= auto8A17F687_n; auto8A17F687_i += 1) {
            if ((RandomInt(0, 2) > 0)) {
                gf_SpawnUnitGroup("T1", true);
            }
            else {
                gf_SpawnUnitGroup("Flying T1", true);
                if ((RandomInt(1, 5) > 4)) {
                    gf_SpawnUnitGroup("T1", true);
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnLoopT1_Init () {
    gt_SpawnLoopT1 = TriggerCreate("gt_SpawnLoopT1_Func");
    TriggerEnable(gt_SpawnLoopT1, false);
    lib90F7C81D_gf_UndeadSpawnEvent(gt_SpawnLoopT1, "T1");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Loop Sanies
//--------------------------------------------------------------------------------------------------
bool gt_SpawnLoopSanies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_saniesGroup;
    unit lv_randomSanie;
    point lv_randomLoc;
    int lv_randomInt;

    // Automatic Variable Declarations
    int auto440BF96C_n;
    int auto440BF96C_i;
    int auto07FB45BC_n;
    int auto07FB45BC_i;
    int autoD629039D_val;
    const int auto38B28C66_n = 2;
    int auto38B28C66_i;
    const int autoFB0B489C_n = 2;
    int autoFB0B489C_i;
    const int autoBA5A2C9F_n = 2;
    int autoBA5A2C9F_i;
    int auto10640436_n;
    int auto10640436_i;

    // Variable Initialization
    lv_randomInt = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    while (gf_LoopEnabled(lib90F7C81D_ge_LoopType_Sanies)) {
        Wait(gf_GetCurrentInfestationRate(), c_timeGame);
        if ((TriggerIsEnabled(TriggerGetCurrent()) == false)) {
            break;
        }
        auto440BF96C_n = (1 + (2 * gv_missionSurvivalVariant1.lv_saniesKilled));
        for (auto440BF96C_i = 1; auto440BF96C_i <= auto440BF96C_n; auto440BF96C_i += 1) {
            gf_SpawnZombiesAtSanies();
        }
        auto07FB45BC_n = (1 + CeilingI((IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)) / IntToFixed(2))));
        for (auto07FB45BC_i = 1; auto07FB45BC_i <= auto07FB45BC_n; auto07FB45BC_i += 1) {
            lv_randomInt = RandomInt(0, PlayerGroupCount(lib90F7C81D_gv_players));
            autoD629039D_val = lv_randomInt;
            if (autoD629039D_val == 1) {
                gf_SpawnUnitGroup("T3 Ground Basic", true);
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/C3ED41F6"), gv_debug.lv_spawnMechanics);
            }
            else if (autoD629039D_val == 2) {
                gf_SpawnUnitGroup("T3 Ground Basic", true);
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/8A763283"), gv_debug.lv_spawnMechanics);
            }
            else if (autoD629039D_val == 3) {
                gf_SpawnUnitGroup("T3 Ground Variation", true);
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/7F67A218"), gv_debug.lv_spawnMechanics);
            }
            else if (autoD629039D_val == 4) {
                gf_SpawnUnitGroup("Special T3", true);
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/98A3DCB6"), gv_debug.lv_spawnMechanics);
            }
            else if (autoD629039D_val == 5) {
                gf_SpawnUnitGroup("Ground Assault Basic", true);
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/EDC45DB2"), gv_debug.lv_spawnMechanics);
            }
            else if (autoD629039D_val == 6) {
                gf_SpawnUnitGroup("Ground Assault Variation", true);
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/9DBAAB11"), gv_debug.lv_spawnMechanics);
            }
            else if (autoD629039D_val == 7) {
                gf_SpawnUnitGroup("Ground Basic", true);
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/3F43D06B"), gv_debug.lv_spawnMechanics);
            }
            else if (autoD629039D_val == 8) {
                gf_SpawnUnitGroup("Special T2", true);
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/AC70EDFA"), gv_debug.lv_spawnMechanics);
            }
            else if (autoD629039D_val == 9) {
                gf_SpawnUnitGroup("Special T3", true);
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/3035385B"), gv_debug.lv_spawnMechanics);
            }
            else if (autoD629039D_val == 10) {
                for (auto38B28C66_i = 1; auto38B28C66_i <= auto38B28C66_n; auto38B28C66_i += 1) {
                    gf_SpawnUnitGroup("T3 Ground Basic", true);
                }
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/EE81451C"), gv_debug.lv_spawnMechanics);
            }
            else if (autoD629039D_val == 11) {
                for (autoFB0B489C_i = 1; autoFB0B489C_i <= autoFB0B489C_n; autoFB0B489C_i += 1) {
                    gf_SpawnUnitGroup("T3 Ground Variation", true);
                }
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/9C7ECA3B"), gv_debug.lv_spawnMechanics);
            }
            else if (autoD629039D_val == 12) {
                for (autoBA5A2C9F_i = 1; autoBA5A2C9F_i <= autoBA5A2C9F_n; autoBA5A2C9F_i += 1) {
                    gf_SpawnUnitGroup("Ground Basic", true);
                }
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/7512CA11"), gv_debug.lv_spawnMechanics);
            }
            else {
                gf_SpawnUnitGroup("Special T3", true);
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/7CBB0499"), gv_debug.lv_spawnMechanics);
            }
        }
        if ((gv_missionSurvivalVariant1.lv_saniesKilled > 4) && (gv_missionSurvivalVariant1.lv_saniesKilled < 9) && (RandomInt(0, CeilingI((IntToFixed(100) / Pow(1.25, IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)))))) == 0)) {
            if ((RandomInt(0, 3) > 0)) {
                gf_SpawnUnitGroup("T1", true);
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/94FEBE09"), gv_debug.lv_spawnMechanics);
            }
            else {
                gf_SpawnUnitGroup("Flying T1", true);
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/934CD6E1"), gv_debug.lv_spawnMechanics);
            }
        }
        if ((gv_missionSurvivalVariant1.lv_saniesKilled >= 9) && (RandomInt(0, CeilingI((IntToFixed(100) / Pow(1.25, IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)))))) < 2)) {
            if ((RandomInt(0, 3) > 0)) {
                gf_SpawnUnitGroup("T1", true);
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/522B8323"), gv_debug.lv_spawnMechanics);
            }
            else {
                gf_SpawnUnitGroup("Flying T1", true);
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/6FFE71B0"), gv_debug.lv_spawnMechanics);
            }
        }
        if ((RandomInt(0, 4) > 0)) {
            gf_SpawnUnitGroup("Fliers", true);
        }
        auto10640436_n = (1 + CeilingI((IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)) / IntToFixed(3))));
        for (auto10640436_i = 1; auto10640436_i <= auto10640436_n; auto10640436_i += 1) {
            lv_saniesGroup = gv_missionSurvivalVariant1.lv_saniesGroup;
            if ((UnitGetType(gv_missionSurvivalVariant1.lv_saniesCurrentTarget) == "Sanies")) {
                UnitGroupRemove(lv_saniesGroup, gv_missionSurvivalVariant1.lv_saniesCurrentTarget);
            }
            lv_randomSanie = UnitGroupRandomUnit(lv_saniesGroup, c_unitCountAlive);
            if ((UnitGetType(lv_randomSanie) != "Sanies")) {
                lv_randomLoc = RegionGetCenter(gv_t2Ground[RandomInt(1, 15)]);
            }
            else {
                lv_randomLoc = UnitGetPosition(lv_randomSanie);
            }
            if ((RandomInt(0, (1 + gv_missionSurvivalVariant1.lv_saniesCoreMax)) < gv_missionSurvivalVariant1.lv_saniesKilled)) {
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, StringExternal("Param/Value/3353A07A"), gv_debug.lv_spawnMechanics);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Cicadis", 0, 14, lv_randomLoc);
                UnitGroupAddUnitGroup(lib90F7C81D_gv_undeadGroup, UnitLastCreatedGroup());
                UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(lib90F7C81D_gv_undeadTargetGroup, c_unitCountAlive))), c_orderQueueReplace);
            }
        }
        lv_randomInt = 1;
        lv_saniesGroup = null;
        lv_randomSanie = null;
        lv_randomLoc = null;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnLoopSanies_Init () {
    gt_SpawnLoopSanies = TriggerCreate("gt_SpawnLoopSanies_Func");
    TriggerEnable(gt_SpawnLoopSanies, false);
    lib90F7C81D_gf_UndeadSpawnEvent(gt_SpawnLoopSanies, "Sanies");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Loop Boss Rush
//--------------------------------------------------------------------------------------------------
bool gt_SpawnLoopBossRush_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_temppoint;
    int lv_randominteger;

    // Automatic Variable Declarations
    int auto4B22EB7D_n;
    int auto4B22EB7D_i;
    int auto8C257F40_val;
    const int autoF36A0F20_n = 2;
    int autoF36A0F20_i;
    const int autoE0E30BDC_n = 2;
    int autoE0E30BDC_i;
    const int auto30AC1ABA_n = 2;
    int auto30AC1ABA_i;

    // Variable Initialization
    lv_temppoint = RegionRandomPoint(gv_bossRush.lv_currentSpawnRegion);
    lv_randominteger = RandomInt(0, PlayerGroupCount(lib90F7C81D_gv_players));

    // Actions
    if (!runActions) {
        return true;
    }

    while (gf_LoopEnabled(lib90F7C81D_ge_LoopType_BossRush)) {
        Wait(lib90F7C81D_gv_undeadSpawningTimers.lv_spawnLoopBossRush, c_timeGame);
        if ((TriggerIsEnabled(TriggerGetCurrent()) == false)) {
            break;
        }
        auto4B22EB7D_n = (1 + CeilingI((IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)) / IntToFixed(2))));
        for (auto4B22EB7D_i = 1; auto4B22EB7D_i <= auto4B22EB7D_n; auto4B22EB7D_i += 1) {
            lv_temppoint = RegionRandomPoint(gv_bossRush.lv_currentSpawnRegion);
            while ((gf_CheckPathability(lv_temppoint) == false)) {
                lv_temppoint = RegionRandomPoint(gv_bossRush.lv_currentSpawnRegion);
            }
            lv_randominteger = RandomInt(0, PlayerGroupCount(lib90F7C81D_gv_players));
            auto8C257F40_val = lv_randominteger;
            if (auto8C257F40_val == 1) {
                gf_SpawnUnitGroupAtLocation("T3 Ground Basic", lv_temppoint);
                TextExpressionSetToken("Param/Expression/049F18B0", "A", IntToText(lv_randominteger));
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, TextExpressionAssemble("Param/Expression/049F18B0"), gv_debug.lv_spawnMechanics);
            }
            else if (auto8C257F40_val == 2) {
                gf_SpawnUnitGroupAtLocation("T3 Ground Basic", lv_temppoint);
                TextExpressionSetToken("Param/Expression/28679350", "A", IntToText(lv_randominteger));
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, TextExpressionAssemble("Param/Expression/28679350"), gv_debug.lv_spawnMechanics);
            }
            else if (auto8C257F40_val == 3) {
                gf_SpawnUnitGroupAtLocation("Ground Assault Variation", lv_temppoint);
                TextExpressionSetToken("Param/Expression/869A9CD2", "A", IntToText(lv_randominteger));
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, TextExpressionAssemble("Param/Expression/869A9CD2"), gv_debug.lv_spawnMechanics);
            }
            else if (auto8C257F40_val == 4) {
                gf_SpawnUnitGroupAtLocation("Special T3", lv_temppoint);
                TextExpressionSetToken("Param/Expression/E578C87E", "A", IntToText(lv_randominteger));
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, TextExpressionAssemble("Param/Expression/E578C87E"), gv_debug.lv_spawnMechanics);
            }
            else if (auto8C257F40_val == 5) {
                gf_SpawnUnitGroupAtLocation("Ground Assault Basic", lv_temppoint);
                TextExpressionSetToken("Param/Expression/C640BD54", "A", IntToText(lv_randominteger));
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, TextExpressionAssemble("Param/Expression/C640BD54"), gv_debug.lv_spawnMechanics);
            }
            else if (auto8C257F40_val == 6) {
                gf_SpawnUnitGroupAtLocation("Ground Assault Variation", lv_temppoint);
                TextExpressionSetToken("Param/Expression/F5912E75", "A", IntToText(lv_randominteger));
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, TextExpressionAssemble("Param/Expression/F5912E75"), gv_debug.lv_spawnMechanics);
            }
            else if (auto8C257F40_val == 7) {
                gf_SpawnUnitGroupAtLocation("Ground Basic", lv_temppoint);
                TextExpressionSetToken("Param/Expression/6A5FAF97", "A", IntToText(lv_randominteger));
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, TextExpressionAssemble("Param/Expression/6A5FAF97"), gv_debug.lv_spawnMechanics);
            }
            else if (auto8C257F40_val == 8) {
                gf_SpawnUnitGroupAtLocation("Special T2", lv_temppoint);
                TextExpressionSetToken("Param/Expression/22850608", "A", IntToText(lv_randominteger));
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, TextExpressionAssemble("Param/Expression/22850608"), gv_debug.lv_spawnMechanics);
            }
            else if (auto8C257F40_val == 9) {
                gf_SpawnUnitGroupAtLocation("Special T3", lv_temppoint);
                TextExpressionSetToken("Param/Expression/6512EF4B", "A", IntToText(lv_randominteger));
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, TextExpressionAssemble("Param/Expression/6512EF4B"), gv_debug.lv_spawnMechanics);
            }
            else if (auto8C257F40_val == 10) {
                for (autoF36A0F20_i = 1; autoF36A0F20_i <= autoF36A0F20_n; autoF36A0F20_i += 1) {
                    gf_SpawnUnitGroupAtLocation("T3 Ground Basic", lv_temppoint);
                }
                TextExpressionSetToken("Param/Expression/DE4EF45A", "A", IntToText(lv_randominteger));
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, TextExpressionAssemble("Param/Expression/DE4EF45A"), gv_debug.lv_spawnMechanics);
            }
            else if (auto8C257F40_val == 11) {
                for (autoE0E30BDC_i = 1; autoE0E30BDC_i <= autoE0E30BDC_n; autoE0E30BDC_i += 1) {
                    gf_SpawnUnitGroupAtLocation("T3 Ground Variation", lv_temppoint);
                }
                TextExpressionSetToken("Param/Expression/223CC4B9", "A", IntToText(lv_randominteger));
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, TextExpressionAssemble("Param/Expression/223CC4B9"), gv_debug.lv_spawnMechanics);
            }
            else if (auto8C257F40_val == 12) {
                for (auto30AC1ABA_i = 1; auto30AC1ABA_i <= auto30AC1ABA_n; auto30AC1ABA_i += 1) {
                    gf_SpawnUnitGroupAtLocation("Ground Basic", lv_temppoint);
                }
                TextExpressionSetToken("Param/Expression/06AC9D66", "A", IntToText(lv_randominteger));
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, TextExpressionAssemble("Param/Expression/06AC9D66"), gv_debug.lv_spawnMechanics);
            }
            else {
                gf_SpawnUnitGroupAtLocation("Special T3", lv_temppoint);
                TextExpressionSetToken("Param/Expression/7458D29A", "A", IntToText(lv_randominteger));
                TriggerDebugOutput(gv_debug.lv_spawnMechanicsType, TextExpressionAssemble("Param/Expression/7458D29A"), gv_debug.lv_spawnMechanics);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnLoopBossRush_Init () {
    gt_SpawnLoopBossRush = TriggerCreate("gt_SpawnLoopBossRush_Func");
    TriggerEnable(gt_SpawnLoopBossRush, false);
    lib90F7C81D_gf_UndeadSpawnEvent(gt_SpawnLoopBossRush, "BossRush");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Loop TCP Containment
//--------------------------------------------------------------------------------------------------
bool gt_SpawnLoopTCPContainment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomRegion;
    region[3] lv_regionList;
    int lv_scriptedSpawn;
    int lv_index;
    bool lv_t1;

    // Automatic Variable Declarations
    const int auto2743E9AF_ae = 2;
    const int auto2743E9AF_ai = 1;
    int autoC510046D_n;
    int autoC510046D_i;
    const int auto3E6633C3_ae = 2;
    const int auto3E6633C3_ai = 1;
    const int auto960F1B5C_ae = 2;
    const int auto960F1B5C_ai = 1;
    const int autoF026847D_ae = 2;
    const int autoF026847D_ai = 1;
    const int auto1D2A1E4C_ae = 2;
    const int auto1D2A1E4C_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (gf_LoopEnabled(lib90F7C81D_ge_LoopType_TCPContainment)) {
        Wait(lib90F7C81D_gv_undeadSpawningTimers.lv_spawnLoopTCPContainment, c_timeGame);
        if ((TriggerIsEnabled(TriggerGetCurrent()) == false)) {
            break;
        }
        lv_randomRegion = RandomInt(0, 2);
        lv_regionList[0] = RegionFromId(6);
        lv_regionList[1] = RegionFromId(3);
        lv_regionList[2] = RegionFromId(19);
        if ((lib90F7C81D_gf_DifficultyisGOE(3) == true) && (TimerGetElapsed(lib90F7C81D_gv_missiontimer) >= 160.0) && (lv_t1 == false)) {
            lv_t1 = true;
            if ((RandomInt(0, 1) == 1)) {
                lv_index = 0;
                for ( ; ( (auto2743E9AF_ai >= 0 && lv_index <= auto2743E9AF_ae) || (auto2743E9AF_ai < 0 && lv_index >= auto2743E9AF_ae) ) ; lv_index += auto2743E9AF_ai ) {
                    if ((gv_prologue.lv_mission02TCPFailed[lv_index] == false)) {
                        gf_SpawnUnitsAtLocation("Gourmand", RegionRandomPoint(lv_regionList[lv_index]), 1);
                        break;
                    }
                }
            }
        }
        autoC510046D_n = (1 + CeilingI((IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)) / IntToFixed(4))));
        for (autoC510046D_i = 1; autoC510046D_i <= autoC510046D_n; autoC510046D_i += 1) {
            lv_randomRegion = RandomInt(0, 2);
            lv_scriptedSpawn = RandomInt(1, 10);
            if ((lv_scriptedSpawn <= 1)) {
                lv_index = 0;
                for ( ; ( (auto3E6633C3_ai >= 0 && lv_index <= auto3E6633C3_ae) || (auto3E6633C3_ai < 0 && lv_index >= auto3E6633C3_ae) ) ; lv_index += auto3E6633C3_ai ) {
                    if ((gv_prologue.lv_mission02TCPFailed[lv_index] == false)) {
                        gf_SpawnUnitGroupAtLocation("Variety", RegionRandomPoint(lv_regionList[lv_index]));
                        if ((lib90F7C81D_gf_GameMode() >= 3) && (RandomInt(0, 2) == 1)) {
                            gf_SpawnUnitGroupAtLocation("Special", RegionRandomPoint(lv_regionList[lv_index]));
                        }
                    }
                }
            }
            else if ((lv_scriptedSpawn >= 2) && (lv_scriptedSpawn <= 3)) {
                lv_index = 0;
                for ( ; ( (auto960F1B5C_ai >= 0 && lv_index <= auto960F1B5C_ae) || (auto960F1B5C_ai < 0 && lv_index >= auto960F1B5C_ae) ) ; lv_index += auto960F1B5C_ai ) {
                    if ((gv_prologue.lv_mission02TCPFailed[lv_index] == false)) {
                        gf_SpawnUnitGroupAtLocation("Basic Air", RegionRandomPoint(lv_regionList[lv_index]));
                        if ((lib90F7C81D_gf_GameMode() >= 3) && (RandomInt(0, 2) == 1)) {
                            gf_SpawnUnitGroupAtLocation("Special", RegionRandomPoint(lv_regionList[lv_index]));
                        }
                    }
                }
            }
            else if ((lv_scriptedSpawn >= 4) && (lv_scriptedSpawn <= 6)) {
                lv_index = 0;
                for ( ; ( (autoF026847D_ai >= 0 && lv_index <= autoF026847D_ae) || (autoF026847D_ai < 0 && lv_index >= autoF026847D_ae) ) ; lv_index += autoF026847D_ai ) {
                    if ((gv_prologue.lv_mission02TCPFailed[lv_index] == false)) {
                        gf_SpawnUnitGroupAtLocation("Vermin", RegionRandomPoint(lv_regionList[lv_index]));
                        if ((lib90F7C81D_gf_GameMode() >= 3) && (RandomInt(0, 2) == 1)) {
                            gf_SpawnUnitGroupAtLocation("Special", RegionRandomPoint(lv_regionList[lv_index]));
                        }
                    }
                }
            }
            else if (true) {
                lv_index = 0;
                for ( ; ( (auto1D2A1E4C_ai >= 0 && lv_index <= auto1D2A1E4C_ae) || (auto1D2A1E4C_ai < 0 && lv_index >= auto1D2A1E4C_ae) ) ; lv_index += auto1D2A1E4C_ai ) {
                    if ((gv_prologue.lv_mission02TCPFailed[lv_index] == false)) {
                        gf_SpawnUnitGroupAtLocation("Basic", RegionRandomPoint(lv_regionList[lv_index]));
                        gf_SpawnUnitGroupAtLocation("Basic", RegionRandomPoint(lv_regionList[lv_index]));
                        if ((lib90F7C81D_gf_GameMode() >= 3) && (RandomInt(0, 2) == 1)) {
                            gf_SpawnUnitGroupAtLocation("Special", RegionRandomPoint(lv_regionList[lv_index]));
                        }
                    }
                }
            }
        }
        lv_regionList[0] = null;
        lv_regionList[1] = null;
        lv_regionList[2] = null;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpawnLoopTCPContainment_Init () {
    gt_SpawnLoopTCPContainment = TriggerCreate("gt_SpawnLoopTCPContainment_Func");
    TriggerEnable(gt_SpawnLoopTCPContainment, false);
    lib90F7C81D_gf_UndeadSpawnEvent(gt_SpawnLoopTCPContainment, "TCPContainment");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Plague Spawn Loop
//--------------------------------------------------------------------------------------------------
bool gt_PlagueSpawnLoop_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoBC0DC892_n = 2;
    int autoBC0DC892_i;

    // Actions
    if (!runActions) {
        return true;
    }

    while (gf_LoopEnabled(lib90F7C81D_ge_LoopType_PlagueSpawns)) {
        Wait(lib90F7C81D_gv_undeadSpawningTimers.lv_spawnLoopPlagueSpawns, c_timeGame);
        if ((TriggerIsEnabled(TriggerGetCurrent()) == false)) {
            break;
        }
        for (autoBC0DC892_i = 1; autoBC0DC892_i <= autoBC0DC892_n; autoBC0DC892_i += 1) {
            gf_SpawnUnitGroup("Basic", true);
            gf_SpawnUnitGroup("Basic Air", true);
            gf_SpawnUnitGroup("Variety", true);
            gf_SpawnUnitGroup("Vermin", true);
            gf_SpawnUnitGroup("Special", true);
            if ((RandomInt(0, 6) == 1)) {
                gf_SpawnUnitGroup("Tier 1 Air", true);
            }
            else {
                gf_SpawnUnitGroup("Tier 1", true);
            }
        }
        gf_SpawnUnitGroup("Ranged", true);
        gf_SpawnUnitGroup("Ranged Air", true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlagueSpawnLoop_Init () {
    gt_PlagueSpawnLoop = TriggerCreate("gt_PlagueSpawnLoop_Func");
    TriggerEnable(gt_PlagueSpawnLoop, false);
    lib90F7C81D_gf_UndeadSpawnEvent(gt_PlagueSpawnLoop, "PlagueSpawns");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Campaign RA Spawn Loop
//--------------------------------------------------------------------------------------------------
bool gt_CampaignRASpawnLoop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_spawnLocation;
    int lv_loopCount;
    unitgroup lv_rASquad;

    // Automatic Variable Declarations
    int auto88460244_n;
    int auto88460244_i;

    // Variable Initialization
    lv_spawnLocation = RegionFromId(204);
    lv_rASquad = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (gf_LoopEnabled(lib90F7C81D_ge_LoopType_CampaignRA)) {
        Wait(lib90F7C81D_gv_undeadSpawningTimers.lv_spawnLoopCampaignRASpawns, c_timeGame);
        if ((TriggerIsEnabled(TriggerGetCurrent()) == false)) {
            break;
        }
        if ((TriggerIsEnabled(gt_TheOldCrewEnd) == true) && (lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (1) || lib90F7C81D_gf_DifficultyFromIndex(lib90F7C81D_gv_gamemode) == (2))) {
            gv_chapter_3.lv_rASquadSize = RandomInt(2, 3);
        }
        auto88460244_n = gv_chapter_3.lv_rASquadCount;
        for (auto88460244_i = 1; auto88460244_i <= auto88460244_n; auto88460244_i += 1) {
            if ((TriggerIsEnabled(gt_TheOldCrewEnd) == true)) {
                lv_spawnLocation = RegionFromId(204);
                lv_rASquad = gf_SpawnPMCCampaign(gv_chapter_3.lv_rASquadSize, lv_spawnLocation);
                if ((UnitGroupCount(lib90F7C81D_gv_heroesGroup, c_unitCountAlive) >= 1)) {
                    if ((RandomInt(0, 1) == 1)) {
                        UnitGroupIssueOrder(lv_rASquad, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(208))), c_orderQueueReplace);
                        UnitGroupIssueOrder(lv_rASquad, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_chapter_3.lv_rATarget)), c_orderQueueAddToEnd);
                    }
                    else {
                        UnitGroupIssueOrder(lv_rASquad, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_chapter_3.lv_rATarget)), c_orderQueueReplace);
                    }
                    UnitGroupAddUnitGroup(lib90F7C81D_gv_rAGroup, lv_rASquad);
                    RefreshUnitGroup(lv_rASquad);
                }
                Wait(2.0, c_timeGame);
            }
            else if ((TriggerIsEnabled(gt_ForTheRebellionEnd) == true)) {
                if ((RandomInt(0, 1) == 1)) {
                    lv_spawnLocation = RegionFromId(45);
                }
                else {
                    lv_spawnLocation = RegionFromId(202);
                }
                lv_rASquad = gf_SpawnPMCCampaign(gv_chapter_3.lv_rASquadSize, lv_spawnLocation);
                if ((UnitGroupCount(lib90F7C81D_gv_heroesGroup, c_unitCountAlive) >= 1)) {
                    UnitGroupIssueOrder(lv_rASquad, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(264))), c_orderQueueReplace);
                    UnitGroupIssueOrder(lv_rASquad, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_chapter_3.lv_rATarget)), c_orderQueueAddToEnd);
                    UnitGroupAddUnitGroup(lib90F7C81D_gv_rAGroup, lv_rASquad);
                    RefreshUnitGroup(lv_rASquad);
                }
                Wait(0.125, c_timeGame);
            }
            else if ((TriggerIsEnabled(gt_TanksALotEnd) == true)) {
                lv_spawnLocation = RegionFromId(24);
                lv_rASquad = gf_SpawnPMCCampaign(gv_chapter_3.lv_rASquadSize, lv_spawnLocation);
                if ((UnitGroupCount(lib90F7C81D_gv_heroesGroup, c_unitCountAlive) >= 1)) {
                    UnitGroupIssueOrder(lv_rASquad, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(264))), c_orderQueueReplace);
                    UnitGroupIssueOrder(lv_rASquad, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(gv_chapter_3.lv_rATarget)), c_orderQueueAddToEnd);
                    UnitGroupAddUnitGroup(lib90F7C81D_gv_rAGroup, lv_rASquad);
                    RefreshUnitGroup(lv_rASquad);
                }
                Wait(0.125, c_timeGame);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CampaignRASpawnLoop_Init () {
    gt_CampaignRASpawnLoop = TriggerCreate("gt_CampaignRASpawnLoop_Func");
    TriggerEnable(gt_CampaignRASpawnLoop, false);
    lib90F7C81D_gf_UndeadSpawnEvent(gt_CampaignRASpawnLoop, "CampaignRA");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Undead AIThink
//--------------------------------------------------------------------------------------------------
bool gt_UndeadAIThink_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unit lv_target;

    // Automatic Variable Declarations
    unitgroup auto3D748D55_g;
    int auto3D748D55_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lib90F7C81D_gv_gameOver == false)) {
        Wait(30.0, c_timeGame);
        if ((UnitGroupCount(lib90F7C81D_gv_heroesGroup, c_unitCountAlive) >= 1) && (UnitGroupCount(lib90F7C81D_gv_undeadGroup, c_unitCountAlive) >= 1)) {
            auto3D748D55_g = lib90F7C81D_gv_undeadGroup;
            auto3D748D55_u = UnitGroupCount(auto3D748D55_g, c_unitCountAll);
            for (;; auto3D748D55_u -= 1) {
                lv_unit = UnitGroupUnitFromEnd(auto3D748D55_g, auto3D748D55_u);
                if (lv_unit == null) { break; }
                lv_target = UnitGroupRandomUnit(lib90F7C81D_gv_undeadTargetGroup, c_unitCountAlive);
                if ((UnitTestState(lv_target, c_unitStateCloaked) == true) && (RandomInt(0, 3) == 1)) {
                    UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(lv_unit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_target)), c_orderQueueReplace);
                }
                lv_target = null;
                Wait(0.0625, c_timeGame);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UndeadAIThink_Init () {
    gt_UndeadAIThink = TriggerCreate("gt_UndeadAIThink_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scale Difficulty
//--------------------------------------------------------------------------------------------------
bool gt_ScaleDifficulty_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_players;
    fixed lv_mod;

    // Automatic Variable Declarations
    playergroup auto596C1055_g;
    int auto596C1055_var;
    playergroup auto5618834F_g;
    int auto5618834F_var;

    // Variable Initialization
    lv_players = PlayerGroupCount(lib90F7C81D_gv_players);

    // Conditions
    if (testConds) {
        if (!((lib90F7C81D_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_gameStart == true)) {
        gv_scaleLevel += 1;
        if ((lv_players > 6)) {
            if ((gv_scaleLevel == 1)) {
                lv_mod = ((lv_players - 6.0) * 15.0);
                gf_ModifyUndeadSupplyLimit(lv_mod, c_playerPropOperAdd);
            }
            else {
                gf_ModifyUndeadSupplyLimit(15.0, c_playerPropOperSubtract);
            }
        }
        else {
            if ((PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) > 135)) {
                gf_ModifyUndeadSupplyLimit(135.0, c_playerPropOperSetTo);
            }
        }
        if ((TriggerIsEnabled(gt_SpawnLoopT3) == true)) {
            if ((PlayerGroupCount(lib90F7C81D_gv_players) >= 5)) {
                lib90F7C81D_gf_SetSpawnLoopTimer(lib90F7C81D_ge_LoopType_T3, (120.0 - (IntToFixed(PlayerGroupCount(lib90F7C81D_gv_players)) * 2.5)));
            }
            else {
                gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_T3, false);
            }
        }
    }
    else {
        if ((gv_modeSelection.lv_votesRemaining > 0) && (gv_modeSelection.lv_votingFinished == false)) {
            auto596C1055_g = lib90F7C81D_gv_scoreScreenPlayers;
            auto596C1055_var = -1;
            while (true) {
                auto596C1055_var = PlayerGroupNextPlayer(auto596C1055_g, auto596C1055_var);
                if (auto596C1055_var < 0) { break; }
                if ((lib90F7C81D_gv_playerLeftGame[auto596C1055_var] == true) && (gv_modeSelection.lv_playerVoted[auto596C1055_var] == false) && (gv_modeSelection.lv_voteRemoved[auto596C1055_var] == false)) {
                    gv_modeSelection.lv_voteRemoved[auto596C1055_var] = true;
                    gv_modeSelection.lv_votesRemaining -= 1;
                    libNtve_gf_SetDialogItemText(gv_modeSelection.lv_votesRemainingLabel, IntToText(gv_modeSelection.lv_votesRemaining), PlayerGroupAll());
                    gf_UpdateVotesRemainingTooltip();
                }

            }
            if ((gv_modeSelection.lv_votesRemaining == 0) && (gv_modeSelection.lv_votingFinished == false)) {
                gv_modeSelection.lv_votingFinished = true;
                TriggerEnable(gt_ModeSelection, false);
                TriggerEnable(gt_VoteTimerTimeout, false);
                TriggerEnable(gt_ModeSelection, false);
                gf_TallyVotes();
            }
        }
        if ((gv_gameStart == false)) {
            auto5618834F_g = lib90F7C81D_gv_scoreScreenPlayers;
            auto5618834F_var = -1;
            while (true) {
                auto5618834F_var = PlayerGroupNextPlayer(auto5618834F_g, auto5618834F_var);
                if (auto5618834F_var < 0) { break; }
                if ((lib90F7C81D_gv_playerLeftGame[auto5618834F_var] == true)) {
                    DialogControlSetAnimationState(gv_menu.lv_notReadySlots[auto5618834F_var], PlayerGroupAll(), "Player", "NotSelecting");
                    DialogControlSendAnimationEvent(lib90F7C81D_gv_sDPlayerFrame[auto5618834F_var], PlayerGroupAll(), "Out");
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ScaleDifficulty_Init () {
    gt_ScaleDifficulty = TriggerCreate("gt_ScaleDifficulty_Func");
    lib90F7C81D_gf_GameEvent(gt_ScaleDifficulty, "ScaleDifficulty");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force Remove Undead Units
//--------------------------------------------------------------------------------------------------
bool gt_ForceRemoveUndeadUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto6AC07B54_n = 5;
    int auto6AC07B54_i;
    unitgroup auto8CF605CB_g;
    int auto8CF605CB_u;
    unit auto8CF605CB_var;
    unitgroup auto7D132C9E_g;
    int auto7D132C9E_u;
    unit auto7D132C9E_var;

    // Conditions
    if (testConds) {
        if (!(((gv_pauseSpawning == true) || (lib90F7C81D_gv_gameOver == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    for (auto6AC07B54_i = 1; auto6AC07B54_i <= auto6AC07B54_n; auto6AC07B54_i += 1) {
        if ((UnitGroupCount(lib90F7C81D_gv_undeadGroup, c_unitCountAlive) >= 1)) {
            auto8CF605CB_g = lib90F7C81D_gv_undeadGroup;
            auto8CF605CB_u = UnitGroupCount(auto8CF605CB_g, c_unitCountAll);
            for (;; auto8CF605CB_u -= 1) {
                auto8CF605CB_var = UnitGroupUnitFromEnd(auto8CF605CB_g, auto8CF605CB_u);
                if (auto8CF605CB_var == null) { break; }
                UnitRemove(auto8CF605CB_var);
            }
        }
        if ((UnitGroupCount(lib90F7C81D_gv_rAGroup, c_unitCountAlive) >= 1)) {
            auto7D132C9E_g = lib90F7C81D_gv_rAGroup;
            auto7D132C9E_u = UnitGroupCount(auto7D132C9E_g, c_unitCountAll);
            for (;; auto7D132C9E_u -= 1) {
                auto7D132C9E_var = UnitGroupUnitFromEnd(auto7D132C9E_g, auto7D132C9E_u);
                if (auto7D132C9E_var == null) { break; }
                UnitRemove(auto7D132C9E_var);
            }
        }
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ForceRemoveUndeadUnits_Init () {
    gt_ForceRemoveUndeadUnits = TriggerCreate("gt_ForceRemoveUndeadUnits_Func");
    TriggerEnable(gt_ForceRemoveUndeadUnits, false);
    TriggerAddEventGeneric(gt_ForceRemoveUndeadUnits, "Force Remove Undead Units");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dev Commands
//--------------------------------------------------------------------------------------------------
bool gt_DevCommands_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_message;
    int lv_user;
    int lv_index;
    string lv_ailmentInstance;

    // Automatic Variable Declarations
    string auto0C951E18_val;
    string auto204D4F00_val;
    string auto5BC52D61_val;
    string auto29A70942_val;
    unitgroup auto90498B84_g;
    int auto90498B84_u;
    unit auto90498B84_var;
    unitgroup autoC0FBB20A_g;
    int autoC0FBB20A_u;
    unit autoC0FBB20A_var;
    playergroup auto10E06FC8_g;
    int auto10E06FC8_var;
    unitgroup auto1A35B0FE_g;
    int auto1A35B0FE_u;
    unit auto1A35B0FE_var;
    unitgroup autoAFBC5748_g;
    int autoAFBC5748_u;
    unit autoAFBC5748_var;
    unitgroup autoA71A477F_g;
    int autoA71A477F_u;
    unit autoA71A477F_var;
    unitgroup autoD96D01A7_g;
    int autoD96D01A7_u;
    unit autoD96D01A7_var;
    unitgroup auto11D7CE4D_g;
    int auto11D7CE4D_u;
    unit auto11D7CE4D_var;
    string autoE5DFAAD7_userType;
    int autoE5DFAAD7_i;
    playergroup auto166D30EE_g;
    int auto166D30EE_var;
    unitgroup auto24F1D395_g;
    int auto24F1D395_u;
    unit auto24F1D395_var;

    // Variable Initialization
    lv_message = EventChatMessage(false);
    lv_user = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(lib90F7C81D_gf_DevHandles(PlayerHandle(EventPlayer())))) {
            return false;
        }

        if (!((StringEqual(StringWord(lv_message, 1), "dev", c_stringNoCase) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0C951E18_val = StringCase(StringWord(lv_message, 2), true);
    if (auto0C951E18_val == "BO4") {
        if ((StringToInt(StringWord(lv_message, 3)) < 13) && (StringToInt(StringWord(lv_message, 3)) >= 0)) {
            UISetCursorVisible(PlayerGroupSingle(StringToInt(StringWord(lv_message, 3))), false);
            DialogControlSendAnimationEvent(lib90F7C81D_gv_bsod, PlayerGroupSingle(StringToInt(StringWord(lv_message, 3))), "BO4");
            Wait(8.0, c_timeGame);
            UISetCursorVisible(PlayerGroupSingle(StringToInt(StringWord(lv_message, 3))), true);
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/3AE93CB9"));
        }
    }
    else if (auto0C951E18_val == "C") {
        if ((StringToInt(StringWord(lv_message, 3)) < 16) && (StringToInt(StringWord(lv_message, 3)) >= 0)) {
            if ((PlayerGetAlliance(StringToInt(StringWord(lv_message, 3)), c_allianceIdControl, lv_user) == true)) {
                PlayerSetAlliance(StringToInt(StringWord(lv_message, 3)), c_allianceIdVision, lv_user, false);
                PlayerSetAlliance(StringToInt(StringWord(lv_message, 3)), c_allianceIdControl, lv_user, false);
            }
            else {
                PlayerSetAlliance(StringToInt(StringWord(lv_message, 3)), c_allianceIdVision, lv_user, true);
                PlayerSetAlliance(StringToInt(StringWord(lv_message, 3)), c_allianceIdControl, lv_user, true);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/69ECE909"));
        }
    }
    else if (auto0C951E18_val == "DEBUG") {
        auto204D4F00_val = StringCase(StringWord(lv_message, 3), true);
        if (auto204D4F00_val == "ON") {
            TriggerDebugWindowOpen(true);
        }
        else if (auto204D4F00_val == "GE") {
            auto5BC52D61_val = StringCase(StringWord(lv_message, 4), true);
            if (auto5BC52D61_val == "OFF") {
                gv_debug.lv_gameEvents = false;
                UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaSubtitle, StringExternal("Param/Value/3B1D8449"));
            }
            else if (auto5BC52D61_val == "ON") {
                gv_debug.lv_gameEvents = true;
                UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaSubtitle, StringExternal("Param/Value/A78AB291"));
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/9D2CDE51"));
            }
        }
        else if (auto204D4F00_val == "SM") {
            auto29A70942_val = StringCase(StringWord(lv_message, 4), true);
            if (auto29A70942_val == "OFF") {
                gv_debug.lv_spawnMechanics = false;
                UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaSubtitle, StringExternal("Param/Value/A049E67F"));
            }
            else if (auto29A70942_val == "ON") {
                gv_debug.lv_spawnMechanics = true;
                UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaSubtitle, StringExternal("Param/Value/B6B66C44"));
            }
            else {
                UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/18EEEC81"));
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/28F942AA"));
        }
    }
    else if (auto0C951E18_val == "ALL") {
        DialogControlSetAnimationState(gv_menu.lv_mOSButtonsContainer, PlayerGroupAll(), "DevelopementMode", "ON");
    }
    else if (auto0C951E18_val == "TEST") {
        lib90F7C81D_gf_SetSpawnLoopTimer(lib90F7C81D_ge_LoopType_Main, 60.0);
        gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_Main, true);
    }
    else if (auto0C951E18_val == "CREATE") {
        if ((StringToInt(StringWord(lv_message, 3)) > 0) && (StringToInt(StringWord(lv_message, 3)) < 13) && (UnitTypeFromString(StringWord(lv_message, 4)) != null)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(StringToInt(StringWord(lv_message, 3)), UnitTypeFromString(StringWord(lv_message, 4)), c_unitCreateIgnorePlacement, lv_user, CameraGetTarget(lv_user));
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/009AC9BC"));
            libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), Color(100,100,100), PlayerGroupAll());
        }
    }
    else if (auto0C951E18_val == "REMOVE") {
        auto90498B84_g = UnitGroupSelected(lv_user);
        auto90498B84_u = UnitGroupCount(auto90498B84_g, c_unitCountAll);
        for (;; auto90498B84_u -= 1) {
            auto90498B84_var = UnitGroupUnitFromEnd(auto90498B84_g, auto90498B84_u);
            if (auto90498B84_var == null) { break; }
            UnitRemove(auto90498B84_var);
        }
    }
    else if (auto0C951E18_val == "GIVE") {
        if ((StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) >= 0) && (StringToInt(StringWord(lv_message, 3)) <= 15)) {
            autoC0FBB20A_g = UnitGroupSelected(lv_user);
            autoC0FBB20A_u = UnitGroupCount(autoC0FBB20A_g, c_unitCountAll);
            for (;; autoC0FBB20A_u -= 1) {
                autoC0FBB20A_var = UnitGroupUnitFromEnd(autoC0FBB20A_g, autoC0FBB20A_u);
                if (autoC0FBB20A_var == null) { break; }
                UnitSetOwner(autoC0FBB20A_var, StringToInt(StringWord(lv_message, 3)), true);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/6DE4890B"));
        }
    }
    else if (auto0C951E18_val == "REVEAL") {
        auto10E06FC8_g = PlayerGroupAll();
        auto10E06FC8_var = -1;
        while (true) {
            auto10E06FC8_var = PlayerGroupNextPlayer(auto10E06FC8_g, auto10E06FC8_var);
            if (auto10E06FC8_var < 0) { break; }
            VisRevealArea(auto10E06FC8_var, RegionEntireMap(), 0.0, false);
        }
    }
    else if (auto0C951E18_val == "XP") {
        if ((StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) >= 1) && (StringToInt(StringWord(lv_message, 3)) <= 20)) {
            gf_AddHeroLevels(StringToInt(StringWord(lv_message, 3)));
        }
        else {
            gf_AddHeroLevels(1);
        }
    }
    else if (auto0C951E18_val == "KICK") {
        if ((StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) >= 1) && (StringToInt(StringWord(lv_message, 3)) <= 12)) {
            KickFromGame(PlayerGroupSingle(StringToInt(StringWord(lv_message, 3))));
        }

    }
    else if (auto0C951E18_val == "COOLDOWN") {
        auto1A35B0FE_g = UnitGroupSelected(lv_user);
        auto1A35B0FE_u = UnitGroupCount(auto1A35B0FE_g, c_unitCountAll);
        for (;; auto1A35B0FE_u -= 1) {
            auto1A35B0FE_var = UnitGroupUnitFromEnd(auto1A35B0FE_g, auto1A35B0FE_u);
            if (auto1A35B0FE_var == null) { break; }
            ResetAllAbilityCooldownsForUnit(auto1A35B0FE_var);
        }
    }
    else if (auto0C951E18_val == "CD") {
        autoAFBC5748_g = UnitGroupSelected(lv_user);
        autoAFBC5748_u = UnitGroupCount(autoAFBC5748_g, c_unitCountAll);
        for (;; autoAFBC5748_u -= 1) {
            autoAFBC5748_var = UnitGroupUnitFromEnd(autoAFBC5748_g, autoAFBC5748_u);
            if (autoAFBC5748_var == null) { break; }
            ResetAllAbilityCooldownsForUnit(autoAFBC5748_var);
        }
    }
    else if (auto0C951E18_val == "DEBUGSUPPLY") {
        UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, IntToText(PlayerGetPropertyInt(14, c_playerPropSuppliesUsed)));
    }
    else if (auto0C951E18_val == "BUFF") {
        if (((StringWord(lv_message, 3)) != null)) {
            autoA71A477F_g = UnitGroupSelected(lv_user);
            autoA71A477F_u = UnitGroupCount(autoA71A477F_g, c_unitCountAll);
            for (;; autoA71A477F_u -= 1) {
                autoA71A477F_var = UnitGroupUnitFromEnd(autoA71A477F_g, autoA71A477F_u);
                if (autoA71A477F_var == null) { break; }
                UnitBehaviorAdd(autoA71A477F_var, (StringWord(lv_message, 3)), autoA71A477F_var, 1);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/DC709221"));
        }
    }
    else if (auto0C951E18_val == "UNBUFF") {
        if (((StringWord(lv_message, 3)) != null)) {
            autoD96D01A7_g = UnitGroupSelected(lv_user);
            autoD96D01A7_u = UnitGroupCount(autoD96D01A7_g, c_unitCountAll);
            for (;; autoD96D01A7_u -= 1) {
                autoD96D01A7_var = UnitGroupUnitFromEnd(autoD96D01A7_g, autoD96D01A7_u);
                if (autoD96D01A7_var == null) { break; }
                UnitBehaviorRemove(autoD96D01A7_var, (StringWord(lv_message, 3)), 1);
            }
        }
        else {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/8DFFC688"));
        }
    }
    else if (auto0C951E18_val == "HEAL") {
        auto11D7CE4D_g = UnitGroupSelected(lv_user);
        auto11D7CE4D_u = UnitGroupCount(auto11D7CE4D_g, c_unitCountAll);
        for (;; auto11D7CE4D_u -= 1) {
            auto11D7CE4D_var = UnitGroupUnitFromEnd(auto11D7CE4D_g, auto11D7CE4D_u);
            if (auto11D7CE4D_var == null) { break; }
            UnitSetPropertyFixed(auto11D7CE4D_var, c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(auto11D7CE4D_var, c_unitPropEnergyPercent, 100.0);
            autoE5DFAAD7_userType = "Ailments";
            autoE5DFAAD7_i = 1;
            for ( ; autoE5DFAAD7_i <= UserDataInstanceCount(autoE5DFAAD7_userType) ; autoE5DFAAD7_i += 1 ) {
                lv_ailmentInstance = UserDataInstance(autoE5DFAAD7_userType, autoE5DFAAD7_i);
                if ((UnitHasBehavior2(auto11D7CE4D_var, UserDataGetGameLink("Ailments", lv_ailmentInstance, "Ailment Behavior", 1)) == true)) {
                    UnitBehaviorRemove(auto11D7CE4D_var, UserDataGetGameLink("Ailments", lv_ailmentInstance, "Ailment Behavior", 1), 1);
                }
            }
        }
    }
    else if (auto0C951E18_val == "REV") {
        if ((StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) >= 1) && (StringToInt(StringWord(lv_message, 3)) <= 12)) {
            if ((lib90F7C81D_gv_playersHeroisDead[StringToInt(StringWord(lv_message, 3))] == true)) {
                PlayerCreateEffectUnit(0, "ReviveModifyUnit", lib90F7C81D_gv_playerHeroes[StringToInt(StringWord(lv_message, 3))]);
            }
        }
        else if ((StringWord(lv_message, 3) != null) && (StringEqual(StringWord(lv_message, 3), "all", c_stringNoCase) == true)) {
            auto166D30EE_g = lib90F7C81D_gv_players;
            auto166D30EE_var = -1;
            while (true) {
                auto166D30EE_var = PlayerGroupNextPlayer(auto166D30EE_g, auto166D30EE_var);
                if (auto166D30EE_var < 0) { break; }
                if ((lib90F7C81D_gv_playersHeroisDead[auto166D30EE_var] == true)) {
                    PlayerCreateEffectUnit(0, "ReviveModifyUnit", lib90F7C81D_gv_playerHeroes[auto166D30EE_var]);
                }
            }
        }
        else if (true) {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaSubtitle, StringExternal("Param/Value/865662CF"));
        }
    }
    else if (auto0C951E18_val == "SCRIPTED") {
        if ((StringWord(lv_message, 3) != null) && (StringToInt(StringWord(lv_message, 3)) >= 4) && (StringToInt(StringWord(lv_message, 3)) <= 15)) {
            gf_CampaignScriptedSpawns(StringToInt(StringWord(lv_message, 3)));
        }
        else if (true) {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaSubtitle, StringExternal("Param/Value/C2A36CC0"));
        }
    }
    else if (auto0C951E18_val == "KILL") {
        auto24F1D395_g = UnitGroupSelected(lv_user);
        auto24F1D395_u = UnitGroupCount(auto24F1D395_g, c_unitCountAll);
        for (;; auto24F1D395_u -= 1) {
            auto24F1D395_var = UnitGroupUnitFromEnd(auto24F1D395_g, auto24F1D395_u);
            if (auto24F1D395_var == null) { break; }
            UnitKill(auto24F1D395_var);
        }
    }
    else if (auto0C951E18_val == "IDK") {
        if ((StringWord(lv_message, 3) != null) && (StringCase(StringWord(lv_message, 3), true) == "ON")) {
            gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_Campaign, true);
        }
        else if ((StringWord(lv_message, 3) != null) && (StringCase(StringWord(lv_message, 3), true) == "OFF")) {
            gf_SpawnLoopManager(lib90F7C81D_ge_LoopType_Campaign, false);
        }
        else if (true) {
            UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaSubtitle, StringExternal("Param/Value/39C7410F"));
        }
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_user), c_messageAreaError, StringExternal("Param/Value/FBB39279"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DevCommands_Init () {
    gt_DevCommands = TriggerCreate("gt_DevCommands_Func");
    TriggerAddEventChatMessage(gt_DevCommands, c_playerAny, "dev", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Whatami
//--------------------------------------------------------------------------------------------------
bool gt_Whatami_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/363C3A28"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Whatami_Init () {
    gt_Whatami = TriggerCreate("gt_Whatami_Func");
    TriggerAddEventChatMessage(gt_Whatami, c_playerAny, "-whatami", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DiceRoll
//--------------------------------------------------------------------------------------------------
bool gt_DiceRoll_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_message;
    int lv_x;
    int lv_roll;

    // Automatic Variable Declarations
    int auto46F27258_ae;
    const int auto46F27258_ai = 1;

    // Variable Initialization
    lv_message = EventChatMessage(false);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringCase(StringWord(lv_message, 3), false) != "d")) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/C4E30CF8"));

    }
    auto46F27258_ae = StringToInt(StringWord(lv_message, 2));
    lv_x = 1;
    for ( ; ( (auto46F27258_ai >= 0 && lv_x <= auto46F27258_ae) || (auto46F27258_ai < 0 && lv_x >= auto46F27258_ae) ) ; lv_x += auto46F27258_ai ) {
        lv_roll = (lv_roll + RandomInt(1, StringToInt(StringWord(lv_message, 4))));
    }
    TextExpressionSetToken("Param/Expression/91103C17", "A", IntToText(lv_roll));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaChat, TextExpressionAssemble("Param/Expression/91103C17"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DiceRoll_Init () {
    gt_DiceRoll = TriggerCreate("gt_DiceRoll_Func");
    TriggerAddEventChatMessage(gt_DiceRoll, c_playerAny, "-roll", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_ModeController_Init();
    gt_ConductKLE_Init();
    gt_EnterTown_Init();
    gt_MeetWithMayor_Init();
    gt_KLEEnd_Init();
    gt_SentryItemUse_Init();
    gt_SentryTimerExpires_Init();
    gt_SentryEnd_Init();
    gt_SentrySetup_Init();
    gt_SentryPing_Init();
    gt_SpawnCaches_Init();
    gt_CheckContainmentAuto_Init();
    gt_TCPTimerExpires_Init();
    gt_TCPContainmentSetup_Init();
    gt_PreservetheReserveSetup_Init();
    gt_SearchHomeForCivillian_Init();
    gt_ReservistEntersBarracks_Init();
    gt_ReservistDeath_Init();
    gt_EscortCargoTrucksSetup_Init();
    gt_EscortCargoTrucksEnd_Init();
    gt_CargoTruckMovement_Init();
    gt_CargoTruckDeath_Init();
    gt_CargoTruckExit_Init();
    gt_CargoTruckUnstuck_Init();
    gt_EngineerEscortSetup_Init();
    gt_EngineerEntersRepairPoint_Init();
    gt_EngineerRepairedVehicle_Init();
    gt_EngineerDeath_Init();
    gt_EngineerMissionEnd_Init();
    gt_AkmasRevengeSetup_Init();
    gt_MeetFarmerBlackma_Init();
    gt_SiloLoop_Init();
    gt_ReservistEscort_Init();
    gt_FarmerBlackmaDamaged_Init();
    gt_FarmerBlackmaDeath_Init();
    gt_FoodSampleCollected_Init();
    gt_FoodSampleTimerEnd_Init();
    gt_MassRecallSetup_Init();
    gt_CivilianHouseSearched_Init();
    gt_CivilianEntersDasdan_Init();
    gt_CiviianChangeOwner_Init();
    gt_CivilianDies_Init();
    gt_MassRecallTimerEnd_Init();
    gt_SpiderEggSetup_Init();
    gt_SpiderEggDeath_Init();
    gt_SpiderEggTimerEnd_Init();
    gt_SpiderKingSetup_Init();
    gt_SpiderKingMinimapPing_Init();
    gt_SpiderKingDeath_Init();
    gt_SpiderKingTimerEnd_Init();
    gt_EscalationSetup_Init();
    gt_Saber6CommanderDeath_Init();
    gt_SquadMovement_Init();
    gt_Saber6ArrivesAtMayor_Init();
    gt_Saber6SquadDeath_Init();
    gt_Saber6ArrivesAtWestTCP_Init();
    gt_EscalationEnd_Init();
    gt_BulwarkSetup_Init();
    gt_BulwarkUnstuck_Init();
    gt_SpawnRefugees_Init();
    gt_RefugeeDeath_Init();
    gt_RefugeeEntersDasdan_Init();
    gt_RefugeeEnd_Init();
    gt_PestControlSetup_Init();
    gt_ApiaryDeath_Init();
    gt_ApiaryEnd_Init();
    gt_AbdulSetup_Init();
    gt_AbdulVehicleRepaired_Init();
    gt_AbdulExit_Init();
    gt_AbdulEnd_Init();
    gt_TheGreatEscapeSetup_Init();
    gt_TruckEntersDasdan_Init();
    gt_LoadUpCivilians_Init();
    gt_CivEntersTruck_Init();
    gt_RefugeesRun_Init();
    gt_RefugeeExit_Init();
    gt_DasdanRefugeeDeath_Init();
    gt_TheGreatEscapeEnd_Init();
    gt_TrucksStuck_Init();
    gt_PartingGiftSetup_Init();
    gt_DarreusDeath_Init();
    gt_PartingGiftEnd_Init();
    gt_Chapter2EndingSetup_Init();
    gt_Chapter2End_Init();
    gt_TheOldCrewSetup_Init();
    gt_PhantomReinforcements_Init();
    gt_TheOldCrewEnd_Init();
    gt_ForTheRebellionSetup_Init();
    gt_Rebel6CommanderDeath_Init();
    gt_ForTheRebellionEnd_Init();
    gt_WhatsThePlanSetup_Init();
    gt_HouseSearched_Init();
    gt_PlayerEntersSearchRegion_Init();
    gt_PlayerExitsSearchRegion_Init();
    gt_WhatsThePlanEnd_Init();
    gt_WartimeProductionSetup_Init();
    gt_ScrapPartPickup_Init();
    gt_WartimeProductionEnd_Init();
    gt_BattlebotProduction_Init();
    gt_TanksAlotSetup_Init();
    gt_TankDeath_Init();
    gt_TerminalHacked_Init();
    gt_PlayerEntersTerminalRegion_Init();
    gt_PlayerExitsTerminalRegion_Init();
    gt_TanksALotEnd_Init();
    gt_JamItSetup_Init();
    gt_RASaboteurDeath_Init();
    gt_JamItEnd_Init();
    gt_FinaleSetup_Init();
    gt_PlayerEntersSiloRegion_Init();
    gt_PlayerExitsSiloRegion_Init();
    gt_SiloDisarmed_Init();
    gt_SiloTimers_Init();
    gt_CacumenDeath_Init();
    gt_FinaleEnd_Init();
    gt_PrologueVoteInit_Init();
    gt_PrologueVotes_Init();
    gt_PrologueVoteEnd_Init();
    gt_CampaignDebugCommands_Init();
    gt_CampaignMissionSelector_Init();
    gt_CampaignMissionStart_Init();
    gt_CampaignSingleMissionChecked_Init();
    gt_CampaignSetup_Init();
    gt_Survival3Minutes_Init();
    gt_Survival6Minutes_Init();
    gt_Survival9Minutes_Init();
    gt_Survival12Minutes_Init();
    gt_Survival15Minutes_Init();
    gt_Survival18Minutes_Init();
    gt_Survival21Minutes_Init();
    gt_Survival24Minutes_Init();
    gt_Survival27Minutes_Init();
    gt_Survival30Minutes_Init();
    gt_Survival35Minutes_Init();
    gt_SurvivalEvacPlayer_Init();
    gt_SurvivalEnd_Init();
    gt_SurvivalMiniBossKilled_Init();
    gt_ConsumeLife_Init();
    gt_ReturnPoliceToPost_Init();
    gt_SurvivalModeSetup_Init();
    gt_MissionSurvivalSetup3_Init();
    gt_ConvoyUnstuck_Init();
    gt_ConvoyDeath_Init();
    gt_ConvoyExit_Init();
    gt_ConvoyMovement_Init();
    gt_ConvoyETATimer_Init();
    gt_BruiserBrothers_Init();
    gt_SatchelItemUse_Init();
    gt_SatchelTimer_Init();
    gt_SatchelBeacon_Init();
    gt_SatchelDeath_Init();
    gt_SatchelDamaged_Init();
    gt_MissionSurvivalSetup_Init();
    gt_MissionSurvDebugVariant1_Init();
    gt_MissionSurvivalSetup2_Init();
    gt_MissionSurvDebugVariant2_Init();
    gt_TimedRushBossDeath_Init();
    gt_RushBossTimer_Init();
    gt_RushBossExit_Init();
    gt_RushPointAToBTimer_Init();
    gt_Decay_Init();
    gt_BossRushSetup_Init();
    gt_BossRushDebugCommands_Init();
    gt_ListSelectedIndex_Init();
    gt_SpawnCount_Init();
    gt_PlaceUnit_Init();
    gt_SpawnUndeadType_Init();
    gt_SpawnEnemyGroup_Init();
    gt_DestroyCursor_Init();
    gt_AbilitiesResearched_Init();
    gt_OptionSettings_Init();
    gt_AutoRevive_Init();
    gt_SandboxSetup_Init();
    gt_DeathmatchSetup_Init();
    gt_Initialize_Init();
    gt_LoadBank_Init();
    gt_UpdateStats_Init();
    gt_BankBackup_Init();
    gt_ClassicCard_Init();
    gt_DisplayXP_Init();
    gt_ScoreScreenXPCard_Init();
    gt_InitSupplyCaches_Init();
    gt_FindSupplyCache_Init();
    gt_ModeSelection_Init();
    gt_VoteTimerTimeout_Init();
    gt_ChooseHero_Init();
    gt_ReadyButton_Init();
    gt_MOSButtons_Init();
    gt_AutoSelectMOS_Init();
    gt_SpawnLoopMain_Init();
    gt_SpawnLoopCampaign_Init();
    gt_SpawnLoopT3_Init();
    gt_SpawnLoopT1_Init();
    gt_SpawnLoopSanies_Init();
    gt_SpawnLoopBossRush_Init();
    gt_SpawnLoopTCPContainment_Init();
    gt_PlagueSpawnLoop_Init();
    gt_CampaignRASpawnLoop_Init();
    gt_UndeadAIThink_Init();
    gt_ScaleDifficulty_Init();
    gt_ForceRemoveUndeadUnits_Init();
    gt_DevCommands_Init();
    gt_Whatami_Init();
    gt_DiceRoll_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
